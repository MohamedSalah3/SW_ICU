
softwareICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000019bc  00001a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  0080006c  0080006c  00001a5c  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00001a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00003628  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00003bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f5a  00000000  00000000  00003d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077d  00000000  00000000  00005cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a27  00000000  00000000  00006467  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c0c  00000000  00000000  00006e90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e49  00000000  00000000  00007a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d1f  00000000  00000000  000088e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__vector_1>
       8:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_2>
       c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_3>
      10:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_4>
      14:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_5>
      18:	0c 94 1c 02 	jmp	0x438	; 0x438 <__vector_6>
      1c:	0c 94 43 02 	jmp	0x486	; 0x486 <__vector_7>
      20:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__vector_8>
      24:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_9>
      28:	0c 94 b8 02 	jmp	0x570	; 0x570 <__vector_10>
      2c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__vector_11>
      30:	0c 94 06 03 	jmp	0x60c	; 0x60c <__vector_12>
      34:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__vector_13>
      38:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__vector_14>
      3c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__vector_15>
      40:	0c 94 a2 03 	jmp	0x744	; 0x744 <__vector_16>
      44:	0c 94 c9 03 	jmp	0x792	; 0x792 <__vector_17>
      48:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__vector_18>
      4c:	0c 94 17 04 	jmp	0x82e	; 0x82e <__vector_19>
      50:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 69 05 	call	0xad2	; 0xad2 <main>
      8a:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <gpioPortDirection>:
 * @param value: set the port value and takes the following values
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */

switch (u8_port)	
      92:	81 30       	cpi	r24, 0x01	; 1
      94:	49 f0       	breq	.+18     	; 0xa8 <gpioPortDirection+0x16>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	28 f0       	brcs	.+10     	; 0xa4 <gpioPortDirection+0x12>
      9a:	82 30       	cpi	r24, 0x02	; 2
      9c:	39 f0       	breq	.+14     	; 0xac <gpioPortDirection+0x1a>
      9e:	83 30       	cpi	r24, 0x03	; 3
      a0:	41 f4       	brne	.+16     	; 0xb2 <gpioPortDirection+0x20>
      a2:	06 c0       	rjmp	.+12     	; 0xb0 <gpioPortDirection+0x1e>
{	case GPIOA:
	PORTA_DIR = u8_direction;
      a4:	6a bb       	out	0x1a, r22	; 26
	break;
      a6:	08 95       	ret
	case GPIOB:
	PORTB_DIR = u8_direction;
      a8:	67 bb       	out	0x17, r22	; 23
	break;
      aa:	08 95       	ret
	case GPIOC:
	PORTC_DIR = u8_direction;
      ac:	64 bb       	out	0x14, r22	; 20
	break;
      ae:	08 95       	ret
	case GPIOD:
	PORTD_DIR = u8_direction;
      b0:	61 bb       	out	0x11, r22	; 17
      b2:	08 95       	ret

000000b4 <gpioPortWrite>:
}

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	
switch (u8_port)	
      b4:	81 30       	cpi	r24, 0x01	; 1
      b6:	49 f0       	breq	.+18     	; 0xca <gpioPortWrite+0x16>
      b8:	81 30       	cpi	r24, 0x01	; 1
      ba:	28 f0       	brcs	.+10     	; 0xc6 <gpioPortWrite+0x12>
      bc:	82 30       	cpi	r24, 0x02	; 2
      be:	39 f0       	breq	.+14     	; 0xce <gpioPortWrite+0x1a>
      c0:	83 30       	cpi	r24, 0x03	; 3
      c2:	41 f4       	brne	.+16     	; 0xd4 <gpioPortWrite+0x20>
      c4:	06 c0       	rjmp	.+12     	; 0xd2 <gpioPortWrite+0x1e>
{	case GPIOA:
	PORTA_DATA = u8_value;
      c6:	6b bb       	out	0x1b, r22	; 27
	break;
      c8:	08 95       	ret
	case GPIOB:
	PORTB_DATA = u8_value;
      ca:	68 bb       	out	0x18, r22	; 24
	break;
      cc:	08 95       	ret
	case GPIOC:
	PORTC_DATA = u8_value;
      ce:	65 bb       	out	0x15, r22	; 21
	break;
      d0:	08 95       	ret
	case GPIOD:
	PORTD_DATA = u8_value;
      d2:	62 bb       	out	0x12, r22	; 18
      d4:	08 95       	ret

000000d6 <gpioPortToggle>:
	
}
void gpioPortToggle(uint8_t u8_port)
{
	
switch (u8_port)	
      d6:	81 30       	cpi	r24, 0x01	; 1
      d8:	59 f0       	breq	.+22     	; 0xf0 <gpioPortToggle+0x1a>
      da:	81 30       	cpi	r24, 0x01	; 1
      dc:	28 f0       	brcs	.+10     	; 0xe8 <gpioPortToggle+0x12>
      de:	82 30       	cpi	r24, 0x02	; 2
      e0:	59 f0       	breq	.+22     	; 0xf8 <gpioPortToggle+0x22>
      e2:	83 30       	cpi	r24, 0x03	; 3
      e4:	81 f4       	brne	.+32     	; 0x106 <gpioPortToggle+0x30>
      e6:	0c c0       	rjmp	.+24     	; 0x100 <gpioPortToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^= HIGH;
      e8:	8b b3       	in	r24, 0x1b	; 27
      ea:	80 95       	com	r24
      ec:	8b bb       	out	0x1b, r24	; 27
	break;
      ee:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^= HIGH;
      f0:	88 b3       	in	r24, 0x18	; 24
      f2:	80 95       	com	r24
      f4:	88 bb       	out	0x18, r24	; 24
	break;
      f6:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^= HIGH;
      f8:	85 b3       	in	r24, 0x15	; 21
      fa:	80 95       	com	r24
      fc:	85 bb       	out	0x15, r24	; 21
	break;
      fe:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^= HIGH;
     100:	82 b3       	in	r24, 0x12	; 18
     102:	80 95       	com	r24
     104:	82 bb       	out	0x12, r24	; 18
     106:	08 95       	ret

00000108 <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
	
switch (u8_port)	
     108:	81 30       	cpi	r24, 0x01	; 1
     10a:	49 f0       	breq	.+18     	; 0x11e <gpioPortRead+0x16>
     10c:	81 30       	cpi	r24, 0x01	; 1
     10e:	28 f0       	brcs	.+10     	; 0x11a <gpioPortRead+0x12>
     110:	82 30       	cpi	r24, 0x02	; 2
     112:	39 f0       	breq	.+14     	; 0x122 <gpioPortRead+0x1a>
     114:	83 30       	cpi	r24, 0x03	; 3
     116:	49 f4       	brne	.+18     	; 0x12a <gpioPortRead+0x22>
     118:	06 c0       	rjmp	.+12     	; 0x126 <gpioPortRead+0x1e>
{	case GPIOA:
	U8_ret_Port_data=PORTA_DATA & HIGH;
     11a:	8b b3       	in	r24, 0x1b	; 27
	break;
     11c:	08 95       	ret
	case GPIOB:
	U8_ret_Port_data=PORTB_DATA & HIGH;
     11e:	88 b3       	in	r24, 0x18	; 24
	break;
     120:	08 95       	ret
	case GPIOC:
	U8_ret_Port_data=PORTC_DATA & HIGH;
     122:	85 b3       	in	r24, 0x15	; 21
	break;
     124:	08 95       	ret
	case GPIOD:
	U8_ret_Port_data=PORTD_DATA & HIGH;
     126:	82 b3       	in	r24, 0x12	; 18
	break;
     128:	08 95       	ret
	
}

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
     12a:	80 e0       	ldi	r24, 0x00	; 0
	break;
	
}

return 	U8_ret_Port_data;
}
     12c:	08 95       	ret

0000012e <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
switch(u8_direction){
     12e:	44 23       	and	r20, r20
     130:	19 f0       	breq	.+6      	; 0x138 <gpioPinDirection+0xa>
     132:	4f 3f       	cpi	r20, 0xFF	; 255
     134:	d1 f5       	brne	.+116    	; 0x1aa <gpioPinDirection+0x7c>
     136:	21 c0       	rjmp	.+66     	; 0x17a <gpioPinDirection+0x4c>
case INPUT:
{
switch (u8_port)	
     138:	81 30       	cpi	r24, 0x01	; 1
     13a:	69 f0       	breq	.+26     	; 0x156 <gpioPinDirection+0x28>
     13c:	81 30       	cpi	r24, 0x01	; 1
     13e:	28 f0       	brcs	.+10     	; 0x14a <gpioPinDirection+0x1c>
     140:	82 30       	cpi	r24, 0x02	; 2
     142:	79 f0       	breq	.+30     	; 0x162 <gpioPinDirection+0x34>
     144:	83 30       	cpi	r24, 0x03	; 3
     146:	c9 f4       	brne	.+50     	; 0x17a <gpioPinDirection+0x4c>
     148:	12 c0       	rjmp	.+36     	; 0x16e <gpioPinDirection+0x40>
{	case GPIOA:
	PORTA_DIR &=(~u8_pins);   // 0b01111111
     14a:	8a b3       	in	r24, 0x1a	; 26
     14c:	96 2f       	mov	r25, r22
     14e:	90 95       	com	r25
     150:	89 23       	and	r24, r25
     152:	8a bb       	out	0x1a, r24	; 26
     154:	1b c0       	rjmp	.+54     	; 0x18c <gpioPinDirection+0x5e>
	break;
	case GPIOB:
	PORTB_DIR &=(~u8_pins);
     156:	87 b3       	in	r24, 0x17	; 23
     158:	96 2f       	mov	r25, r22
     15a:	90 95       	com	r25
     15c:	89 23       	and	r24, r25
     15e:	87 bb       	out	0x17, r24	; 23
     160:	19 c0       	rjmp	.+50     	; 0x194 <gpioPinDirection+0x66>
	break;
	case GPIOC:
	PORTC_DIR &=(~u8_pins);
     162:	84 b3       	in	r24, 0x14	; 20
     164:	96 2f       	mov	r25, r22
     166:	90 95       	com	r25
     168:	89 23       	and	r24, r25
     16a:	84 bb       	out	0x14, r24	; 20
     16c:	17 c0       	rjmp	.+46     	; 0x19c <gpioPinDirection+0x6e>
	break;
	case GPIOD:
	PORTD_DIR &=(~u8_pins);
     16e:	81 b3       	in	r24, 0x11	; 17
     170:	96 2f       	mov	r25, r22
     172:	90 95       	com	r25
     174:	89 23       	and	r24, r25
     176:	81 bb       	out	0x11, r24	; 17
     178:	15 c0       	rjmp	.+42     	; 0x1a4 <gpioPinDirection+0x76>
	break;
	
}
}
case OUTPUT:{
switch (u8_port)	
     17a:	81 30       	cpi	r24, 0x01	; 1
     17c:	59 f0       	breq	.+22     	; 0x194 <gpioPinDirection+0x66>
     17e:	81 30       	cpi	r24, 0x01	; 1
     180:	28 f0       	brcs	.+10     	; 0x18c <gpioPinDirection+0x5e>
     182:	82 30       	cpi	r24, 0x02	; 2
     184:	59 f0       	breq	.+22     	; 0x19c <gpioPinDirection+0x6e>
     186:	83 30       	cpi	r24, 0x03	; 3
     188:	81 f4       	brne	.+32     	; 0x1aa <gpioPinDirection+0x7c>
     18a:	0c c0       	rjmp	.+24     	; 0x1a4 <gpioPinDirection+0x76>
{	case GPIOA:
	PORTA_DIR |=(u8_pins);
     18c:	8a b3       	in	r24, 0x1a	; 26
     18e:	68 2b       	or	r22, r24
     190:	6a bb       	out	0x1a, r22	; 26
	break;
     192:	08 95       	ret
	case GPIOB:
	PORTB_DIR |=(u8_pins);
     194:	87 b3       	in	r24, 0x17	; 23
     196:	68 2b       	or	r22, r24
     198:	67 bb       	out	0x17, r22	; 23
	break;
     19a:	08 95       	ret
	case GPIOC:
	PORTC_DIR |=(u8_pins);
     19c:	84 b3       	in	r24, 0x14	; 20
     19e:	68 2b       	or	r22, r24
     1a0:	64 bb       	out	0x14, r22	; 20
	break;
     1a2:	08 95       	ret
	case GPIOD:
	PORTD_DIR |=(u8_pins);
     1a4:	81 b3       	in	r24, 0x11	; 17
     1a6:	68 2b       	or	r22, r24
     1a8:	61 bb       	out	0x11, r22	; 17
     1aa:	08 95       	ret

000001ac <gpioPinWrite>:
	
	
}

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{switch(u8_value){
     1ac:	44 23       	and	r20, r20
     1ae:	19 f0       	breq	.+6      	; 0x1b6 <gpioPinWrite+0xa>
     1b0:	4f 3f       	cpi	r20, 0xFF	; 255
     1b2:	b1 f5       	brne	.+108    	; 0x220 <gpioPinWrite+0x74>
     1b4:	1d c0       	rjmp	.+58     	; 0x1f0 <gpioPinWrite+0x44>
case LOW:
{
switch (u8_port)	
     1b6:	81 30       	cpi	r24, 0x01	; 1
     1b8:	61 f0       	breq	.+24     	; 0x1d2 <gpioPinWrite+0x26>
     1ba:	81 30       	cpi	r24, 0x01	; 1
     1bc:	28 f0       	brcs	.+10     	; 0x1c8 <gpioPinWrite+0x1c>
     1be:	82 30       	cpi	r24, 0x02	; 2
     1c0:	69 f0       	breq	.+26     	; 0x1dc <gpioPinWrite+0x30>
     1c2:	83 30       	cpi	r24, 0x03	; 3
     1c4:	69 f5       	brne	.+90     	; 0x220 <gpioPinWrite+0x74>
     1c6:	0f c0       	rjmp	.+30     	; 0x1e6 <gpioPinWrite+0x3a>
{	case GPIOA:
	PORTA_DATA &= ~(u8_pins);   // 0b01111111
     1c8:	8b b3       	in	r24, 0x1b	; 27
     1ca:	60 95       	com	r22
     1cc:	68 23       	and	r22, r24
     1ce:	6b bb       	out	0x1b, r22	; 27
	break;
     1d0:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(u8_pins);
     1d2:	88 b3       	in	r24, 0x18	; 24
     1d4:	60 95       	com	r22
     1d6:	68 23       	and	r22, r24
     1d8:	68 bb       	out	0x18, r22	; 24
	break;
     1da:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(u8_pins);
     1dc:	85 b3       	in	r24, 0x15	; 21
     1de:	60 95       	com	r22
     1e0:	68 23       	and	r22, r24
     1e2:	65 bb       	out	0x15, r22	; 21
	break;
     1e4:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(u8_pins);
     1e6:	82 b3       	in	r24, 0x12	; 18
     1e8:	60 95       	com	r22
     1ea:	68 23       	and	r22, r24
     1ec:	62 bb       	out	0x12, r22	; 18
	break;
     1ee:	08 95       	ret
	
}
break;
}
case HIGH:{
switch (u8_port)	
     1f0:	81 30       	cpi	r24, 0x01	; 1
     1f2:	59 f0       	breq	.+22     	; 0x20a <gpioPinWrite+0x5e>
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	28 f0       	brcs	.+10     	; 0x202 <gpioPinWrite+0x56>
     1f8:	82 30       	cpi	r24, 0x02	; 2
     1fa:	59 f0       	breq	.+22     	; 0x212 <gpioPinWrite+0x66>
     1fc:	83 30       	cpi	r24, 0x03	; 3
     1fe:	81 f4       	brne	.+32     	; 0x220 <gpioPinWrite+0x74>
     200:	0c c0       	rjmp	.+24     	; 0x21a <gpioPinWrite+0x6e>
{	case GPIOA:
	PORTA_DATA |=(u8_pins);
     202:	8b b3       	in	r24, 0x1b	; 27
     204:	68 2b       	or	r22, r24
     206:	6b bb       	out	0x1b, r22	; 27
	break;
     208:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(u8_pins);
     20a:	88 b3       	in	r24, 0x18	; 24
     20c:	68 2b       	or	r22, r24
     20e:	68 bb       	out	0x18, r22	; 24
	break;
     210:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(u8_pins);
     212:	85 b3       	in	r24, 0x15	; 21
     214:	68 2b       	or	r22, r24
     216:	65 bb       	out	0x15, r22	; 21
	break;
     218:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(u8_pins);
     21a:	82 b3       	in	r24, 0x12	; 18
     21c:	68 2b       	or	r22, r24
     21e:	62 bb       	out	0x12, r22	; 18
     220:	08 95       	ret

00000222 <gpioPinToggle>:
}

}
void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
switch (u8_port)	
     222:	81 30       	cpi	r24, 0x01	; 1
     224:	59 f0       	breq	.+22     	; 0x23c <gpioPinToggle+0x1a>
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	28 f0       	brcs	.+10     	; 0x234 <gpioPinToggle+0x12>
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	59 f0       	breq	.+22     	; 0x244 <gpioPinToggle+0x22>
     22e:	83 30       	cpi	r24, 0x03	; 3
     230:	81 f4       	brne	.+32     	; 0x252 <gpioPinToggle+0x30>
     232:	0c c0       	rjmp	.+24     	; 0x24c <gpioPinToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^=(u8_pins);
     234:	8b b3       	in	r24, 0x1b	; 27
     236:	68 27       	eor	r22, r24
     238:	6b bb       	out	0x1b, r22	; 27
	break;
     23a:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^=(u8_pins);
     23c:	88 b3       	in	r24, 0x18	; 24
     23e:	68 27       	eor	r22, r24
     240:	68 bb       	out	0x18, r22	; 24
	break;
     242:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^=(u8_pins);
     244:	85 b3       	in	r24, 0x15	; 21
     246:	68 27       	eor	r22, r24
     248:	65 bb       	out	0x15, r22	; 21
	break;
     24a:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^=(u8_pins);
     24c:	82 b3       	in	r24, 0x12	; 18
     24e:	68 27       	eor	r22, r24
     250:	62 bb       	out	0x12, r22	; 18
     252:	08 95       	ret

00000254 <gpioPinRead>:
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
switch (u8_port)	
     254:	81 30       	cpi	r24, 0x01	; 1
     256:	51 f0       	breq	.+20     	; 0x26c <gpioPinRead+0x18>
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	28 f0       	brcs	.+10     	; 0x266 <gpioPinRead+0x12>
     25c:	82 30       	cpi	r24, 0x02	; 2
     25e:	49 f0       	breq	.+18     	; 0x272 <gpioPinRead+0x1e>
     260:	83 30       	cpi	r24, 0x03	; 3
     262:	69 f4       	brne	.+26     	; 0x27e <gpioPinRead+0x2a>
     264:	09 c0       	rjmp	.+18     	; 0x278 <gpioPinRead+0x24>
{	case GPIOA:
	U8_ret_BIT_data=(PORTA_PIN & u8_pin);
     266:	89 b3       	in	r24, 0x19	; 25
     268:	68 23       	and	r22, r24
	break;
     26a:	0a c0       	rjmp	.+20     	; 0x280 <gpioPinRead+0x2c>
	case GPIOB:
	U8_ret_BIT_data=(PORTB_PIN & u8_pin);
     26c:	86 b3       	in	r24, 0x16	; 22
     26e:	68 23       	and	r22, r24
	break;
     270:	07 c0       	rjmp	.+14     	; 0x280 <gpioPinRead+0x2c>
	case GPIOC:
	U8_ret_BIT_data=(PORTC_PIN & u8_pin);
     272:	83 b3       	in	r24, 0x13	; 19
     274:	68 23       	and	r22, r24
	break;
     276:	04 c0       	rjmp	.+8      	; 0x280 <gpioPinRead+0x2c>
	case GPIOD:
	U8_ret_BIT_data=(PORTD_PIN & u8_pin);
     278:	80 b3       	in	r24, 0x10	; 16
     27a:	68 23       	and	r22, r24
	break;
     27c:	01 c0       	rjmp	.+2      	; 0x280 <gpioPinRead+0x2c>
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
     27e:	60 e0       	ldi	r22, 0x00	; 0
}
	
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	66 23       	and	r22, r22
     284:	09 f4       	brne	.+2      	; 0x288 <gpioPinRead+0x34>
     286:	80 e0       	ldi	r24, 0x00	; 0
if(U8_ret_BIT_data > 0)
{
	U8_ret_BIT_data = 1;
}
return U8_ret_BIT_data;
     288:	08 95       	ret

0000028a <G_interrupt_Enable>:
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
//	sei();
 SREG |=(0x80);
     28a:	8f b7       	in	r24, 0x3f	; 63
     28c:	80 68       	ori	r24, 0x80	; 128
     28e:	8f bf       	out	0x3f, r24	; 63
}
     290:	08 95       	ret

00000292 <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
gpioPinDirection(GPIOB,BIT2,LOW);
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	64 e0       	ldi	r22, 0x04	; 4
     296:	40 e0       	ldi	r20, 0x00	; 0
     298:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
SET_BIT(GICR,INT2);
     29c:	8b b7       	in	r24, 0x3b	; 59
     29e:	80 62       	ori	r24, 0x20	; 32
     2a0:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);
     2a2:	84 b7       	in	r24, 0x34	; 52
     2a4:	80 64       	ori	r24, 0x40	; 64
     2a6:	84 bf       	out	0x34, r24	; 52
}
     2a8:	08 95       	ret

000002aa <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     2aa:	8f b7       	in	r24, 0x3f	; 63
     2ac:	8f 77       	andi	r24, 0x7F	; 127
     2ae:	8f bf       	out	0x3f, r24	; 63
}
     2b0:	08 95       	ret

000002b2 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     2b2:	1f 92       	push	r1
     2b4:	0f 92       	push	r0
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	0f 92       	push	r0
     2ba:	11 24       	eor	r1, r1
     2bc:	2f 93       	push	r18
     2be:	3f 93       	push	r19
     2c0:	4f 93       	push	r20
     2c2:	5f 93       	push	r21
     2c4:	6f 93       	push	r22
     2c6:	7f 93       	push	r23
     2c8:	8f 93       	push	r24
     2ca:	9f 93       	push	r25
     2cc:	af 93       	push	r26
     2ce:	bf 93       	push	r27
     2d0:	ef 93       	push	r30
     2d2:	ff 93       	push	r31
  INT0_external_interrupt();
     2d4:	e0 91 87 00 	lds	r30, 0x0087
     2d8:	f0 91 88 00 	lds	r31, 0x0088
     2dc:	09 95       	icall
}
     2de:	ff 91       	pop	r31
     2e0:	ef 91       	pop	r30
     2e2:	bf 91       	pop	r27
     2e4:	af 91       	pop	r26
     2e6:	9f 91       	pop	r25
     2e8:	8f 91       	pop	r24
     2ea:	7f 91       	pop	r23
     2ec:	6f 91       	pop	r22
     2ee:	5f 91       	pop	r21
     2f0:	4f 91       	pop	r20
     2f2:	3f 91       	pop	r19
     2f4:	2f 91       	pop	r18
     2f6:	0f 90       	pop	r0
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	0f 90       	pop	r0
     2fc:	1f 90       	pop	r1
     2fe:	18 95       	reti

00000300 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
     300:	1f 92       	push	r1
     302:	0f 92       	push	r0
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	0f 92       	push	r0
     308:	11 24       	eor	r1, r1
     30a:	2f 93       	push	r18
     30c:	3f 93       	push	r19
     30e:	4f 93       	push	r20
     310:	5f 93       	push	r21
     312:	6f 93       	push	r22
     314:	7f 93       	push	r23
     316:	8f 93       	push	r24
     318:	9f 93       	push	r25
     31a:	af 93       	push	r26
     31c:	bf 93       	push	r27
     31e:	ef 93       	push	r30
     320:	ff 93       	push	r31
  INT1_external_interrupt();
     322:	e0 91 8d 00 	lds	r30, 0x008D
     326:	f0 91 8e 00 	lds	r31, 0x008E
     32a:	09 95       	icall
}
     32c:	ff 91       	pop	r31
     32e:	ef 91       	pop	r30
     330:	bf 91       	pop	r27
     332:	af 91       	pop	r26
     334:	9f 91       	pop	r25
     336:	8f 91       	pop	r24
     338:	7f 91       	pop	r23
     33a:	6f 91       	pop	r22
     33c:	5f 91       	pop	r21
     33e:	4f 91       	pop	r20
     340:	3f 91       	pop	r19
     342:	2f 91       	pop	r18
     344:	0f 90       	pop	r0
     346:	0f be       	out	0x3f, r0	; 63
     348:	0f 90       	pop	r0
     34a:	1f 90       	pop	r1
     34c:	18 95       	reti

0000034e <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     34e:	1f 92       	push	r1
     350:	0f 92       	push	r0
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	0f 92       	push	r0
     356:	11 24       	eor	r1, r1
     358:	2f 93       	push	r18
     35a:	3f 93       	push	r19
     35c:	4f 93       	push	r20
     35e:	5f 93       	push	r21
     360:	6f 93       	push	r22
     362:	7f 93       	push	r23
     364:	8f 93       	push	r24
     366:	9f 93       	push	r25
     368:	af 93       	push	r26
     36a:	bf 93       	push	r27
     36c:	ef 93       	push	r30
     36e:	ff 93       	push	r31
  INT2_external_interrupt();
     370:	e0 91 68 00 	lds	r30, 0x0068
     374:	f0 91 69 00 	lds	r31, 0x0069
     378:	09 95       	icall
}
     37a:	ff 91       	pop	r31
     37c:	ef 91       	pop	r30
     37e:	bf 91       	pop	r27
     380:	af 91       	pop	r26
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	7f 91       	pop	r23
     388:	6f 91       	pop	r22
     38a:	5f 91       	pop	r21
     38c:	4f 91       	pop	r20
     38e:	3f 91       	pop	r19
     390:	2f 91       	pop	r18
     392:	0f 90       	pop	r0
     394:	0f be       	out	0x3f, r0	; 63
     396:	0f 90       	pop	r0
     398:	1f 90       	pop	r1
     39a:	18 95       	reti

0000039c <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     39c:	1f 92       	push	r1
     39e:	0f 92       	push	r0
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	0f 92       	push	r0
     3a4:	11 24       	eor	r1, r1
     3a6:	2f 93       	push	r18
     3a8:	3f 93       	push	r19
     3aa:	4f 93       	push	r20
     3ac:	5f 93       	push	r21
     3ae:	6f 93       	push	r22
     3b0:	7f 93       	push	r23
     3b2:	8f 93       	push	r24
     3b4:	9f 93       	push	r25
     3b6:	af 93       	push	r26
     3b8:	bf 93       	push	r27
     3ba:	ef 93       	push	r30
     3bc:	ff 93       	push	r31
TIMER2COMP();
     3be:	e0 91 66 00 	lds	r30, 0x0066
     3c2:	f0 91 67 00 	lds	r31, 0x0067
     3c6:	09 95       	icall
}
     3c8:	ff 91       	pop	r31
     3ca:	ef 91       	pop	r30
     3cc:	bf 91       	pop	r27
     3ce:	af 91       	pop	r26
     3d0:	9f 91       	pop	r25
     3d2:	8f 91       	pop	r24
     3d4:	7f 91       	pop	r23
     3d6:	6f 91       	pop	r22
     3d8:	5f 91       	pop	r21
     3da:	4f 91       	pop	r20
     3dc:	3f 91       	pop	r19
     3de:	2f 91       	pop	r18
     3e0:	0f 90       	pop	r0
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	0f 90       	pop	r0
     3e6:	1f 90       	pop	r1
     3e8:	18 95       	reti

000003ea <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     3ea:	1f 92       	push	r1
     3ec:	0f 92       	push	r0
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	0f 92       	push	r0
     3f2:	11 24       	eor	r1, r1
     3f4:	2f 93       	push	r18
     3f6:	3f 93       	push	r19
     3f8:	4f 93       	push	r20
     3fa:	5f 93       	push	r21
     3fc:	6f 93       	push	r22
     3fe:	7f 93       	push	r23
     400:	8f 93       	push	r24
     402:	9f 93       	push	r25
     404:	af 93       	push	r26
     406:	bf 93       	push	r27
     408:	ef 93       	push	r30
     40a:	ff 93       	push	r31
  TIMER2OVF();
     40c:	e0 91 64 00 	lds	r30, 0x0064
     410:	f0 91 65 00 	lds	r31, 0x0065
     414:	09 95       	icall
}
     416:	ff 91       	pop	r31
     418:	ef 91       	pop	r30
     41a:	bf 91       	pop	r27
     41c:	af 91       	pop	r26
     41e:	9f 91       	pop	r25
     420:	8f 91       	pop	r24
     422:	7f 91       	pop	r23
     424:	6f 91       	pop	r22
     426:	5f 91       	pop	r21
     428:	4f 91       	pop	r20
     42a:	3f 91       	pop	r19
     42c:	2f 91       	pop	r18
     42e:	0f 90       	pop	r0
     430:	0f be       	out	0x3f, r0	; 63
     432:	0f 90       	pop	r0
     434:	1f 90       	pop	r1
     436:	18 95       	reti

00000438 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     438:	1f 92       	push	r1
     43a:	0f 92       	push	r0
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	0f 92       	push	r0
     440:	11 24       	eor	r1, r1
     442:	2f 93       	push	r18
     444:	3f 93       	push	r19
     446:	4f 93       	push	r20
     448:	5f 93       	push	r21
     44a:	6f 93       	push	r22
     44c:	7f 93       	push	r23
     44e:	8f 93       	push	r24
     450:	9f 93       	push	r25
     452:	af 93       	push	r26
     454:	bf 93       	push	r27
     456:	ef 93       	push	r30
     458:	ff 93       	push	r31
  TIMER1CAPT();
     45a:	e0 91 8f 00 	lds	r30, 0x008F
     45e:	f0 91 90 00 	lds	r31, 0x0090
     462:	09 95       	icall
}
     464:	ff 91       	pop	r31
     466:	ef 91       	pop	r30
     468:	bf 91       	pop	r27
     46a:	af 91       	pop	r26
     46c:	9f 91       	pop	r25
     46e:	8f 91       	pop	r24
     470:	7f 91       	pop	r23
     472:	6f 91       	pop	r22
     474:	5f 91       	pop	r21
     476:	4f 91       	pop	r20
     478:	3f 91       	pop	r19
     47a:	2f 91       	pop	r18
     47c:	0f 90       	pop	r0
     47e:	0f be       	out	0x3f, r0	; 63
     480:	0f 90       	pop	r0
     482:	1f 90       	pop	r1
     484:	18 95       	reti

00000486 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     486:	1f 92       	push	r1
     488:	0f 92       	push	r0
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	0f 92       	push	r0
     48e:	11 24       	eor	r1, r1
     490:	2f 93       	push	r18
     492:	3f 93       	push	r19
     494:	4f 93       	push	r20
     496:	5f 93       	push	r21
     498:	6f 93       	push	r22
     49a:	7f 93       	push	r23
     49c:	8f 93       	push	r24
     49e:	9f 93       	push	r25
     4a0:	af 93       	push	r26
     4a2:	bf 93       	push	r27
     4a4:	ef 93       	push	r30
     4a6:	ff 93       	push	r31
TIMER1COMPA();
     4a8:	e0 91 7d 00 	lds	r30, 0x007D
     4ac:	f0 91 7e 00 	lds	r31, 0x007E
     4b0:	09 95       	icall
}
     4b2:	ff 91       	pop	r31
     4b4:	ef 91       	pop	r30
     4b6:	bf 91       	pop	r27
     4b8:	af 91       	pop	r26
     4ba:	9f 91       	pop	r25
     4bc:	8f 91       	pop	r24
     4be:	7f 91       	pop	r23
     4c0:	6f 91       	pop	r22
     4c2:	5f 91       	pop	r21
     4c4:	4f 91       	pop	r20
     4c6:	3f 91       	pop	r19
     4c8:	2f 91       	pop	r18
     4ca:	0f 90       	pop	r0
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	0f 90       	pop	r0
     4d0:	1f 90       	pop	r1
     4d2:	18 95       	reti

000004d4 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     4d4:	1f 92       	push	r1
     4d6:	0f 92       	push	r0
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	0f 92       	push	r0
     4dc:	11 24       	eor	r1, r1
     4de:	2f 93       	push	r18
     4e0:	3f 93       	push	r19
     4e2:	4f 93       	push	r20
     4e4:	5f 93       	push	r21
     4e6:	6f 93       	push	r22
     4e8:	7f 93       	push	r23
     4ea:	8f 93       	push	r24
     4ec:	9f 93       	push	r25
     4ee:	af 93       	push	r26
     4f0:	bf 93       	push	r27
     4f2:	ef 93       	push	r30
     4f4:	ff 93       	push	r31
  TIMER1COMPB();
     4f6:	e0 91 7b 00 	lds	r30, 0x007B
     4fa:	f0 91 7c 00 	lds	r31, 0x007C
     4fe:	09 95       	icall
}
     500:	ff 91       	pop	r31
     502:	ef 91       	pop	r30
     504:	bf 91       	pop	r27
     506:	af 91       	pop	r26
     508:	9f 91       	pop	r25
     50a:	8f 91       	pop	r24
     50c:	7f 91       	pop	r23
     50e:	6f 91       	pop	r22
     510:	5f 91       	pop	r21
     512:	4f 91       	pop	r20
     514:	3f 91       	pop	r19
     516:	2f 91       	pop	r18
     518:	0f 90       	pop	r0
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	0f 90       	pop	r0
     51e:	1f 90       	pop	r1
     520:	18 95       	reti

00000522 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     522:	1f 92       	push	r1
     524:	0f 92       	push	r0
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	0f 92       	push	r0
     52a:	11 24       	eor	r1, r1
     52c:	2f 93       	push	r18
     52e:	3f 93       	push	r19
     530:	4f 93       	push	r20
     532:	5f 93       	push	r21
     534:	6f 93       	push	r22
     536:	7f 93       	push	r23
     538:	8f 93       	push	r24
     53a:	9f 93       	push	r25
     53c:	af 93       	push	r26
     53e:	bf 93       	push	r27
     540:	ef 93       	push	r30
     542:	ff 93       	push	r31
  TIMER1OVF();
     544:	e0 91 91 00 	lds	r30, 0x0091
     548:	f0 91 92 00 	lds	r31, 0x0092
     54c:	09 95       	icall
}
     54e:	ff 91       	pop	r31
     550:	ef 91       	pop	r30
     552:	bf 91       	pop	r27
     554:	af 91       	pop	r26
     556:	9f 91       	pop	r25
     558:	8f 91       	pop	r24
     55a:	7f 91       	pop	r23
     55c:	6f 91       	pop	r22
     55e:	5f 91       	pop	r21
     560:	4f 91       	pop	r20
     562:	3f 91       	pop	r19
     564:	2f 91       	pop	r18
     566:	0f 90       	pop	r0
     568:	0f be       	out	0x3f, r0	; 63
     56a:	0f 90       	pop	r0
     56c:	1f 90       	pop	r1
     56e:	18 95       	reti

00000570 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     570:	1f 92       	push	r1
     572:	0f 92       	push	r0
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	0f 92       	push	r0
     578:	11 24       	eor	r1, r1
     57a:	2f 93       	push	r18
     57c:	3f 93       	push	r19
     57e:	4f 93       	push	r20
     580:	5f 93       	push	r21
     582:	6f 93       	push	r22
     584:	7f 93       	push	r23
     586:	8f 93       	push	r24
     588:	9f 93       	push	r25
     58a:	af 93       	push	r26
     58c:	bf 93       	push	r27
     58e:	ef 93       	push	r30
     590:	ff 93       	push	r31

  TIMER0COMP();
     592:	e0 91 62 00 	lds	r30, 0x0062
     596:	f0 91 63 00 	lds	r31, 0x0063
     59a:	09 95       	icall
}
     59c:	ff 91       	pop	r31
     59e:	ef 91       	pop	r30
     5a0:	bf 91       	pop	r27
     5a2:	af 91       	pop	r26
     5a4:	9f 91       	pop	r25
     5a6:	8f 91       	pop	r24
     5a8:	7f 91       	pop	r23
     5aa:	6f 91       	pop	r22
     5ac:	5f 91       	pop	r21
     5ae:	4f 91       	pop	r20
     5b0:	3f 91       	pop	r19
     5b2:	2f 91       	pop	r18
     5b4:	0f 90       	pop	r0
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	0f 90       	pop	r0
     5ba:	1f 90       	pop	r1
     5bc:	18 95       	reti

000005be <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     5be:	1f 92       	push	r1
     5c0:	0f 92       	push	r0
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	0f 92       	push	r0
     5c6:	11 24       	eor	r1, r1
     5c8:	2f 93       	push	r18
     5ca:	3f 93       	push	r19
     5cc:	4f 93       	push	r20
     5ce:	5f 93       	push	r21
     5d0:	6f 93       	push	r22
     5d2:	7f 93       	push	r23
     5d4:	8f 93       	push	r24
     5d6:	9f 93       	push	r25
     5d8:	af 93       	push	r26
     5da:	bf 93       	push	r27
     5dc:	ef 93       	push	r30
     5de:	ff 93       	push	r31

  TIMER0OVF_INT();
     5e0:	e0 91 60 00 	lds	r30, 0x0060
     5e4:	f0 91 61 00 	lds	r31, 0x0061
     5e8:	09 95       	icall
}
     5ea:	ff 91       	pop	r31
     5ec:	ef 91       	pop	r30
     5ee:	bf 91       	pop	r27
     5f0:	af 91       	pop	r26
     5f2:	9f 91       	pop	r25
     5f4:	8f 91       	pop	r24
     5f6:	7f 91       	pop	r23
     5f8:	6f 91       	pop	r22
     5fa:	5f 91       	pop	r21
     5fc:	4f 91       	pop	r20
     5fe:	3f 91       	pop	r19
     600:	2f 91       	pop	r18
     602:	0f 90       	pop	r0
     604:	0f be       	out	0x3f, r0	; 63
     606:	0f 90       	pop	r0
     608:	1f 90       	pop	r1
     60a:	18 95       	reti

0000060c <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     60c:	1f 92       	push	r1
     60e:	0f 92       	push	r0
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	0f 92       	push	r0
     614:	11 24       	eor	r1, r1
     616:	2f 93       	push	r18
     618:	3f 93       	push	r19
     61a:	4f 93       	push	r20
     61c:	5f 93       	push	r21
     61e:	6f 93       	push	r22
     620:	7f 93       	push	r23
     622:	8f 93       	push	r24
     624:	9f 93       	push	r25
     626:	af 93       	push	r26
     628:	bf 93       	push	r27
     62a:	ef 93       	push	r30
     62c:	ff 93       	push	r31
  SPI_STC();
     62e:	e0 91 7f 00 	lds	r30, 0x007F
     632:	f0 91 80 00 	lds	r31, 0x0080
     636:	09 95       	icall
}
     638:	ff 91       	pop	r31
     63a:	ef 91       	pop	r30
     63c:	bf 91       	pop	r27
     63e:	af 91       	pop	r26
     640:	9f 91       	pop	r25
     642:	8f 91       	pop	r24
     644:	7f 91       	pop	r23
     646:	6f 91       	pop	r22
     648:	5f 91       	pop	r21
     64a:	4f 91       	pop	r20
     64c:	3f 91       	pop	r19
     64e:	2f 91       	pop	r18
     650:	0f 90       	pop	r0
     652:	0f be       	out	0x3f, r0	; 63
     654:	0f 90       	pop	r0
     656:	1f 90       	pop	r1
     658:	18 95       	reti

0000065a <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     65a:	1f 92       	push	r1
     65c:	0f 92       	push	r0
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	0f 92       	push	r0
     662:	11 24       	eor	r1, r1
     664:	2f 93       	push	r18
     666:	3f 93       	push	r19
     668:	4f 93       	push	r20
     66a:	5f 93       	push	r21
     66c:	6f 93       	push	r22
     66e:	7f 93       	push	r23
     670:	8f 93       	push	r24
     672:	9f 93       	push	r25
     674:	af 93       	push	r26
     676:	bf 93       	push	r27
     678:	ef 93       	push	r30
     67a:	ff 93       	push	r31
  USART_RXC();
     67c:	e0 91 77 00 	lds	r30, 0x0077
     680:	f0 91 78 00 	lds	r31, 0x0078
     684:	09 95       	icall
}
     686:	ff 91       	pop	r31
     688:	ef 91       	pop	r30
     68a:	bf 91       	pop	r27
     68c:	af 91       	pop	r26
     68e:	9f 91       	pop	r25
     690:	8f 91       	pop	r24
     692:	7f 91       	pop	r23
     694:	6f 91       	pop	r22
     696:	5f 91       	pop	r21
     698:	4f 91       	pop	r20
     69a:	3f 91       	pop	r19
     69c:	2f 91       	pop	r18
     69e:	0f 90       	pop	r0
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	0f 90       	pop	r0
     6a4:	1f 90       	pop	r1
     6a6:	18 95       	reti

000006a8 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     6a8:	1f 92       	push	r1
     6aa:	0f 92       	push	r0
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	0f 92       	push	r0
     6b0:	11 24       	eor	r1, r1
     6b2:	2f 93       	push	r18
     6b4:	3f 93       	push	r19
     6b6:	4f 93       	push	r20
     6b8:	5f 93       	push	r21
     6ba:	6f 93       	push	r22
     6bc:	7f 93       	push	r23
     6be:	8f 93       	push	r24
     6c0:	9f 93       	push	r25
     6c2:	af 93       	push	r26
     6c4:	bf 93       	push	r27
     6c6:	ef 93       	push	r30
     6c8:	ff 93       	push	r31
  USART_UDRE();
     6ca:	e0 91 8b 00 	lds	r30, 0x008B
     6ce:	f0 91 8c 00 	lds	r31, 0x008C
     6d2:	09 95       	icall
}
     6d4:	ff 91       	pop	r31
     6d6:	ef 91       	pop	r30
     6d8:	bf 91       	pop	r27
     6da:	af 91       	pop	r26
     6dc:	9f 91       	pop	r25
     6de:	8f 91       	pop	r24
     6e0:	7f 91       	pop	r23
     6e2:	6f 91       	pop	r22
     6e4:	5f 91       	pop	r21
     6e6:	4f 91       	pop	r20
     6e8:	3f 91       	pop	r19
     6ea:	2f 91       	pop	r18
     6ec:	0f 90       	pop	r0
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	0f 90       	pop	r0
     6f2:	1f 90       	pop	r1
     6f4:	18 95       	reti

000006f6 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     6f6:	1f 92       	push	r1
     6f8:	0f 92       	push	r0
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	0f 92       	push	r0
     6fe:	11 24       	eor	r1, r1
     700:	2f 93       	push	r18
     702:	3f 93       	push	r19
     704:	4f 93       	push	r20
     706:	5f 93       	push	r21
     708:	6f 93       	push	r22
     70a:	7f 93       	push	r23
     70c:	8f 93       	push	r24
     70e:	9f 93       	push	r25
     710:	af 93       	push	r26
     712:	bf 93       	push	r27
     714:	ef 93       	push	r30
     716:	ff 93       	push	r31
  USART_TXC();
     718:	e0 91 89 00 	lds	r30, 0x0089
     71c:	f0 91 8a 00 	lds	r31, 0x008A
     720:	09 95       	icall
}
     722:	ff 91       	pop	r31
     724:	ef 91       	pop	r30
     726:	bf 91       	pop	r27
     728:	af 91       	pop	r26
     72a:	9f 91       	pop	r25
     72c:	8f 91       	pop	r24
     72e:	7f 91       	pop	r23
     730:	6f 91       	pop	r22
     732:	5f 91       	pop	r21
     734:	4f 91       	pop	r20
     736:	3f 91       	pop	r19
     738:	2f 91       	pop	r18
     73a:	0f 90       	pop	r0
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	0f 90       	pop	r0
     740:	1f 90       	pop	r1
     742:	18 95       	reti

00000744 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     744:	1f 92       	push	r1
     746:	0f 92       	push	r0
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	0f 92       	push	r0
     74c:	11 24       	eor	r1, r1
     74e:	2f 93       	push	r18
     750:	3f 93       	push	r19
     752:	4f 93       	push	r20
     754:	5f 93       	push	r21
     756:	6f 93       	push	r22
     758:	7f 93       	push	r23
     75a:	8f 93       	push	r24
     75c:	9f 93       	push	r25
     75e:	af 93       	push	r26
     760:	bf 93       	push	r27
     762:	ef 93       	push	r30
     764:	ff 93       	push	r31
  ADC_INT();
     766:	e0 91 83 00 	lds	r30, 0x0083
     76a:	f0 91 84 00 	lds	r31, 0x0084
     76e:	09 95       	icall
}
     770:	ff 91       	pop	r31
     772:	ef 91       	pop	r30
     774:	bf 91       	pop	r27
     776:	af 91       	pop	r26
     778:	9f 91       	pop	r25
     77a:	8f 91       	pop	r24
     77c:	7f 91       	pop	r23
     77e:	6f 91       	pop	r22
     780:	5f 91       	pop	r21
     782:	4f 91       	pop	r20
     784:	3f 91       	pop	r19
     786:	2f 91       	pop	r18
     788:	0f 90       	pop	r0
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	0f 90       	pop	r0
     78e:	1f 90       	pop	r1
     790:	18 95       	reti

00000792 <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     792:	1f 92       	push	r1
     794:	0f 92       	push	r0
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	0f 92       	push	r0
     79a:	11 24       	eor	r1, r1
     79c:	2f 93       	push	r18
     79e:	3f 93       	push	r19
     7a0:	4f 93       	push	r20
     7a2:	5f 93       	push	r21
     7a4:	6f 93       	push	r22
     7a6:	7f 93       	push	r23
     7a8:	8f 93       	push	r24
     7aa:	9f 93       	push	r25
     7ac:	af 93       	push	r26
     7ae:	bf 93       	push	r27
     7b0:	ef 93       	push	r30
     7b2:	ff 93       	push	r31
  EE_RDY();
     7b4:	e0 91 85 00 	lds	r30, 0x0085
     7b8:	f0 91 86 00 	lds	r31, 0x0086
     7bc:	09 95       	icall
}
     7be:	ff 91       	pop	r31
     7c0:	ef 91       	pop	r30
     7c2:	bf 91       	pop	r27
     7c4:	af 91       	pop	r26
     7c6:	9f 91       	pop	r25
     7c8:	8f 91       	pop	r24
     7ca:	7f 91       	pop	r23
     7cc:	6f 91       	pop	r22
     7ce:	5f 91       	pop	r21
     7d0:	4f 91       	pop	r20
     7d2:	3f 91       	pop	r19
     7d4:	2f 91       	pop	r18
     7d6:	0f 90       	pop	r0
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	0f 90       	pop	r0
     7dc:	1f 90       	pop	r1
     7de:	18 95       	reti

000007e0 <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     7e0:	1f 92       	push	r1
     7e2:	0f 92       	push	r0
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	0f 92       	push	r0
     7e8:	11 24       	eor	r1, r1
     7ea:	2f 93       	push	r18
     7ec:	3f 93       	push	r19
     7ee:	4f 93       	push	r20
     7f0:	5f 93       	push	r21
     7f2:	6f 93       	push	r22
     7f4:	7f 93       	push	r23
     7f6:	8f 93       	push	r24
     7f8:	9f 93       	push	r25
     7fa:	af 93       	push	r26
     7fc:	bf 93       	push	r27
     7fe:	ef 93       	push	r30
     800:	ff 93       	push	r31
  ANA_COMP();
     802:	e0 91 81 00 	lds	r30, 0x0081
     806:	f0 91 82 00 	lds	r31, 0x0082
     80a:	09 95       	icall
}
     80c:	ff 91       	pop	r31
     80e:	ef 91       	pop	r30
     810:	bf 91       	pop	r27
     812:	af 91       	pop	r26
     814:	9f 91       	pop	r25
     816:	8f 91       	pop	r24
     818:	7f 91       	pop	r23
     81a:	6f 91       	pop	r22
     81c:	5f 91       	pop	r21
     81e:	4f 91       	pop	r20
     820:	3f 91       	pop	r19
     822:	2f 91       	pop	r18
     824:	0f 90       	pop	r0
     826:	0f be       	out	0x3f, r0	; 63
     828:	0f 90       	pop	r0
     82a:	1f 90       	pop	r1
     82c:	18 95       	reti

0000082e <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     82e:	1f 92       	push	r1
     830:	0f 92       	push	r0
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	0f 92       	push	r0
     836:	11 24       	eor	r1, r1
     838:	2f 93       	push	r18
     83a:	3f 93       	push	r19
     83c:	4f 93       	push	r20
     83e:	5f 93       	push	r21
     840:	6f 93       	push	r22
     842:	7f 93       	push	r23
     844:	8f 93       	push	r24
     846:	9f 93       	push	r25
     848:	af 93       	push	r26
     84a:	bf 93       	push	r27
     84c:	ef 93       	push	r30
     84e:	ff 93       	push	r31
  TWI_I2C();
     850:	e0 91 75 00 	lds	r30, 0x0075
     854:	f0 91 76 00 	lds	r31, 0x0076
     858:	09 95       	icall
}
     85a:	ff 91       	pop	r31
     85c:	ef 91       	pop	r30
     85e:	bf 91       	pop	r27
     860:	af 91       	pop	r26
     862:	9f 91       	pop	r25
     864:	8f 91       	pop	r24
     866:	7f 91       	pop	r23
     868:	6f 91       	pop	r22
     86a:	5f 91       	pop	r21
     86c:	4f 91       	pop	r20
     86e:	3f 91       	pop	r19
     870:	2f 91       	pop	r18
     872:	0f 90       	pop	r0
     874:	0f be       	out	0x3f, r0	; 63
     876:	0f 90       	pop	r0
     878:	1f 90       	pop	r1
     87a:	18 95       	reti

0000087c <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     87c:	1f 92       	push	r1
     87e:	0f 92       	push	r0
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	0f 92       	push	r0
     884:	11 24       	eor	r1, r1
     886:	2f 93       	push	r18
     888:	3f 93       	push	r19
     88a:	4f 93       	push	r20
     88c:	5f 93       	push	r21
     88e:	6f 93       	push	r22
     890:	7f 93       	push	r23
     892:	8f 93       	push	r24
     894:	9f 93       	push	r25
     896:	af 93       	push	r26
     898:	bf 93       	push	r27
     89a:	ef 93       	push	r30
     89c:	ff 93       	push	r31
  SPM_RDY();
     89e:	e0 91 79 00 	lds	r30, 0x0079
     8a2:	f0 91 7a 00 	lds	r31, 0x007A
     8a6:	09 95       	icall
}
     8a8:	ff 91       	pop	r31
     8aa:	ef 91       	pop	r30
     8ac:	bf 91       	pop	r27
     8ae:	af 91       	pop	r26
     8b0:	9f 91       	pop	r25
     8b2:	8f 91       	pop	r24
     8b4:	7f 91       	pop	r23
     8b6:	6f 91       	pop	r22
     8b8:	5f 91       	pop	r21
     8ba:	4f 91       	pop	r20
     8bc:	3f 91       	pop	r19
     8be:	2f 91       	pop	r18
     8c0:	0f 90       	pop	r0
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	0f 90       	pop	r0
     8c6:	1f 90       	pop	r1
     8c8:	18 95       	reti

000008ca <Led_Init>:
	LED_3

*/
void Led_Init(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     8ca:	81 30       	cpi	r24, 0x01	; 1
     8cc:	69 f0       	breq	.+26     	; 0x8e8 <Led_Init+0x1e>
     8ce:	81 30       	cpi	r24, 0x01	; 1
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <Led_Init+0x12>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	79 f0       	breq	.+30     	; 0x8f4 <Led_Init+0x2a>
     8d6:	83 30       	cpi	r24, 0x03	; 3
     8d8:	c1 f4       	brne	.+48     	; 0x90a <Led_Init+0x40>
     8da:	12 c0       	rjmp	.+36     	; 0x900 <Led_Init+0x36>
{
case LED_0:
gpioPinDirection(LED_0_GPIO,LED_0_BIT,HIGH);
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	60 e1       	ldi	r22, 0x10	; 16
     8e0:	4f ef       	ldi	r20, 0xFF	; 255
     8e2:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
break;
     8e6:	08 95       	ret

case LED_1:
gpioPinDirection(LED_1_GPIO,LED_1_BIT,HIGH);
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	60 e2       	ldi	r22, 0x20	; 32
     8ec:	4f ef       	ldi	r20, 0xFF	; 255
     8ee:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
break;
     8f2:	08 95       	ret

case LED_2:
gpioPinDirection(LED_2_GPIO,LED_2_BIT,HIGH);
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	60 e4       	ldi	r22, 0x40	; 64
     8f8:	4f ef       	ldi	r20, 0xFF	; 255
     8fa:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
break;
     8fe:	08 95       	ret

case LED_3:
gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	60 e8       	ldi	r22, 0x80	; 128
     904:	4f ef       	ldi	r20, 0xFF	; 255
     906:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
     90a:	08 95       	ret

0000090c <Led_On>:
}


void Led_On(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     90c:	81 30       	cpi	r24, 0x01	; 1
     90e:	69 f0       	breq	.+26     	; 0x92a <Led_On+0x1e>
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	28 f0       	brcs	.+10     	; 0x91e <Led_On+0x12>
     914:	82 30       	cpi	r24, 0x02	; 2
     916:	79 f0       	breq	.+30     	; 0x936 <Led_On+0x2a>
     918:	83 30       	cpi	r24, 0x03	; 3
     91a:	c1 f4       	brne	.+48     	; 0x94c <Led_On+0x40>
     91c:	12 c0       	rjmp	.+36     	; 0x942 <Led_On+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,HIGH);
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	60 e1       	ldi	r22, 0x10	; 16
     922:	4f ef       	ldi	r20, 0xFF	; 255
     924:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
     928:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,HIGH);
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	60 e2       	ldi	r22, 0x20	; 32
     92e:	4f ef       	ldi	r20, 0xFF	; 255
     930:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
     934:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,HIGH);
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	60 e4       	ldi	r22, 0x40	; 64
     93a:	4f ef       	ldi	r20, 0xFF	; 255
     93c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
     940:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,HIGH);
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	60 e8       	ldi	r22, 0x80	; 128
     946:	4f ef       	ldi	r20, 0xFF	; 255
     948:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
     94c:	08 95       	ret

0000094e <Led_Off>:
}

void Led_Off(En_LedNumber_t en_led_id)
{

switch(en_led_id)
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	69 f0       	breq	.+26     	; 0x96c <Led_Off+0x1e>
     952:	81 30       	cpi	r24, 0x01	; 1
     954:	28 f0       	brcs	.+10     	; 0x960 <Led_Off+0x12>
     956:	82 30       	cpi	r24, 0x02	; 2
     958:	79 f0       	breq	.+30     	; 0x978 <Led_Off+0x2a>
     95a:	83 30       	cpi	r24, 0x03	; 3
     95c:	c1 f4       	brne	.+48     	; 0x98e <Led_Off+0x40>
     95e:	12 c0       	rjmp	.+36     	; 0x984 <Led_Off+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,LOW);
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	60 e1       	ldi	r22, 0x10	; 16
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
     96a:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,LOW);
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	60 e2       	ldi	r22, 0x20	; 32
     970:	40 e0       	ldi	r20, 0x00	; 0
     972:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
     976:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,LOW);
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	60 e4       	ldi	r22, 0x40	; 64
     97c:	40 e0       	ldi	r20, 0x00	; 0
     97e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
     982:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,LOW);
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	60 e8       	ldi	r22, 0x80	; 128
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
     98e:	08 95       	ret

00000990 <Led_Toggle>:


}
void Led_Toggle(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     990:	81 30       	cpi	r24, 0x01	; 1
     992:	61 f0       	breq	.+24     	; 0x9ac <Led_Toggle+0x1c>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	28 f0       	brcs	.+10     	; 0x9a2 <Led_Toggle+0x12>
     998:	82 30       	cpi	r24, 0x02	; 2
     99a:	69 f0       	breq	.+26     	; 0x9b6 <Led_Toggle+0x26>
     99c:	83 30       	cpi	r24, 0x03	; 3
     99e:	a1 f4       	brne	.+40     	; 0x9c8 <Led_Toggle+0x38>
     9a0:	0f c0       	rjmp	.+30     	; 0x9c0 <Led_Toggle+0x30>
{
case LED_0:
gpioPinToggle(LED_0_GPIO,LED_0_BIT);
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	60 e1       	ldi	r22, 0x10	; 16
     9a6:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
break;
     9aa:	08 95       	ret

case LED_1:
gpioPinToggle(LED_1_GPIO,LED_1_BIT);
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	60 e2       	ldi	r22, 0x20	; 32
     9b0:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
break;
     9b4:	08 95       	ret

case LED_2:
gpioPinToggle(LED_2_GPIO,LED_2_BIT);
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	60 e4       	ldi	r22, 0x40	; 64
     9ba:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
break;
     9be:	08 95       	ret

case LED_3:
gpioPinToggle(LED_3_GPIO,LED_3_BIT);
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	60 e8       	ldi	r22, 0x80	; 128
     9c4:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
     9c8:	08 95       	ret

000009ca <pushButtonInit>:
*/
extern uint8_t volatile status_Flag;
void pushButtonInit(En_buttonId_t en_butotn_id)
{

switch(en_butotn_id)
     9ca:	81 30       	cpi	r24, 0x01	; 1
     9cc:	69 f0       	breq	.+26     	; 0x9e8 <pushButtonInit+0x1e>
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	28 f0       	brcs	.+10     	; 0x9dc <pushButtonInit+0x12>
     9d2:	82 30       	cpi	r24, 0x02	; 2
     9d4:	79 f0       	breq	.+30     	; 0x9f4 <pushButtonInit+0x2a>
     9d6:	83 30       	cpi	r24, 0x03	; 3
     9d8:	c1 f4       	brne	.+48     	; 0xa0a <pushButtonInit+0x40>
     9da:	12 c0       	rjmp	.+36     	; 0xa00 <pushButtonInit+0x36>
{
case BTN_0:
{
gpioPinDirection(BTN_0_GPIO,BTN_0_BIT,LOW);
     9dc:	82 e0       	ldi	r24, 0x02	; 2
     9de:	60 e1       	ldi	r22, 0x10	; 16
     9e0:	40 e0       	ldi	r20, 0x00	; 0
     9e2:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>

break;
     9e6:	08 95       	ret
}
case BTN_1:
{
gpioPinDirection(BTN_1_GPIO,BTN_1_BIT,LOW);
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	64 e0       	ldi	r22, 0x04	; 4
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>

break;
     9f2:	08 95       	ret
}
case BTN_2:
{
gpioPinDirection(BTN_2_GPIO,BTN_2_BIT,LOW);
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	64 e0       	ldi	r22, 0x04	; 4
     9f8:	40 e0       	ldi	r20, 0x00	; 0
     9fa:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>

break;
     9fe:	08 95       	ret
}
case BTN_3:
{
gpioPinDirection(BTN_3_GPIO,BTN_3_BIT,LOW);
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	68 e0       	ldi	r22, 0x08	; 8
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
     a0a:	08 95       	ret

00000a0c <pushButtonGetStatus>:
}

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{

switch(en_butotn_id)
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	e9 f0       	breq	.+58     	; 0xa4a <pushButtonGetStatus+0x3e>
     a10:	81 30       	cpi	r24, 0x01	; 1
     a12:	30 f0       	brcs	.+12     	; 0xa20 <pushButtonGetStatus+0x14>
     a14:	82 30       	cpi	r24, 0x02	; 2
     a16:	61 f1       	breq	.+88     	; 0xa70 <pushButtonGetStatus+0x64>
     a18:	83 30       	cpi	r24, 0x03	; 3
     a1a:	09 f0       	breq	.+2      	; 0xa1e <pushButtonGetStatus+0x12>
     a1c:	4f c0       	rjmp	.+158    	; 0xabc <pushButtonGetStatus+0xb0>
     a1e:	3b c0       	rjmp	.+118    	; 0xa96 <pushButtonGetStatus+0x8a>
{
case BTN_0:
{
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	60 e1       	ldi	r22, 0x10	; 16
     a24:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
     a28:	81 30       	cpi	r24, 0x01	; 1
     a2a:	09 f0       	breq	.+2      	; 0xa2e <pushButtonGetStatus+0x22>
     a2c:	48 c0       	rjmp	.+144    	; 0xabe <pushButtonGetStatus+0xb2>
{ timer0DelayMs(50);
     a2e:	82 e3       	ldi	r24, 0x32	; 50
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 44 08 	call	0x1088	; 0x1088 <timer0DelayMs>
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
     a36:	82 e0       	ldi	r24, 0x02	; 2
     a38:	60 e1       	ldi	r22, 0x10	; 16
     a3a:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
	return Pressed;
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	81 30       	cpi	r24, 0x01	; 1
     a42:	09 f4       	brne	.+2      	; 0xa46 <pushButtonGetStatus+0x3a>
     a44:	43 c0       	rjmp	.+134    	; 0xacc <pushButtonGetStatus+0xc0>
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	41 c0       	rjmp	.+130    	; 0xacc <pushButtonGetStatus+0xc0>
}else{return Released;}
break;
}
case BTN_1:
{
if(gpioPinRead(BTN_1_GPIO,BTN_1_BIT) == Pressed)
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	64 e0       	ldi	r22, 0x04	; 4
     a4e:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
     a52:	81 30       	cpi	r24, 0x01	; 1
     a54:	b1 f5       	brne	.+108    	; 0xac2 <pushButtonGetStatus+0xb6>
{
timer0DelayMs(50);
     a56:	82 e3       	ldi	r24, 0x32	; 50
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 44 08 	call	0x1088	; 0x1088 <timer0DelayMs>
if(gpioPinRead(BTN_1_GPIO,BTN_1_BIT) == Pressed)
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	64 e0       	ldi	r22, 0x04	; 4
     a62:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
case BTN_0:
{
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
{ timer0DelayMs(50);
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
	return Pressed;
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	81 30       	cpi	r24, 0x01	; 1
     a6a:	81 f1       	breq	.+96     	; 0xacc <pushButtonGetStatus+0xc0>
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	2e c0       	rjmp	.+92     	; 0xacc <pushButtonGetStatus+0xc0>
}else{return Released;}
break;
}
case BTN_2:
{
if(gpioPinRead(BTN_2_GPIO,BTN_2_BIT) == Pressed)
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	64 e0       	ldi	r22, 0x04	; 4
     a74:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
     a78:	81 30       	cpi	r24, 0x01	; 1
     a7a:	29 f5       	brne	.+74     	; 0xac6 <pushButtonGetStatus+0xba>
{
	timer0DelayMs(50);
     a7c:	82 e3       	ldi	r24, 0x32	; 50
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 44 08 	call	0x1088	; 0x1088 <timer0DelayMs>
	if(gpioPinRead(BTN_2_GPIO,BTN_2_BIT) == Pressed)
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	64 e0       	ldi	r22, 0x04	; 4
     a88:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
case BTN_0:
{
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
{ timer0DelayMs(50);
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
	return Pressed;
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	81 30       	cpi	r24, 0x01	; 1
     a90:	e9 f0       	breq	.+58     	; 0xacc <pushButtonGetStatus+0xc0>
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	1b c0       	rjmp	.+54     	; 0xacc <pushButtonGetStatus+0xc0>
}else{return Released;}
break;
}
case BTN_3:
{
if(gpioPinRead(BTN_3_GPIO,BTN_3_BIT) == Pressed)
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	68 e0       	ldi	r22, 0x08	; 8
     a9a:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
     a9e:	81 30       	cpi	r24, 0x01	; 1
     aa0:	a1 f4       	brne	.+40     	; 0xaca <pushButtonGetStatus+0xbe>
{
	timer0DelayMs(50);
     aa2:	82 e3       	ldi	r24, 0x32	; 50
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	0e 94 44 08 	call	0x1088	; 0x1088 <timer0DelayMs>
	if(gpioPinRead(BTN_3_GPIO,BTN_3_BIT) == Pressed)
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	68 e0       	ldi	r22, 0x08	; 8
     aae:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
case BTN_0:
{
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
{ timer0DelayMs(50);
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
	return Pressed;
     ab2:	91 e0       	ldi	r25, 0x01	; 1
     ab4:	81 30       	cpi	r24, 0x01	; 1
     ab6:	51 f0       	breq	.+20     	; 0xacc <pushButtonGetStatus+0xc0>
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	08 c0       	rjmp	.+16     	; 0xacc <pushButtonGetStatus+0xc0>
     abc:	08 95       	ret
	else {return Released;}
}else{return Released;}
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	05 c0       	rjmp	.+10     	; 0xacc <pushButtonGetStatus+0xc0>
{
timer0DelayMs(50);
if(gpioPinRead(BTN_1_GPIO,BTN_1_BIT) == Pressed)
return Pressed;
	else {return Released;}
}else{return Released;}
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	03 c0       	rjmp	.+6      	; 0xacc <pushButtonGetStatus+0xc0>
{
	timer0DelayMs(50);
	if(gpioPinRead(BTN_2_GPIO,BTN_2_BIT) == Pressed)
	return Pressed;
else {return Released;}
}else{return Released;}
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	01 c0       	rjmp	.+2      	; 0xacc <pushButtonGetStatus+0xc0>
{
	timer0DelayMs(50);
	if(gpioPinRead(BTN_3_GPIO,BTN_3_BIT) == Pressed)
	return Pressed;
else {return Released;}
}else{return Released;}
     aca:	90 e0       	ldi	r25, 0x00	; 0
break;
}

}
}
     acc:	89 2f       	mov	r24, r25
     ace:	08 95       	ret

00000ad0 <check_button>:
		SwICU_Stop();
		MCUCSR ^= (1<<6);
	}
count++;
}
}
     ad0:	08 95       	ret

00000ad2 <main>:
#include "led.h"
#include "ledConfig.h"
uint8_t tcnt0_value=0;
int main(void)
{
	Led_Init(LED_0);
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	0e 94 65 04 	call	0x8ca	; 0x8ca <Led_Init>
	Led_Init(LED_1);
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	0e 94 65 04 	call	0x8ca	; 0x8ca <Led_Init>
	Led_Init(LED_2);
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	0e 94 65 04 	call	0x8ca	; 0x8ca <Led_Init>
	Led_Init(LED_3);
     ae4:	83 e0       	ldi	r24, 0x03	; 3
     ae6:	0e 94 65 04 	call	0x8ca	; 0x8ca <Led_Init>
	timer2Init(T2_NORMAL_MODE,T2_OC2_DIS,T2_PRESCALER_NO,10,0,0,T2_POLLING);
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	41 e0       	ldi	r20, 0x01	; 1
     af0:	2a e0       	ldi	r18, 0x0A	; 10
     af2:	00 e0       	ldi	r16, 0x00	; 0
     af4:	ee 24       	eor	r14, r14
     af6:	cc 24       	eor	r12, r12
     af8:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <timer2Init>
	gpioPortDirection(GPIOC,HIGH);
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	6f ef       	ldi	r22, 0xFF	; 255
     b00:	0e 94 49 00 	call	0x92	; 0x92 <gpioPortDirection>
	SwICU_Init(SwICU_EdgeRisiging);
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	0e 94 ae 05 	call	0xb5c	; 0xb5c <SwICU_Init>
		timer2Start();
		timer2DelayUs(10);
		CLEAR_BIT(PORTC_DATA,1);
		timer2Start();
		timer2DelayUs(1);
		SwICU_Read(&tcnt0_value);
     b0a:	cc e6       	ldi	r28, 0x6C	; 108
     b0c:	d0 e0       	ldi	r29, 0x00	; 0
	timer2Init(T2_NORMAL_MODE,T2_OC2_DIS,T2_PRESCALER_NO,10,0,0,T2_POLLING);
	gpioPortDirection(GPIOC,HIGH);
	SwICU_Init(SwICU_EdgeRisiging);
		while(1)
  	{
		tcnt0_value=timer0Read();
     b0e:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <timer0Read>
     b12:	80 93 6c 00 	sts	0x006C, r24
		SET_BIT(PORTC_DATA,1);
     b16:	a9 9a       	sbi	0x15, 1	; 21
		timer2Start();
     b18:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
		timer2DelayUs(10);
     b1c:	6a e0       	ldi	r22, 0x0A	; 10
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 23 0a 	call	0x1446	; 0x1446 <timer2DelayUs>
		CLEAR_BIT(PORTC_DATA,1);
     b28:	a9 98       	cbi	0x15, 1	; 21
		timer2Start();
     b2a:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
		timer2DelayUs(1);
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 23 0a 	call	0x1446	; 0x1446 <timer2DelayUs>
		SwICU_Read(&tcnt0_value);
     b3a:	ce 01       	movw	r24, r28
     b3c:	0e 94 c3 05 	call	0xb86	; 0xb86 <SwICU_Read>
     b40:	e6 cf       	rjmp	.-52     	; 0xb0e <main+0x3c>

00000b42 <SwICU_SetCfgEdge>:

}

void SwICU_SetCfgEdge(EN_SwICU_Edge_t a_en_inputCaptureEdgeedge)
{
	switch (a_en_inputCaptureEdgeedge) {
     b42:	88 23       	and	r24, r24
     b44:	19 f0       	breq	.+6      	; 0xb4c <SwICU_SetCfgEdge+0xa>
     b46:	81 30       	cpi	r24, 0x01	; 1
     b48:	41 f4       	brne	.+16     	; 0xb5a <SwICU_SetCfgEdge+0x18>
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <SwICU_SetCfgEdge+0x12>
		case SwICU_EdgeFalling :
	{
		CLEAR_BIT(MCUCSR,6);
     b4c:	84 b7       	in	r24, 0x34	; 52
     b4e:	8f 7b       	andi	r24, 0xBF	; 191
     b50:	84 bf       	out	0x34, r24	; 52
		break;
     b52:	08 95       	ret
	}
	case SwICU_EdgeRisiging:
	{
	SET_BIT(MCUCSR,6);
     b54:	84 b7       	in	r24, 0x34	; 52
     b56:	80 64       	ori	r24, 0x40	; 64
     b58:	84 bf       	out	0x34, r24	; 52
     b5a:	08 95       	ret

00000b5c <SwICU_Init>:
#include "timers.h"
#include "registers.h"
#define RESOLUTION 256

void SwICU_Init(EN_SwICU_Edge_t a_en_inputCaptureEdge)
{
     b5c:	ef 92       	push	r14
     b5e:	0f 93       	push	r16
/*Make External interrup work first via Any logical change*/
timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_NO,0,0,T0_INTERRUPT_NORMAL);
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	00 e0       	ldi	r16, 0x00	; 0
     b6a:	ee 24       	eor	r14, r14
     b6c:	e3 94       	inc	r14
     b6e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <timer0Init>
G_interrupt_Enable();
     b72:	0e 94 45 01 	call	0x28a	; 0x28a <G_interrupt_Enable>
EX_interrupt_enable2();
     b76:	0e 94 49 01 	call	0x292	; 0x292 <EX_interrupt_enable2>
/*change the interrupt activation status*/
SwICU_SetCfgEdge(SwICU_EdgeRisiging);
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	0e 94 a1 05 	call	0xb42	; 0xb42 <SwICU_SetCfgEdge>

}
     b80:	0f 91       	pop	r16
     b82:	ef 90       	pop	r14
     b84:	08 95       	ret

00000b86 <SwICU_Read>:

	}

}
void SwICU_Read(volatile uint8_t * a_pu8_capt)
{//64 prescaler
     b86:	4f 92       	push	r4
     b88:	5f 92       	push	r5
     b8a:	6f 92       	push	r6
     b8c:	7f 92       	push	r7
     b8e:	8f 92       	push	r8
     b90:	9f 92       	push	r9
     b92:	af 92       	push	r10
     b94:	bf 92       	push	r11
     b96:	cf 92       	push	r12
     b98:	df 92       	push	r13
     b9a:	ef 92       	push	r14
     b9c:	ff 92       	push	r15
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
uint64_t num_of_tics=0;
uint16_t num_of_cm=0;
//num_of_cm=(68 * (*a_pu8_capt)/1000);
num_of_tics=((* a_pu8_capt)+(u8_ovf_counter * RESOLUTION))/(58*16);
     ba6:	fc 01       	movw	r30, r24
     ba8:	20 81       	ld	r18, Z
     baa:	30 91 6d 00 	lds	r19, 0x006D
     bae:	93 2f       	mov	r25, r19
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	82 0f       	add	r24, r18
     bb4:	91 1d       	adc	r25, r1
     bb6:	60 ea       	ldi	r22, 0xA0	; 160
     bb8:	73 e0       	ldi	r23, 0x03	; 3
     bba:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__divmodhi4>
     bbe:	56 2e       	mov	r5, r22
     bc0:	47 2e       	mov	r4, r23
     bc2:	c7 2f       	mov	r28, r23
     bc4:	cc 0f       	add	r28, r28
     bc6:	cc 0b       	sbc	r28, r28
     bc8:	dc 2f       	mov	r29, r28
     bca:	9c 2e       	mov	r9, r28
     bcc:	8c 2e       	mov	r8, r28
     bce:	7c 2e       	mov	r7, r28
     bd0:	6c 2e       	mov	r6, r28
}else if (num_of_cm==0)
{PORTB_DATA=0;
}
else if(num_of_cm >15 && num_of_cm <100){PORTB_DATA=255;}
*/
switch (num_of_tics) {
     bd2:	f7 e0       	ldi	r31, 0x07	; 7
     bd4:	6f 17       	cp	r22, r31
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <SwICU_Read+0x70>
     bd8:	77 23       	and	r23, r23
     bda:	69 f4       	brne	.+26     	; 0xbf6 <SwICU_Read+0x70>
     bdc:	cc 23       	and	r28, r28
     bde:	59 f4       	brne	.+22     	; 0xbf6 <SwICU_Read+0x70>
     be0:	cc 23       	and	r28, r28
     be2:	49 f4       	brne	.+18     	; 0xbf6 <SwICU_Read+0x70>
     be4:	cc 23       	and	r28, r28
     be6:	39 f4       	brne	.+14     	; 0xbf6 <SwICU_Read+0x70>
     be8:	cc 23       	and	r28, r28
     bea:	29 f4       	brne	.+10     	; 0xbf6 <SwICU_Read+0x70>
     bec:	cc 23       	and	r28, r28
     bee:	19 f4       	brne	.+6      	; 0xbf6 <SwICU_Read+0x70>
     bf0:	cc 23       	and	r28, r28
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <SwICU_Read+0x70>
     bf4:	7d c1       	rjmp	.+762    	; 0xef0 <SwICU_Read+0x36a>
     bf6:	25 2d       	mov	r18, r5
     bf8:	34 2d       	mov	r19, r4
     bfa:	4c 2f       	mov	r20, r28
     bfc:	5c 2f       	mov	r21, r28
     bfe:	6c 2f       	mov	r22, r28
     c00:	7c 2f       	mov	r23, r28
     c02:	8c 2f       	mov	r24, r28
     c04:	9c 2f       	mov	r25, r28
     c06:	0f 2e       	mov	r0, r31
     c08:	f7 e0       	ldi	r31, 0x07	; 7
     c0a:	af 2e       	mov	r10, r31
     c0c:	f0 2d       	mov	r31, r0
     c0e:	bb 24       	eor	r11, r11
     c10:	cc 24       	eor	r12, r12
     c12:	dd 24       	eor	r13, r13
     c14:	ee 24       	eor	r14, r14
     c16:	ff 24       	eor	r15, r15
     c18:	00 e0       	ldi	r16, 0x00	; 0
     c1a:	10 e0       	ldi	r17, 0x00	; 0
     c1c:	0e 94 b6 0a 	call	0x156c	; 0x156c <__ucmpdi2>
     c20:	82 30       	cpi	r24, 0x02	; 2
     c22:	08 f0       	brcs	.+2      	; 0xc26 <SwICU_Read+0xa0>
     c24:	7d c0       	rjmp	.+250    	; 0xd20 <SwICU_Read+0x19a>
     c26:	83 e0       	ldi	r24, 0x03	; 3
     c28:	58 16       	cp	r5, r24
     c2a:	79 f4       	brne	.+30     	; 0xc4a <SwICU_Read+0xc4>
     c2c:	44 20       	and	r4, r4
     c2e:	69 f4       	brne	.+26     	; 0xc4a <SwICU_Read+0xc4>
     c30:	cc 23       	and	r28, r28
     c32:	59 f4       	brne	.+22     	; 0xc4a <SwICU_Read+0xc4>
     c34:	dd 23       	and	r29, r29
     c36:	49 f4       	brne	.+18     	; 0xc4a <SwICU_Read+0xc4>
     c38:	99 20       	and	r9, r9
     c3a:	39 f4       	brne	.+14     	; 0xc4a <SwICU_Read+0xc4>
     c3c:	88 20       	and	r8, r8
     c3e:	29 f4       	brne	.+10     	; 0xc4a <SwICU_Read+0xc4>
     c40:	77 20       	and	r7, r7
     c42:	19 f4       	brne	.+6      	; 0xc4a <SwICU_Read+0xc4>
     c44:	66 20       	and	r6, r6
     c46:	09 f4       	brne	.+2      	; 0xc4a <SwICU_Read+0xc4>
     c48:	2f c1       	rjmp	.+606    	; 0xea8 <SwICU_Read+0x322>
     c4a:	25 2d       	mov	r18, r5
     c4c:	34 2d       	mov	r19, r4
     c4e:	4c 2f       	mov	r20, r28
     c50:	5c 2f       	mov	r21, r28
     c52:	6c 2f       	mov	r22, r28
     c54:	7c 2f       	mov	r23, r28
     c56:	8c 2f       	mov	r24, r28
     c58:	9c 2f       	mov	r25, r28
     c5a:	0f 2e       	mov	r0, r31
     c5c:	f3 e0       	ldi	r31, 0x03	; 3
     c5e:	af 2e       	mov	r10, r31
     c60:	f0 2d       	mov	r31, r0
     c62:	bb 24       	eor	r11, r11
     c64:	cc 24       	eor	r12, r12
     c66:	dd 24       	eor	r13, r13
     c68:	ee 24       	eor	r14, r14
     c6a:	ff 24       	eor	r15, r15
     c6c:	00 e0       	ldi	r16, 0x00	; 0
     c6e:	10 e0       	ldi	r17, 0x00	; 0
     c70:	0e 94 b6 0a 	call	0x156c	; 0x156c <__ucmpdi2>
     c74:	82 30       	cpi	r24, 0x02	; 2
     c76:	48 f5       	brcc	.+82     	; 0xcca <SwICU_Read+0x144>
     c78:	e1 e0       	ldi	r30, 0x01	; 1
     c7a:	5e 16       	cp	r5, r30
     c7c:	79 f4       	brne	.+30     	; 0xc9c <SwICU_Read+0x116>
     c7e:	44 20       	and	r4, r4
     c80:	69 f4       	brne	.+26     	; 0xc9c <SwICU_Read+0x116>
     c82:	cc 23       	and	r28, r28
     c84:	59 f4       	brne	.+22     	; 0xc9c <SwICU_Read+0x116>
     c86:	dd 23       	and	r29, r29
     c88:	49 f4       	brne	.+18     	; 0xc9c <SwICU_Read+0x116>
     c8a:	99 20       	and	r9, r9
     c8c:	39 f4       	brne	.+14     	; 0xc9c <SwICU_Read+0x116>
     c8e:	88 20       	and	r8, r8
     c90:	29 f4       	brne	.+10     	; 0xc9c <SwICU_Read+0x116>
     c92:	77 20       	and	r7, r7
     c94:	19 f4       	brne	.+6      	; 0xc9c <SwICU_Read+0x116>
     c96:	66 20       	and	r6, r6
     c98:	09 f4       	brne	.+2      	; 0xc9c <SwICU_Read+0x116>
     c9a:	f4 c0       	rjmp	.+488    	; 0xe84 <SwICU_Read+0x2fe>
     c9c:	25 2d       	mov	r18, r5
     c9e:	34 2d       	mov	r19, r4
     ca0:	4c 2f       	mov	r20, r28
     ca2:	5c 2f       	mov	r21, r28
     ca4:	6c 2f       	mov	r22, r28
     ca6:	7c 2f       	mov	r23, r28
     ca8:	8c 2f       	mov	r24, r28
     caa:	9c 2f       	mov	r25, r28
     cac:	aa 24       	eor	r10, r10
     cae:	a3 94       	inc	r10
     cb0:	bb 24       	eor	r11, r11
     cb2:	cc 24       	eor	r12, r12
     cb4:	dd 24       	eor	r13, r13
     cb6:	ee 24       	eor	r14, r14
     cb8:	ff 24       	eor	r15, r15
     cba:	00 e0       	ldi	r16, 0x00	; 0
     cbc:	10 e0       	ldi	r17, 0x00	; 0
     cbe:	0e 94 b6 0a 	call	0x156c	; 0x156c <__ucmpdi2>
     cc2:	82 30       	cpi	r24, 0x02	; 2
     cc4:	08 f0       	brcs	.+2      	; 0xcc8 <SwICU_Read+0x142>
     cc6:	e7 c0       	rjmp	.+462    	; 0xe96 <SwICU_Read+0x310>
     cc8:	d5 c0       	rjmp	.+426    	; 0xe74 <SwICU_Read+0x2ee>
     cca:	f5 e0       	ldi	r31, 0x05	; 5
     ccc:	5f 16       	cp	r5, r31
     cce:	79 f4       	brne	.+30     	; 0xcee <SwICU_Read+0x168>
     cd0:	44 20       	and	r4, r4
     cd2:	69 f4       	brne	.+26     	; 0xcee <SwICU_Read+0x168>
     cd4:	cc 23       	and	r28, r28
     cd6:	59 f4       	brne	.+22     	; 0xcee <SwICU_Read+0x168>
     cd8:	dd 23       	and	r29, r29
     cda:	49 f4       	brne	.+18     	; 0xcee <SwICU_Read+0x168>
     cdc:	99 20       	and	r9, r9
     cde:	39 f4       	brne	.+14     	; 0xcee <SwICU_Read+0x168>
     ce0:	88 20       	and	r8, r8
     ce2:	29 f4       	brne	.+10     	; 0xcee <SwICU_Read+0x168>
     ce4:	77 20       	and	r7, r7
     ce6:	19 f4       	brne	.+6      	; 0xcee <SwICU_Read+0x168>
     ce8:	66 20       	and	r6, r6
     cea:	09 f4       	brne	.+2      	; 0xcee <SwICU_Read+0x168>
     cec:	ef c0       	rjmp	.+478    	; 0xecc <SwICU_Read+0x346>
     cee:	25 2d       	mov	r18, r5
     cf0:	34 2d       	mov	r19, r4
     cf2:	4c 2f       	mov	r20, r28
     cf4:	5c 2f       	mov	r21, r28
     cf6:	6c 2f       	mov	r22, r28
     cf8:	7c 2f       	mov	r23, r28
     cfa:	8c 2f       	mov	r24, r28
     cfc:	9c 2f       	mov	r25, r28
     cfe:	0f 2e       	mov	r0, r31
     d00:	f5 e0       	ldi	r31, 0x05	; 5
     d02:	af 2e       	mov	r10, r31
     d04:	f0 2d       	mov	r31, r0
     d06:	bb 24       	eor	r11, r11
     d08:	cc 24       	eor	r12, r12
     d0a:	dd 24       	eor	r13, r13
     d0c:	ee 24       	eor	r14, r14
     d0e:	ff 24       	eor	r15, r15
     d10:	00 e0       	ldi	r16, 0x00	; 0
     d12:	10 e0       	ldi	r17, 0x00	; 0
     d14:	0e 94 b6 0a 	call	0x156c	; 0x156c <__ucmpdi2>
     d18:	82 30       	cpi	r24, 0x02	; 2
     d1a:	08 f0       	brcs	.+2      	; 0xd1e <SwICU_Read+0x198>
     d1c:	e0 c0       	rjmp	.+448    	; 0xede <SwICU_Read+0x358>
     d1e:	cd c0       	rjmp	.+410    	; 0xeba <SwICU_Read+0x334>
     d20:	8b e0       	ldi	r24, 0x0B	; 11
     d22:	58 16       	cp	r5, r24
     d24:	79 f4       	brne	.+30     	; 0xd44 <SwICU_Read+0x1be>
     d26:	44 20       	and	r4, r4
     d28:	69 f4       	brne	.+26     	; 0xd44 <SwICU_Read+0x1be>
     d2a:	cc 23       	and	r28, r28
     d2c:	59 f4       	brne	.+22     	; 0xd44 <SwICU_Read+0x1be>
     d2e:	dd 23       	and	r29, r29
     d30:	49 f4       	brne	.+18     	; 0xd44 <SwICU_Read+0x1be>
     d32:	99 20       	and	r9, r9
     d34:	39 f4       	brne	.+14     	; 0xd44 <SwICU_Read+0x1be>
     d36:	88 20       	and	r8, r8
     d38:	29 f4       	brne	.+10     	; 0xd44 <SwICU_Read+0x1be>
     d3a:	77 20       	and	r7, r7
     d3c:	19 f4       	brne	.+6      	; 0xd44 <SwICU_Read+0x1be>
     d3e:	66 20       	and	r6, r6
     d40:	09 f4       	brne	.+2      	; 0xd44 <SwICU_Read+0x1be>
     d42:	fa c0       	rjmp	.+500    	; 0xf38 <SwICU_Read+0x3b2>
     d44:	25 2d       	mov	r18, r5
     d46:	34 2d       	mov	r19, r4
     d48:	4c 2f       	mov	r20, r28
     d4a:	5c 2f       	mov	r21, r28
     d4c:	6c 2f       	mov	r22, r28
     d4e:	7c 2f       	mov	r23, r28
     d50:	8c 2f       	mov	r24, r28
     d52:	9c 2f       	mov	r25, r28
     d54:	0f 2e       	mov	r0, r31
     d56:	fb e0       	ldi	r31, 0x0B	; 11
     d58:	af 2e       	mov	r10, r31
     d5a:	f0 2d       	mov	r31, r0
     d5c:	bb 24       	eor	r11, r11
     d5e:	cc 24       	eor	r12, r12
     d60:	dd 24       	eor	r13, r13
     d62:	ee 24       	eor	r14, r14
     d64:	ff 24       	eor	r15, r15
     d66:	00 e0       	ldi	r16, 0x00	; 0
     d68:	10 e0       	ldi	r17, 0x00	; 0
     d6a:	0e 94 b6 0a 	call	0x156c	; 0x156c <__ucmpdi2>
     d6e:	82 30       	cpi	r24, 0x02	; 2
     d70:	58 f5       	brcc	.+86     	; 0xdc8 <SwICU_Read+0x242>
     d72:	e9 e0       	ldi	r30, 0x09	; 9
     d74:	5e 16       	cp	r5, r30
     d76:	79 f4       	brne	.+30     	; 0xd96 <SwICU_Read+0x210>
     d78:	44 20       	and	r4, r4
     d7a:	69 f4       	brne	.+26     	; 0xd96 <SwICU_Read+0x210>
     d7c:	cc 23       	and	r28, r28
     d7e:	59 f4       	brne	.+22     	; 0xd96 <SwICU_Read+0x210>
     d80:	dd 23       	and	r29, r29
     d82:	49 f4       	brne	.+18     	; 0xd96 <SwICU_Read+0x210>
     d84:	99 20       	and	r9, r9
     d86:	39 f4       	brne	.+14     	; 0xd96 <SwICU_Read+0x210>
     d88:	88 20       	and	r8, r8
     d8a:	29 f4       	brne	.+10     	; 0xd96 <SwICU_Read+0x210>
     d8c:	77 20       	and	r7, r7
     d8e:	19 f4       	brne	.+6      	; 0xd96 <SwICU_Read+0x210>
     d90:	66 20       	and	r6, r6
     d92:	09 f4       	brne	.+2      	; 0xd96 <SwICU_Read+0x210>
     d94:	bf c0       	rjmp	.+382    	; 0xf14 <SwICU_Read+0x38e>
     d96:	25 2d       	mov	r18, r5
     d98:	34 2d       	mov	r19, r4
     d9a:	4c 2f       	mov	r20, r28
     d9c:	5c 2f       	mov	r21, r28
     d9e:	6c 2f       	mov	r22, r28
     da0:	7c 2f       	mov	r23, r28
     da2:	8c 2f       	mov	r24, r28
     da4:	9c 2f       	mov	r25, r28
     da6:	0f 2e       	mov	r0, r31
     da8:	f9 e0       	ldi	r31, 0x09	; 9
     daa:	af 2e       	mov	r10, r31
     dac:	f0 2d       	mov	r31, r0
     dae:	bb 24       	eor	r11, r11
     db0:	cc 24       	eor	r12, r12
     db2:	dd 24       	eor	r13, r13
     db4:	ee 24       	eor	r14, r14
     db6:	ff 24       	eor	r15, r15
     db8:	00 e0       	ldi	r16, 0x00	; 0
     dba:	10 e0       	ldi	r17, 0x00	; 0
     dbc:	0e 94 b6 0a 	call	0x156c	; 0x156c <__ucmpdi2>
     dc0:	82 30       	cpi	r24, 0x02	; 2
     dc2:	08 f0       	brcs	.+2      	; 0xdc6 <SwICU_Read+0x240>
     dc4:	b0 c0       	rjmp	.+352    	; 0xf26 <SwICU_Read+0x3a0>
     dc6:	9d c0       	rjmp	.+314    	; 0xf02 <SwICU_Read+0x37c>
     dc8:	fd e0       	ldi	r31, 0x0D	; 13
     dca:	5f 16       	cp	r5, r31
     dcc:	79 f4       	brne	.+30     	; 0xdec <SwICU_Read+0x266>
     dce:	44 20       	and	r4, r4
     dd0:	69 f4       	brne	.+26     	; 0xdec <SwICU_Read+0x266>
     dd2:	cc 23       	and	r28, r28
     dd4:	59 f4       	brne	.+22     	; 0xdec <SwICU_Read+0x266>
     dd6:	dd 23       	and	r29, r29
     dd8:	49 f4       	brne	.+18     	; 0xdec <SwICU_Read+0x266>
     dda:	99 20       	and	r9, r9
     ddc:	39 f4       	brne	.+14     	; 0xdec <SwICU_Read+0x266>
     dde:	88 20       	and	r8, r8
     de0:	29 f4       	brne	.+10     	; 0xdec <SwICU_Read+0x266>
     de2:	77 20       	and	r7, r7
     de4:	19 f4       	brne	.+6      	; 0xdec <SwICU_Read+0x266>
     de6:	66 20       	and	r6, r6
     de8:	09 f4       	brne	.+2      	; 0xdec <SwICU_Read+0x266>
     dea:	b8 c0       	rjmp	.+368    	; 0xf5c <SwICU_Read+0x3d6>
     dec:	25 2d       	mov	r18, r5
     dee:	34 2d       	mov	r19, r4
     df0:	4c 2f       	mov	r20, r28
     df2:	5c 2f       	mov	r21, r28
     df4:	6c 2f       	mov	r22, r28
     df6:	7c 2f       	mov	r23, r28
     df8:	8c 2f       	mov	r24, r28
     dfa:	9c 2f       	mov	r25, r28
     dfc:	0f 2e       	mov	r0, r31
     dfe:	fd e0       	ldi	r31, 0x0D	; 13
     e00:	af 2e       	mov	r10, r31
     e02:	f0 2d       	mov	r31, r0
     e04:	bb 24       	eor	r11, r11
     e06:	cc 24       	eor	r12, r12
     e08:	dd 24       	eor	r13, r13
     e0a:	ee 24       	eor	r14, r14
     e0c:	ff 24       	eor	r15, r15
     e0e:	00 e0       	ldi	r16, 0x00	; 0
     e10:	10 e0       	ldi	r17, 0x00	; 0
     e12:	0e 94 b6 0a 	call	0x156c	; 0x156c <__ucmpdi2>
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	08 f4       	brcc	.+2      	; 0xe1c <SwICU_Read+0x296>
     e1a:	97 c0       	rjmp	.+302    	; 0xf4a <SwICU_Read+0x3c4>
     e1c:	8e e0       	ldi	r24, 0x0E	; 14
     e1e:	58 16       	cp	r5, r24
     e20:	79 f4       	brne	.+30     	; 0xe40 <SwICU_Read+0x2ba>
     e22:	44 20       	and	r4, r4
     e24:	69 f4       	brne	.+26     	; 0xe40 <SwICU_Read+0x2ba>
     e26:	cc 23       	and	r28, r28
     e28:	59 f4       	brne	.+22     	; 0xe40 <SwICU_Read+0x2ba>
     e2a:	dd 23       	and	r29, r29
     e2c:	49 f4       	brne	.+18     	; 0xe40 <SwICU_Read+0x2ba>
     e2e:	99 20       	and	r9, r9
     e30:	39 f4       	brne	.+14     	; 0xe40 <SwICU_Read+0x2ba>
     e32:	88 20       	and	r8, r8
     e34:	29 f4       	brne	.+10     	; 0xe40 <SwICU_Read+0x2ba>
     e36:	77 20       	and	r7, r7
     e38:	19 f4       	brne	.+6      	; 0xe40 <SwICU_Read+0x2ba>
     e3a:	66 20       	and	r6, r6
     e3c:	09 f4       	brne	.+2      	; 0xe40 <SwICU_Read+0x2ba>
     e3e:	97 c0       	rjmp	.+302    	; 0xf6e <SwICU_Read+0x3e8>
     e40:	ef e0       	ldi	r30, 0x0F	; 15
     e42:	5e 16       	cp	r5, r30
     e44:	09 f0       	breq	.+2      	; 0xe48 <SwICU_Read+0x2c2>
     e46:	a5 c0       	rjmp	.+330    	; 0xf92 <SwICU_Read+0x40c>
     e48:	44 20       	and	r4, r4
     e4a:	09 f0       	breq	.+2      	; 0xe4e <SwICU_Read+0x2c8>
     e4c:	a2 c0       	rjmp	.+324    	; 0xf92 <SwICU_Read+0x40c>
     e4e:	cc 23       	and	r28, r28
     e50:	09 f0       	breq	.+2      	; 0xe54 <SwICU_Read+0x2ce>
     e52:	9f c0       	rjmp	.+318    	; 0xf92 <SwICU_Read+0x40c>
     e54:	dd 23       	and	r29, r29
     e56:	09 f0       	breq	.+2      	; 0xe5a <SwICU_Read+0x2d4>
     e58:	9c c0       	rjmp	.+312    	; 0xf92 <SwICU_Read+0x40c>
     e5a:	99 20       	and	r9, r9
     e5c:	09 f0       	breq	.+2      	; 0xe60 <SwICU_Read+0x2da>
     e5e:	99 c0       	rjmp	.+306    	; 0xf92 <SwICU_Read+0x40c>
     e60:	88 20       	and	r8, r8
     e62:	09 f0       	breq	.+2      	; 0xe66 <SwICU_Read+0x2e0>
     e64:	96 c0       	rjmp	.+300    	; 0xf92 <SwICU_Read+0x40c>
     e66:	77 20       	and	r7, r7
     e68:	09 f0       	breq	.+2      	; 0xe6c <SwICU_Read+0x2e6>
     e6a:	93 c0       	rjmp	.+294    	; 0xf92 <SwICU_Read+0x40c>
     e6c:	66 20       	and	r6, r6
     e6e:	09 f0       	breq	.+2      	; 0xe72 <SwICU_Read+0x2ec>
     e70:	90 c0       	rjmp	.+288    	; 0xf92 <SwICU_Read+0x40c>
     e72:	86 c0       	rjmp	.+268    	; 0xf80 <SwICU_Read+0x3fa>
	case 0:{
	PORTB_DATA=0b00000000;
     e74:	18 ba       	out	0x18, r1	; 24
	timer2Start();
     e76:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
	timer2DelayMs(100);
     e7a:	84 e6       	ldi	r24, 0x64	; 100
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 ab 09 	call	0x1356	; 0x1356 <timer2DelayMs>
	break;}
     e82:	88 c0       	rjmp	.+272    	; 0xf94 <SwICU_Read+0x40e>
	case 1:{
	PORTB_DATA=0b00010000;
     e84:	80 e1       	ldi	r24, 0x10	; 16
     e86:	88 bb       	out	0x18, r24	; 24
	timer2Start();
     e88:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
	timer2DelayMs(100);
     e8c:	84 e6       	ldi	r24, 0x64	; 100
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 ab 09 	call	0x1356	; 0x1356 <timer2DelayMs>
	break;}
     e94:	7f c0       	rjmp	.+254    	; 0xf94 <SwICU_Read+0x40e>
	case 2:{
	PORTB_DATA=0b00100000;
     e96:	80 e2       	ldi	r24, 0x20	; 32
     e98:	88 bb       	out	0x18, r24	; 24
	timer2Start();
     e9a:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
	timer2DelayMs(100);
     e9e:	84 e6       	ldi	r24, 0x64	; 100
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 ab 09 	call	0x1356	; 0x1356 <timer2DelayMs>
	break;}
     ea6:	76 c0       	rjmp	.+236    	; 0xf94 <SwICU_Read+0x40e>
	case 3:{
	PORTB_DATA=0b00110000;
     ea8:	80 e3       	ldi	r24, 0x30	; 48
     eaa:	88 bb       	out	0x18, r24	; 24
	timer2Start();
     eac:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
	timer2DelayMs(100);
     eb0:	84 e6       	ldi	r24, 0x64	; 100
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 ab 09 	call	0x1356	; 0x1356 <timer2DelayMs>
	break;}
     eb8:	6d c0       	rjmp	.+218    	; 0xf94 <SwICU_Read+0x40e>
	case 4:{
	PORTB_DATA=0x40;
     eba:	80 e4       	ldi	r24, 0x40	; 64
     ebc:	88 bb       	out	0x18, r24	; 24
	timer2Start();
     ebe:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
	timer2DelayMs(100);
     ec2:	84 e6       	ldi	r24, 0x64	; 100
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 ab 09 	call	0x1356	; 0x1356 <timer2DelayMs>
	break;}
     eca:	64 c0       	rjmp	.+200    	; 0xf94 <SwICU_Read+0x40e>
	case 5:{
	PORTB_DATA=0x50;
     ecc:	80 e5       	ldi	r24, 0x50	; 80
     ece:	88 bb       	out	0x18, r24	; 24
	timer2Start();
     ed0:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
	timer2DelayMs(100);
     ed4:	84 e6       	ldi	r24, 0x64	; 100
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 ab 09 	call	0x1356	; 0x1356 <timer2DelayMs>
	break;}
     edc:	5b c0       	rjmp	.+182    	; 0xf94 <SwICU_Read+0x40e>
	case 6:{
	PORTB_DATA=0x60;
     ede:	80 e6       	ldi	r24, 0x60	; 96
     ee0:	88 bb       	out	0x18, r24	; 24
	timer2Start();
     ee2:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
	timer2DelayMs(100);
     ee6:	84 e6       	ldi	r24, 0x64	; 100
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 ab 09 	call	0x1356	; 0x1356 <timer2DelayMs>
	break;}
     eee:	52 c0       	rjmp	.+164    	; 0xf94 <SwICU_Read+0x40e>
	case 7:{
	PORTB_DATA=0x70;
     ef0:	80 e7       	ldi	r24, 0x70	; 112
     ef2:	88 bb       	out	0x18, r24	; 24
	timer2Start();
     ef4:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
	timer2DelayMs(100);
     ef8:	84 e6       	ldi	r24, 0x64	; 100
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 ab 09 	call	0x1356	; 0x1356 <timer2DelayMs>
	break;}
     f00:	49 c0       	rjmp	.+146    	; 0xf94 <SwICU_Read+0x40e>
	case 8:{
	PORTB_DATA=0x80;
     f02:	80 e8       	ldi	r24, 0x80	; 128
     f04:	88 bb       	out	0x18, r24	; 24
	timer2Start();
     f06:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
	timer2DelayMs(100);
     f0a:	84 e6       	ldi	r24, 0x64	; 100
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 ab 09 	call	0x1356	; 0x1356 <timer2DelayMs>
	break;}
     f12:	40 c0       	rjmp	.+128    	; 0xf94 <SwICU_Read+0x40e>
	case 9:{
	timer2Start();
     f14:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
	timer2DelayMs(100);
     f18:	84 e6       	ldi	r24, 0x64	; 100
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 ab 09 	call	0x1356	; 0x1356 <timer2DelayMs>
	PORTB_DATA=0x90;
     f20:	80 e9       	ldi	r24, 0x90	; 144
     f22:	88 bb       	out	0x18, r24	; 24
	break;}
     f24:	37 c0       	rjmp	.+110    	; 0xf94 <SwICU_Read+0x40e>
	case 10:{
	timer2Start();
     f26:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
	timer2DelayMs(100);
     f2a:	84 e6       	ldi	r24, 0x64	; 100
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 ab 09 	call	0x1356	; 0x1356 <timer2DelayMs>
	PORTB_DATA=0xA0;
     f32:	80 ea       	ldi	r24, 0xA0	; 160
     f34:	88 bb       	out	0x18, r24	; 24
	break;}
     f36:	2e c0       	rjmp	.+92     	; 0xf94 <SwICU_Read+0x40e>
	case 11:{
	timer2Start();
     f38:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
	timer2DelayMs(100);
     f3c:	84 e6       	ldi	r24, 0x64	; 100
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 ab 09 	call	0x1356	; 0x1356 <timer2DelayMs>
	PORTB_DATA=0x40;
     f44:	80 e4       	ldi	r24, 0x40	; 64
     f46:	88 bb       	out	0x18, r24	; 24
	break;}
     f48:	25 c0       	rjmp	.+74     	; 0xf94 <SwICU_Read+0x40e>
	case 12:{
	timer2Start();
     f4a:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
	timer2DelayMs(100);
     f4e:	84 e6       	ldi	r24, 0x64	; 100
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	0e 94 ab 09 	call	0x1356	; 0x1356 <timer2DelayMs>
	PORTB_DATA=0xC0;
     f56:	80 ec       	ldi	r24, 0xC0	; 192
     f58:	88 bb       	out	0x18, r24	; 24
	break;}
     f5a:	1c c0       	rjmp	.+56     	; 0xf94 <SwICU_Read+0x40e>
	case 13:{
	timer2Start();
     f5c:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
	timer2DelayMs(100);
     f60:	84 e6       	ldi	r24, 0x64	; 100
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 ab 09 	call	0x1356	; 0x1356 <timer2DelayMs>
	
	PORTB_DATA=0xD0;
     f68:	80 ed       	ldi	r24, 0xD0	; 208
     f6a:	88 bb       	out	0x18, r24	; 24
	break;}
     f6c:	13 c0       	rjmp	.+38     	; 0xf94 <SwICU_Read+0x40e>
	case 14:{
	timer2Start();
     f6e:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
	timer2DelayMs(100);
     f72:	84 e6       	ldi	r24, 0x64	; 100
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 ab 09 	call	0x1356	; 0x1356 <timer2DelayMs>
	
	PORTB_DATA=0xE0;
     f7a:	80 ee       	ldi	r24, 0xE0	; 224
     f7c:	88 bb       	out	0x18, r24	; 24
	break;}
     f7e:	0a c0       	rjmp	.+20     	; 0xf94 <SwICU_Read+0x40e>
	case 15:{
	timer2Start();
     f80:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
	timer2DelayMs(100);
     f84:	84 e6       	ldi	r24, 0x64	; 100
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 ab 09 	call	0x1356	; 0x1356 <timer2DelayMs>
	PORTB_DATA=0xF0;
     f8c:	80 ef       	ldi	r24, 0xF0	; 240
     f8e:	88 bb       	out	0x18, r24	; 24
	break;}
     f90:	01 c0       	rjmp	.+2      	; 0xf94 <SwICU_Read+0x40e>
	default:
	PORTB_DATA=0;
     f92:	18 ba       	out	0x18, r1	; 24
	break;
}
}
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	ff 90       	pop	r15
     f9e:	ef 90       	pop	r14
     fa0:	df 90       	pop	r13
     fa2:	cf 90       	pop	r12
     fa4:	bf 90       	pop	r11
     fa6:	af 90       	pop	r10
     fa8:	9f 90       	pop	r9
     faa:	8f 90       	pop	r8
     fac:	7f 90       	pop	r7
     fae:	6f 90       	pop	r6
     fb0:	5f 90       	pop	r5
     fb2:	4f 90       	pop	r4
     fb4:	08 95       	ret

00000fb6 <SwICU_Stop>:


void SwICU_Stop(void)
{
timer0Stop();
     fb6:	0e 94 ee 07 	call	0xfdc	; 0xfdc <timer0Stop>
}
     fba:	08 95       	ret

00000fbc <SwICU_Start>:

void SwICU_Start(void)
{
timer0Start();
     fbc:	0e 94 e5 07 	call	0xfca	; 0xfca <timer0Start>
}
     fc0:	08 95       	ret

00000fc2 <timer0Set>:
}

}
void timer0Set(uint8_t u8_value)
{
TCNT0 =	u8_value;
     fc2:	82 bf       	out	0x32, r24	; 50
}
     fc4:	08 95       	ret

00000fc6 <timer0Read>:

uint8_t timer0Read(void)
{
	 return TCNT0;
     fc6:	82 b7       	in	r24, 0x32	; 50
}
     fc8:	08 95       	ret

00000fca <timer0Start>:
Depending on prescaler	x     X    X

*/
void timer0Start(void)
{
	 TCCR0 &= (0xF8);
     fca:	83 b7       	in	r24, 0x33	; 51
     fcc:	88 7f       	andi	r24, 0xF8	; 248
     fce:	83 bf       	out	0x33, r24	; 51
	 TCCR0 |= Prescaler_Value;
     fd0:	93 b7       	in	r25, 0x33	; 51
     fd2:	80 91 74 00 	lds	r24, 0x0074
     fd6:	89 2b       	or	r24, r25
     fd8:	83 bf       	out	0x33, r24	; 51
}
     fda:	08 95       	ret

00000fdc <timer0Stop>:
						      0     0    0
*/
void timer0Stop(void)
 {

TCCR0 &= (0xF8);
     fdc:	83 b7       	in	r24, 0x33	; 51
     fde:	88 7f       	andi	r24, 0xF8	; 248
     fe0:	83 bf       	out	0x33, r24	; 51

 }
     fe2:	08 95       	ret

00000fe4 <timer0Init>:
uint8_t Prescaler_Value2=0;
uint8_t u8g_T1_Prescaler=0;
volatile uint8_t pwm_time_on=0,flag=0;
volatile uint8_t u8_ovf_counter=0;
void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal,uint8_t u8_initialValue, uint8_t u8_outputCompare,En_timer0Interrupt_t en_interruptMask)
{
     fe4:	ef 92       	push	r14
     fe6:	0f 93       	push	r16
if(en_prescal == T0_NO_CLOCK)
     fe8:	44 23       	and	r20, r20
     fea:	19 f4       	brne	.+6      	; 0xff2 <timer0Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer0Stop();
     fec:	0e 94 ee 07 	call	0xfdc	; 0xfdc <timer0Stop>
     ff0:	48 c0       	rjmp	.+144    	; 0x1082 <timer0Init+0x9e>
}
else
{
TCCR0 |= en_mode|en_prescal;
     ff2:	93 b7       	in	r25, 0x33	; 51
     ff4:	89 2b       	or	r24, r25
     ff6:	84 2b       	or	r24, r20
     ff8:	83 bf       	out	0x33, r24	; 51
Prescaler_Value=en_prescal;
     ffa:	40 93 74 00 	sts	0x0074, r20
TCNT0 = u8_initialValue;
     ffe:	22 bf       	out	0x32, r18	; 50
switch(en_OC0){
    1000:	60 31       	cpi	r22, 0x10	; 16
    1002:	71 f0       	breq	.+28     	; 0x1020 <timer0Init+0x3c>
    1004:	61 31       	cpi	r22, 0x11	; 17
    1006:	18 f4       	brcc	.+6      	; 0x100e <timer0Init+0x2a>
    1008:	66 23       	and	r22, r22
    100a:	31 f0       	breq	.+12     	; 0x1018 <timer0Init+0x34>
    100c:	14 c0       	rjmp	.+40     	; 0x1036 <timer0Init+0x52>
    100e:	60 32       	cpi	r22, 0x20	; 32
    1010:	59 f0       	breq	.+22     	; 0x1028 <timer0Init+0x44>
    1012:	60 33       	cpi	r22, 0x30	; 48
    1014:	81 f4       	brne	.+32     	; 0x1036 <timer0Init+0x52>
    1016:	0c c0       	rjmp	.+24     	; 0x1030 <timer0Init+0x4c>
	case  T0_OC0_DIS:
	{
	TCCR0 &= 0xCF;
    1018:	83 b7       	in	r24, 0x33	; 51
    101a:	8f 7c       	andi	r24, 0xCF	; 207
    101c:	83 bf       	out	0x33, r24	; 51
		break;
    101e:	0b c0       	rjmp	.+22     	; 0x1036 <timer0Init+0x52>
	}
	case T0_OC0_TOGGLE:
	{
		TCCR0|=T0_OC0_TOGGLE;
    1020:	83 b7       	in	r24, 0x33	; 51
    1022:	80 61       	ori	r24, 0x10	; 16
    1024:	83 bf       	out	0x33, r24	; 51
		break;
    1026:	07 c0       	rjmp	.+14     	; 0x1036 <timer0Init+0x52>
	}
	case  T0_OC0_CLEAR:
	{
	TCCR0 |= T0_OC0_CLEAR;
    1028:	83 b7       	in	r24, 0x33	; 51
    102a:	80 62       	ori	r24, 0x20	; 32
    102c:	83 bf       	out	0x33, r24	; 51

		break;
    102e:	03 c0       	rjmp	.+6      	; 0x1036 <timer0Init+0x52>
	}
	case T0_OC0_SET:
	{
		TCCR0 |=T0_OC0_SET;
    1030:	83 b7       	in	r24, 0x33	; 51
    1032:	80 63       	ori	r24, 0x30	; 48
    1034:	83 bf       	out	0x33, r24	; 51
		break;
	}

}
OCR0  =u8_outputCompare;
    1036:	0c bf       	out	0x3c, r16	; 60
switch(en_interruptMask){
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	e8 16       	cp	r14, r24
    103c:	69 f0       	breq	.+26     	; 0x1058 <timer0Init+0x74>
    103e:	e8 16       	cp	r14, r24
    1040:	20 f0       	brcs	.+8      	; 0x104a <timer0Init+0x66>
    1042:	82 e0       	ldi	r24, 0x02	; 2
    1044:	e8 16       	cp	r14, r24
    1046:	e9 f4       	brne	.+58     	; 0x1082 <timer0Init+0x9e>
    1048:	10 c0       	rjmp	.+32     	; 0x106a <timer0Init+0x86>
case  T0_POLLING:{
pooling=0;
    104a:	10 92 73 00 	sts	0x0073, r1
G_interrupt_Disable();
    104e:	0e 94 55 01 	call	0x2aa	; 0x2aa <G_interrupt_Disable>
TIMSK &= T0_POLLING;
    1052:	89 b7       	in	r24, 0x39	; 57
    1054:	19 be       	out	0x39, r1	; 57
break;
    1056:	15 c0       	rjmp	.+42     	; 0x1082 <timer0Init+0x9e>
}
case T0_INTERRUPT_NORMAL :
{pooling=1;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	80 93 73 00 	sts	0x0073, r24
G_interrupt_Enable();
    105e:	0e 94 45 01 	call	0x28a	; 0x28a <G_interrupt_Enable>
TIMSK |= T0_INTERRUPT_NORMAL;
    1062:	89 b7       	in	r24, 0x39	; 57
    1064:	81 60       	ori	r24, 0x01	; 1
    1066:	89 bf       	out	0x39, r24	; 57
break;
    1068:	0c c0       	rjmp	.+24     	; 0x1082 <timer0Init+0x9e>
}
case T0_INTERRUPT_CMP:
{pooling=1;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	80 93 73 00 	sts	0x0073, r24
//G_interrupt_Enable();
SET_BIT(SREG,7);
    1070:	8f b7       	in	r24, 0x3f	; 63
    1072:	80 68       	ori	r24, 0x80	; 128
    1074:	8f bf       	out	0x3f, r24	; 63
TIMSK |= T0_INTERRUPT_NORMAL;
    1076:	89 b7       	in	r24, 0x39	; 57
    1078:	81 60       	ori	r24, 0x01	; 1
    107a:	89 bf       	out	0x39, r24	; 57
TIMSK |=T0_INTERRUPT_CMP;
    107c:	89 b7       	in	r24, 0x39	; 57
    107e:	82 60       	ori	r24, 0x02	; 2
    1080:	89 bf       	out	0x39, r24	; 57
}
}

}

}
    1082:	0f 91       	pop	r16
    1084:	ef 90       	pop	r14
    1086:	08 95       	ret

00001088 <timer0DelayMs>:
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
    1088:	ac 01       	movw	r20, r24
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	41 15       	cp	r20, r1
    1090:	51 05       	cpc	r21, r1
    1092:	61 05       	cpc	r22, r1
    1094:	71 05       	cpc	r23, r1
    1096:	89 f0       	breq	.+34     	; 0x10ba <timer0DelayMs+0x32>
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	dc 01       	movw	r26, r24
{
	while ((TIFR&0x01)==0);
    109e:	08 b6       	in	r0, 0x38	; 56
    10a0:	00 fe       	sbrs	r0, 0
    10a2:	fd cf       	rjmp	.-6      	; 0x109e <timer0DelayMs+0x16>
	TIFR |=0x01;
    10a4:	28 b7       	in	r18, 0x38	; 56
    10a6:	21 60       	ori	r18, 0x01	; 1
    10a8:	28 bf       	out	0x38, r18	; 56
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	a1 1d       	adc	r26, r1
    10ae:	b1 1d       	adc	r27, r1
    10b0:	84 17       	cp	r24, r20
    10b2:	95 07       	cpc	r25, r21
    10b4:	a6 07       	cpc	r26, r22
    10b6:	b7 07       	cpc	r27, r23
    10b8:	90 f3       	brcs	.-28     	; 0x109e <timer0DelayMs+0x16>
    10ba:	08 95       	ret

000010bc <timer0DelayUs>:
 at pooling _no prescaling
 240at TCNT0

 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
	u8_ovf_counter=0;
    10c0:	10 92 6d 00 	sts	0x006D, r1
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	a1 05       	cpc	r26, r1
    10c8:	b1 05       	cpc	r27, r1
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <timer0DelayUs+0x1c>
	{
	timer0Set(240);
    10cc:	80 ef       	ldi	r24, 0xF0	; 240
    10ce:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <timer0Set>
	while(timer0Read()<=255);
    10d2:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <timer0Read>
    10d6:	fd cf       	rjmp	.-6      	; 0x10d2 <timer0DelayUs+0x16>
	//while(u32_ovf_counter <= (8*u32_delay_in_us/1000));
	}
	TIFR |=(1<<TOV0);/*Clear the flag*/
    10d8:	88 b7       	in	r24, 0x38	; 56
    10da:	81 60       	ori	r24, 0x01	; 1
    10dc:	88 bf       	out	0x38, r24	; 56
}/*1*/
    10de:	08 95       	ret

000010e0 <timer0SwPWM>:
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    10e0:	cf 92       	push	r12
    10e2:	df 92       	push	r13
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	cf 93       	push	r28
    10ea:	c8 2f       	mov	r28, r24
float dutyReal;
pwm_time_on=MAX_HOLD;
    10ec:	8f ef       	ldi	r24, 0xFF	; 255
    10ee:	80 93 6f 00 	sts	0x006F, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
    10f2:	60 91 6f 00 	lds	r22, 0x006F
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 8d 0b 	call	0x171a	; 0x171a <__floatunsisf>
    1100:	6b 01       	movw	r12, r22
    1102:	7c 01       	movw	r14, r24
}/*1*/
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
    1104:	6c 2f       	mov	r22, r28
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 8d 0b 	call	0x171a	; 0x171a <__floatunsisf>
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	48 ec       	ldi	r20, 0xC8	; 200
    1116:	52 e4       	ldi	r21, 0x42	; 66
    1118:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__divsf3>
    111c:	9b 01       	movw	r18, r22
    111e:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
    1120:	c7 01       	movw	r24, r14
    1122:	b6 01       	movw	r22, r12
    1124:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__mulsf3>
    1128:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__fixunssfsi>
    112c:	60 93 6f 00 	sts	0x006F, r22
switch(pooling)
    1130:	80 91 73 00 	lds	r24, 0x0073
    1134:	88 23       	and	r24, r24
    1136:	19 f0       	breq	.+6      	; 0x113e <timer0SwPWM+0x5e>
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	29 f5       	brne	.+74     	; 0x1186 <timer0SwPWM+0xa6>
    113c:	1f c0       	rjmp	.+62     	; 0x117c <timer0SwPWM+0x9c>
{
	case 0:
	{
	timer0Start();
    113e:	0e 94 e5 07 	call	0xfca	; 0xfca <timer0Start>
	timer0Set(pwm_time_on);
    1142:	80 91 6f 00 	lds	r24, 0x006F
    1146:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <timer0Set>
	//freq 50KHZ is the Max frequency possible
	while ((TIFR&0x01)==0);
    114a:	08 b6       	in	r0, 0x38	; 56
    114c:	00 fe       	sbrs	r0, 0
    114e:	fd cf       	rjmp	.-6      	; 0x114a <timer0SwPWM+0x6a>
	TIFR |=0x01;
    1150:	88 b7       	in	r24, 0x38	; 56
    1152:	81 60       	ori	r24, 0x01	; 1
    1154:	88 bf       	out	0x38, r24	; 56
	PORTC_DATA |=0xff;
    1156:	85 b3       	in	r24, 0x15	; 21
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	85 bb       	out	0x15, r24	; 21
	timer0Start();
    115c:	0e 94 e5 07 	call	0xfca	; 0xfca <timer0Start>
	timer0Set(MAX_HOLD-pwm_time_on);
    1160:	80 91 6f 00 	lds	r24, 0x006F
    1164:	80 95       	com	r24
    1166:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <timer0Set>
	//freq
	while ((TIFR & 0x01)==0);
    116a:	08 b6       	in	r0, 0x38	; 56
    116c:	00 fe       	sbrs	r0, 0
    116e:	fd cf       	rjmp	.-6      	; 0x116a <timer0SwPWM+0x8a>
	TIFR |=0x01;
    1170:	88 b7       	in	r24, 0x38	; 56
    1172:	81 60       	ori	r24, 0x01	; 1
    1174:	88 bf       	out	0x38, r24	; 56
	PORTC_DATA &=0x00;
    1176:	85 b3       	in	r24, 0x15	; 21
    1178:	15 ba       	out	0x15, r1	; 21

break;
    117a:	05 c0       	rjmp	.+10     	; 0x1186 <timer0SwPWM+0xa6>
}
case 1:
{
timer0Start();
    117c:	0e 94 e5 07 	call	0xfca	; 0xfca <timer0Start>
OCR0=pwm_time_on;
    1180:	80 91 6f 00 	lds	r24, 0x006F
    1184:	8c bf       	out	0x3c, r24	; 60
break;
}

}

}
    1186:	cf 91       	pop	r28
    1188:	ff 90       	pop	r15
    118a:	ef 90       	pop	r14
    118c:	df 90       	pop	r13
    118e:	cf 90       	pop	r12
    1190:	08 95       	ret

00001192 <timer0MakePulse>:

void timer0MakePulse(void)
{
    1192:	ef 92       	push	r14
    1194:	0f 93       	push	r16
timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_NO,0,0,T0_POLLING);
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	41 e0       	ldi	r20, 0x01	; 1
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	00 e0       	ldi	r16, 0x00	; 0
    11a0:	ee 24       	eor	r14, r14
    11a2:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <timer0Init>
timer0SwPWM(80,0);//triger
    11a6:	80 e5       	ldi	r24, 0x50	; 80
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	0e 94 70 08 	call	0x10e0	; 0x10e0 <timer0SwPWM>
timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_NO,0,0,T0_INTERRUPT_NORMAL);
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	41 e0       	ldi	r20, 0x01	; 1
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	ee 24       	eor	r14, r14
    11b8:	e3 94       	inc	r14
    11ba:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <timer0Init>

}
    11be:	0f 91       	pop	r16
    11c0:	ef 90       	pop	r14
    11c2:	08 95       	ret

000011c4 <Timer_interrupt_routine>:
void Timer_interrupt_routine(void)
{/*
	Led_Toggle(LED_3);
	timer0Stop();
*/
u8_ovf_counter++;
    11c4:	80 91 6d 00 	lds	r24, 0x006D
    11c8:	8f 5f       	subi	r24, 0xFF	; 255
    11ca:	80 93 6d 00 	sts	0x006D, r24



//timer0Read();
//flag +=1;
}
    11ce:	08 95       	ret

000011d0 <Timer_interrupt_COMP_routine>:

void Timer_interrupt_COMP_routine(void)
{
	PORTD_DATA ^=0xff;
    11d0:	82 b3       	in	r24, 0x12	; 18
    11d2:	80 95       	com	r24
    11d4:	82 bb       	out	0x12, r24	; 18

}
    11d6:	08 95       	ret

000011d8 <timer1Init>:
 */
void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC,
	En_timer1perscaler_t en_prescal,uint16_t u16_initialValue,
	uint16_t u16_outputCompareA,uint16_t u16_outputCompareB,
	 uint16_t u16_inputCapture,En_timer1Interrupt_t en_interruptMask)
 {
    11d8:	af 92       	push	r10
    11da:	ef 92       	push	r14
    11dc:	ff 92       	push	r15
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	d9 01       	movw	r26, r18
    11e4:	2a 2d       	mov	r18, r10
	TCCR1 |= en_mode | en_OC;
    11e6:	ee b5       	in	r30, 0x2e	; 46
    11e8:	ff b5       	in	r31, 0x2f	; 47
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	86 2b       	or	r24, r22
    11ee:	97 2b       	or	r25, r23
    11f0:	8e 2b       	or	r24, r30
    11f2:	9f 2b       	or	r25, r31
    11f4:	9f bd       	out	0x2f, r25	; 47
    11f6:	8e bd       	out	0x2e, r24	; 46
	u8g_T1_Prescaler=en_prescal;
    11f8:	40 93 70 00 	sts	0x0070, r20
	OCR1A =u16_outputCompareA;
    11fc:	1b bd       	out	0x2b, r17	; 43
    11fe:	0a bd       	out	0x2a, r16	; 42
	OCR1B =u16_outputCompareB;
    1200:	f9 bc       	out	0x29, r15	; 41
    1202:	e8 bc       	out	0x28, r14	; 40
	TCNT1=u16_initialValue;
    1204:	bd bd       	out	0x2d, r27	; 45
    1206:	ac bd       	out	0x2c, r26	; 44
	switch(en_interruptMask)
    1208:	28 30       	cpi	r18, 0x08	; 8
    120a:	d1 f0       	breq	.+52     	; 0x1240 <timer1Init+0x68>
    120c:	29 30       	cpi	r18, 0x09	; 9
    120e:	28 f4       	brcc	.+10     	; 0x121a <timer1Init+0x42>
    1210:	aa 20       	and	r10, r10
    1212:	51 f0       	breq	.+20     	; 0x1228 <timer1Init+0x50>
    1214:	24 30       	cpi	r18, 0x04	; 4
    1216:	f9 f4       	brne	.+62     	; 0x1256 <timer1Init+0x7e>
    1218:	0b c0       	rjmp	.+22     	; 0x1230 <timer1Init+0x58>
    121a:	20 32       	cpi	r18, 0x20	; 32
    121c:	a9 f0       	breq	.+42     	; 0x1248 <timer1Init+0x70>
    121e:	2c 33       	cpi	r18, 0x3C	; 60
    1220:	b9 f0       	breq	.+46     	; 0x1250 <timer1Init+0x78>
    1222:	20 31       	cpi	r18, 0x10	; 16
    1224:	c1 f4       	brne	.+48     	; 0x1256 <timer1Init+0x7e>
    1226:	08 c0       	rjmp	.+16     	; 0x1238 <timer1Init+0x60>
	{
		case T1_POLLING:
		{
			TIMSK &=0xC3;
    1228:	89 b7       	in	r24, 0x39	; 57
    122a:	83 7c       	andi	r24, 0xC3	; 195
    122c:	89 bf       	out	0x39, r24	; 57
			/*	     OCIE0 ToIE0   ALL INTERRUPT T1    	OCIE0 ToIE0
			TIMSK &=  1     1        0 0 0 0 	           1     1
			All T1 Interrupts enable are cleared
			but other timers interrupt enable are not effected
			*/
		break;
    122e:	13 c0       	rjmp	.+38     	; 0x1256 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_NORMAL:
		{
			TIMSK |=T1_INTERRUPT_NORMAL;
    1230:	89 b7       	in	r24, 0x39	; 57
    1232:	84 60       	ori	r24, 0x04	; 4
    1234:	89 bf       	out	0x39, r24	; 57
		break;
    1236:	0f c0       	rjmp	.+30     	; 0x1256 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_CMP_1A:
		{
			TIMSK |=T1_INTERRUPT_CMP_1A;
    1238:	89 b7       	in	r24, 0x39	; 57
    123a:	80 61       	ori	r24, 0x10	; 16
    123c:	89 bf       	out	0x39, r24	; 57
			break;
    123e:	0b c0       	rjmp	.+22     	; 0x1256 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_CMP_1B:
		{
			TIMSK |=T1_INTERRUPT_CMP_1B;
    1240:	89 b7       	in	r24, 0x39	; 57
    1242:	88 60       	ori	r24, 0x08	; 8
    1244:	89 bf       	out	0x39, r24	; 57
			break;
    1246:	07 c0       	rjmp	.+14     	; 0x1256 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_ICAPTURE:
		{
			TIMSK |=T1_INTERRUPT_ICAPTURE;
    1248:	89 b7       	in	r24, 0x39	; 57
    124a:	80 62       	ori	r24, 0x20	; 32
    124c:	89 bf       	out	0x39, r24	; 57
			break;
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <timer1Init+0x7e>
		}
		case T1_INTERRUPT_All:
		{
			TIMSK|=T1_INTERRUPT_All;
    1250:	89 b7       	in	r24, 0x39	; 57
    1252:	8c 63       	ori	r24, 0x3C	; 60
    1254:	89 bf       	out	0x39, r24	; 57
	}




	}
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	af 90       	pop	r10
    1260:	08 95       	ret

00001262 <timer1Set>:


void timer1Set(uint16_t u16_value)
{
TCNT1=u16_value;
    1262:	9d bd       	out	0x2d, r25	; 45
    1264:	8c bd       	out	0x2c, r24	; 44
}
    1266:	08 95       	ret

00001268 <timer1Read>:
 * Description:
 * @return TCNT1
 */
uint16_t timer1Read(void)
{
return TCNT1;
    1268:	8c b5       	in	r24, 0x2c	; 44
    126a:	9d b5       	in	r25, 0x2d	; 45
}
    126c:	08 95       	ret

0000126e <timer1Start>:
 * Description:
 * @param
 */
void timer1Start(void)
{
TCCR1|=u8g_T1_Prescaler;
    126e:	2e b5       	in	r18, 0x2e	; 46
    1270:	3f b5       	in	r19, 0x2f	; 47
    1272:	80 91 70 00 	lds	r24, 0x0070
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	82 2b       	or	r24, r18
    127a:	93 2b       	or	r25, r19
    127c:	9f bd       	out	0x2f, r25	; 47
    127e:	8e bd       	out	0x2e, r24	; 46
}
    1280:	08 95       	ret

00001282 <timer1Stop>:
 * Description:
 * @param
 */
void timer1Stop(void)
{
TCCR1 &=0xfff8;
    1282:	8e b5       	in	r24, 0x2e	; 46
    1284:	9f b5       	in	r25, 0x2f	; 47
    1286:	88 7f       	andi	r24, 0xF8	; 248
    1288:	9f bd       	out	0x2f, r25	; 47
    128a:	8e bd       	out	0x2e, r24	; 46
/*Keep all sittings as it is and put zeros in cs10,cs11,cs12*/
}
    128c:	08 95       	ret

0000128e <timer1DelayMs>:
 */
void timer1DelayMs(uint16_t u16_delay_in_ms)
{


}
    128e:	08 95       	ret

00001290 <timer1DelayUs>:
 */
void timer1DelayUs(uint32_t u32_delay_in_us)
{


}
    1290:	08 95       	ret

00001292 <timer1SwPWM>:
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{


}
    1292:	08 95       	ret

00001294 <timer2Set>:
* Description:
* @param value
*/
void timer2Set(uint8_t u8_a_value)
{
TCNT2=u8_a_value;
    1294:	84 bd       	out	0x24, r24	; 36
}
    1296:	08 95       	ret

00001298 <timer2Read>:
/**
* Description:
* @return
*/
uint8_t timer2Read(void){
return TCNT2;
    1298:	84 b5       	in	r24, 0x24	; 36
}
    129a:	08 95       	ret

0000129c <timer2Start>:
/**
* Description:
*/
void timer2Start(void)
{
TCCR2 &= 0xf8;
    129c:	85 b5       	in	r24, 0x25	; 37
    129e:	88 7f       	andi	r24, 0xF8	; 248
    12a0:	85 bd       	out	0x25, r24	; 37
TCCR2 |= Prescaler_Value2;
    12a2:	95 b5       	in	r25, 0x25	; 37
    12a4:	80 91 71 00 	lds	r24, 0x0071
    12a8:	89 2b       	or	r24, r25
    12aa:	85 bd       	out	0x25, r24	; 37
}
    12ac:	08 95       	ret

000012ae <timer2Stop>:
/**
* Description:
*/
void timer2Stop(void)
{
TCCR2 &= 0xf8;
    12ae:	85 b5       	in	r24, 0x25	; 37
    12b0:	88 7f       	andi	r24, 0xF8	; 248
    12b2:	85 bd       	out	0x25, r24	; 37

}
    12b4:	08 95       	ret

000012b6 <timer2Init>:


}

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC,En_timer2perscaler_t en_prescal2, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
    12b6:	cf 92       	push	r12
    12b8:	0f 93       	push	r16
if(en_prescal2 == T2_NO_CLOCK)
    12ba:	44 23       	and	r20, r20
    12bc:	19 f4       	brne	.+6      	; 0x12c4 <timer2Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer2Stop();
    12be:	0e 94 57 09 	call	0x12ae	; 0x12ae <timer2Stop>
    12c2:	46 c0       	rjmp	.+140    	; 0x1350 <timer2Init+0x9a>
}
else
{
TCCR2 |= en_mode|en_prescal2 ;
    12c4:	95 b5       	in	r25, 0x25	; 37
    12c6:	89 2b       	or	r24, r25
    12c8:	84 2b       	or	r24, r20
    12ca:	85 bd       	out	0x25, r24	; 37
Prescaler_Value2=en_prescal2;
    12cc:	40 93 71 00 	sts	0x0071, r20
TCNT2 = u8_initialValue;
    12d0:	24 bd       	out	0x24, r18	; 36
switch(en_OC){
    12d2:	60 31       	cpi	r22, 0x10	; 16
    12d4:	71 f0       	breq	.+28     	; 0x12f2 <timer2Init+0x3c>
    12d6:	61 31       	cpi	r22, 0x11	; 17
    12d8:	18 f4       	brcc	.+6      	; 0x12e0 <timer2Init+0x2a>
    12da:	66 23       	and	r22, r22
    12dc:	31 f0       	breq	.+12     	; 0x12ea <timer2Init+0x34>
    12de:	14 c0       	rjmp	.+40     	; 0x1308 <timer2Init+0x52>
    12e0:	60 32       	cpi	r22, 0x20	; 32
    12e2:	59 f0       	breq	.+22     	; 0x12fa <timer2Init+0x44>
    12e4:	60 33       	cpi	r22, 0x30	; 48
    12e6:	81 f4       	brne	.+32     	; 0x1308 <timer2Init+0x52>
    12e8:	0c c0       	rjmp	.+24     	; 0x1302 <timer2Init+0x4c>
	case  T2_OC2_DIS:
	{
	TCCR2 &= 0xCF;
    12ea:	85 b5       	in	r24, 0x25	; 37
    12ec:	8f 7c       	andi	r24, 0xCF	; 207
    12ee:	85 bd       	out	0x25, r24	; 37
		break;
    12f0:	0b c0       	rjmp	.+22     	; 0x1308 <timer2Init+0x52>
	}
	case T2_OC2_TOGGLE:
	{
		TCCR2 |=T2_OC2_TOGGLE;
    12f2:	85 b5       	in	r24, 0x25	; 37
    12f4:	80 61       	ori	r24, 0x10	; 16
    12f6:	85 bd       	out	0x25, r24	; 37
		break;
    12f8:	07 c0       	rjmp	.+14     	; 0x1308 <timer2Init+0x52>
	}
	case  T2_OC2_CLEAR:
	{
	TCCR2 |= T2_OC2_CLEAR;
    12fa:	85 b5       	in	r24, 0x25	; 37
    12fc:	80 62       	ori	r24, 0x20	; 32
    12fe:	85 bd       	out	0x25, r24	; 37

		break;
    1300:	03 c0       	rjmp	.+6      	; 0x1308 <timer2Init+0x52>
	}
	case T2_OC2_SET:
	{
		TCCR2 |=T2_OC2_SET;
    1302:	85 b5       	in	r24, 0x25	; 37
    1304:	80 63       	ori	r24, 0x30	; 48
    1306:	85 bd       	out	0x25, r24	; 37
		break;
	}

}
OCR2  =u8_outputCompare;
    1308:	03 bd       	out	0x23, r16	; 35
switch(en_interruptMask){
    130a:	80 e4       	ldi	r24, 0x40	; 64
    130c:	c8 16       	cp	r12, r24
    130e:	61 f0       	breq	.+24     	; 0x1328 <timer2Init+0x72>
    1310:	80 e8       	ldi	r24, 0x80	; 128
    1312:	c8 16       	cp	r12, r24
    1314:	91 f0       	breq	.+36     	; 0x133a <timer2Init+0x84>
    1316:	cc 20       	and	r12, r12
    1318:	d9 f4       	brne	.+54     	; 0x1350 <timer2Init+0x9a>
case  T2_POLLING:
pooling_2=0;
    131a:	10 92 72 00 	sts	0x0072, r1
G_interrupt_Disable();
    131e:	0e 94 55 01 	call	0x2aa	; 0x2aa <G_interrupt_Disable>
TIMSK &= T2_POLLING;
    1322:	89 b7       	in	r24, 0x39	; 57
    1324:	19 be       	out	0x39, r1	; 57
break;
    1326:	14 c0       	rjmp	.+40     	; 0x1350 <timer2Init+0x9a>
case T2_INTERRUPT_NORMAL :
{
	pooling_2=1;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	80 93 72 00 	sts	0x0072, r24
G_interrupt_Enable();
    132e:	0e 94 45 01 	call	0x28a	; 0x28a <G_interrupt_Enable>
TIMSK |= T2_INTERRUPT_NORMAL;
    1332:	89 b7       	in	r24, 0x39	; 57
    1334:	80 64       	ori	r24, 0x40	; 64
    1336:	89 bf       	out	0x39, r24	; 57
break;
    1338:	0b c0       	rjmp	.+22     	; 0x1350 <timer2Init+0x9a>
}
case T2_INTERRUPT_CMP:
{
	pooling_2=1;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	80 93 72 00 	sts	0x0072, r24
G_interrupt_Enable();
    1340:	0e 94 45 01 	call	0x28a	; 0x28a <G_interrupt_Enable>
//SET_BIT(SREG,7);
TIMSK |=T2_INTERRUPT_NORMAL;
    1344:	89 b7       	in	r24, 0x39	; 57
    1346:	80 64       	ori	r24, 0x40	; 64
    1348:	89 bf       	out	0x39, r24	; 57
TIMSK |=T2_INTERRUPT_CMP;
    134a:	89 b7       	in	r24, 0x39	; 57
    134c:	80 68       	ori	r24, 0x80	; 128
    134e:	89 bf       	out	0x39, r24	; 57

}



}
    1350:	0f 91       	pop	r16
    1352:	cf 90       	pop	r12
    1354:	08 95       	ret

00001356 <timer2DelayMs>:
		Prescalercounst=1;
		break;

		}*/
void timer2DelayMs(uint16_t u16_delay_in_ms)
{
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	00 d0       	rcall	.+0      	; 0x1360 <timer2DelayMs+0xa>
    1360:	00 d0       	rcall	.+0      	; 0x1362 <timer2DelayMs+0xc>
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	8c 01       	movw	r16, r24
	volatile uint16_t count=0;
    1368:	1a 82       	std	Y+2, r1	; 0x02
    136a:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t Prescalercounst=0,set_timer2=0;
    136c:	1b 82       	std	Y+3, r1	; 0x03
    136e:	1c 82       	std	Y+4, r1	; 0x04
	switch(Prescaler_Value2)
    1370:	80 91 71 00 	lds	r24, 0x0071
    1374:	84 30       	cpi	r24, 0x04	; 4
    1376:	f9 f0       	breq	.+62     	; 0x13b6 <timer2DelayMs+0x60>
    1378:	85 30       	cpi	r24, 0x05	; 5
    137a:	38 f4       	brcc	.+14     	; 0x138a <timer2DelayMs+0x34>
    137c:	82 30       	cpi	r24, 0x02	; 2
    137e:	89 f0       	breq	.+34     	; 0x13a2 <timer2DelayMs+0x4c>
    1380:	83 30       	cpi	r24, 0x03	; 3
    1382:	a0 f4       	brcc	.+40     	; 0x13ac <timer2DelayMs+0x56>
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	51 f5       	brne	.+84     	; 0x13dc <timer2DelayMs+0x86>
    1388:	07 c0       	rjmp	.+14     	; 0x1398 <timer2DelayMs+0x42>
    138a:	86 30       	cpi	r24, 0x06	; 6
    138c:	f1 f0       	breq	.+60     	; 0x13ca <timer2DelayMs+0x74>
    138e:	86 30       	cpi	r24, 0x06	; 6
    1390:	b8 f0       	brcs	.+46     	; 0x13c0 <timer2DelayMs+0x6a>
    1392:	87 30       	cpi	r24, 0x07	; 7
    1394:	19 f5       	brne	.+70     	; 0x13dc <timer2DelayMs+0x86>
    1396:	1e c0       	rjmp	.+60     	; 0x13d4 <timer2DelayMs+0x7e>
	{
		case T2_PRESCALER_NO:{
		Prescalercounst=58;
    1398:	8a e3       	ldi	r24, 0x3A	; 58
    139a:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=10;
    139c:	8a e0       	ldi	r24, 0x0A	; 10
    139e:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    13a0:	1d c0       	rjmp	.+58     	; 0x13dc <timer2DelayMs+0x86>
		case T2_PRESCALER_8:
		{Prescalercounst=8;
    13a2:	88 e0       	ldi	r24, 0x08	; 8
    13a4:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=12;
    13a6:	8c e0       	ldi	r24, 0x0C	; 12
    13a8:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    13aa:	18 c0       	rjmp	.+48     	; 0x13dc <timer2DelayMs+0x86>
		case T2_PRESCALER_32:
		{Prescalercounst=2;
    13ac:	82 e0       	ldi	r24, 0x02	; 2
    13ae:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=8;
    13b0:	88 e0       	ldi	r24, 0x08	; 8
    13b2:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    13b4:	13 c0       	rjmp	.+38     	; 0x13dc <timer2DelayMs+0x86>
		case T2_PRESCALER_64:
		{Prescalercounst=1;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=6;
    13ba:	86 e0       	ldi	r24, 0x06	; 6
    13bc:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    13be:	0e c0       	rjmp	.+28     	; 0x13dc <timer2DelayMs+0x86>
		case T2_PRESCALER_128:
		{Prescalercounst=1;
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=131;
    13c4:	83 e8       	ldi	r24, 0x83	; 131
    13c6:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    13c8:	09 c0       	rjmp	.+18     	; 0x13dc <timer2DelayMs+0x86>
		case T2_PRESCALER_256:
		{Prescalercounst=1;
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=194;
    13ce:	82 ec       	ldi	r24, 0xC2	; 194
    13d0:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    13d2:	04 c0       	rjmp	.+8      	; 0x13dc <timer2DelayMs+0x86>
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=240;
    13d8:	80 ef       	ldi	r24, 0xF0	; 240
    13da:	8c 83       	std	Y+4, r24	; 0x04
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
    13dc:	1a 82       	std	Y+2, r1	; 0x02
    13de:	19 82       	std	Y+1, r1	; 0x01
    13e0:	2b 81       	ldd	r18, Y+3	; 0x03
    13e2:	49 81       	ldd	r20, Y+1	; 0x01
    13e4:	5a 81       	ldd	r21, Y+2	; 0x02
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	02 9f       	mul	r16, r18
    13ea:	c0 01       	movw	r24, r0
    13ec:	03 9f       	mul	r16, r19
    13ee:	90 0d       	add	r25, r0
    13f0:	12 9f       	mul	r17, r18
    13f2:	90 0d       	add	r25, r0
    13f4:	11 24       	eor	r1, r1
    13f6:	48 17       	cp	r20, r24
    13f8:	59 07       	cpc	r21, r25
    13fa:	e0 f4       	brcc	.+56     	; 0x1434 <timer2DelayMs+0xde>
	{
		timer2Set(set_timer2);//10 for no prescaler....12 for 8 prescaler .... 8 for 32 prescaler ....6 for prescaler 64 .....
    13fc:	8c 81       	ldd	r24, Y+4	; 0x04
    13fe:	0e 94 4a 09 	call	0x1294	; 0x1294 <timer2Set>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR & 0x40)==0);
    1402:	08 b6       	in	r0, 0x38	; 56
    1404:	06 fe       	sbrs	r0, 6
    1406:	fd cf       	rjmp	.-6      	; 0x1402 <timer2DelayMs+0xac>
		TIFR |=0x40;
    1408:	88 b7       	in	r24, 0x38	; 56
    140a:	80 64       	ori	r24, 0x40	; 64
    140c:	88 bf       	out	0x38, r24	; 56
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
		set_timer2=240;
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	9a 81       	ldd	r25, Y+2	; 0x02
    1412:	01 96       	adiw	r24, 0x01	; 1
    1414:	9a 83       	std	Y+2, r25	; 0x02
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	2b 81       	ldd	r18, Y+3	; 0x03
    141a:	49 81       	ldd	r20, Y+1	; 0x01
    141c:	5a 81       	ldd	r21, Y+2	; 0x02
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	02 9f       	mul	r16, r18
    1422:	c0 01       	movw	r24, r0
    1424:	03 9f       	mul	r16, r19
    1426:	90 0d       	add	r25, r0
    1428:	12 9f       	mul	r17, r18
    142a:	90 0d       	add	r25, r0
    142c:	11 24       	eor	r1, r1
    142e:	48 17       	cp	r20, r24
    1430:	59 07       	cpc	r21, r25
    1432:	20 f3       	brcs	.-56     	; 0x13fc <timer2DelayMs+0xa6>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR & 0x40)==0);
		TIFR |=0x40;

	}
}
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	08 95       	ret

00001446 <timer2DelayUs>:

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
    1446:	cf 92       	push	r12
    1448:	df 92       	push	r13
    144a:	ef 92       	push	r14
    144c:	ff 92       	push	r15
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	00 d0       	rcall	.+0      	; 0x1454 <timer2DelayUs+0xe>
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	6b 01       	movw	r12, r22
    145a:	7c 01       	movw	r14, r24
	volatile uint16_t count =0;
    145c:	1a 82       	std	Y+2, r1	; 0x02
    145e:	19 82       	std	Y+1, r1	; 0x01
	for (count=0;count<u16_delay_in_us;count++)
    1460:	1a 82       	std	Y+2, r1	; 0x02
    1462:	19 82       	std	Y+1, r1	; 0x01
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	9a 81       	ldd	r25, Y+2	; 0x02
    1468:	a0 e0       	ldi	r26, 0x00	; 0
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	8c 15       	cp	r24, r12
    146e:	9d 05       	cpc	r25, r13
    1470:	ae 05       	cpc	r26, r14
    1472:	bf 05       	cpc	r27, r15
    1474:	b8 f4       	brcc	.+46     	; 0x14a4 <timer2DelayUs+0x5e>
	{
		timer2Set(254);//254 for no prescaler
    1476:	8e ef       	ldi	r24, 0xFE	; 254
    1478:	0e 94 4a 09 	call	0x1294	; 0x1294 <timer2Set>
		while ((TIFR & 0x40)==0);
    147c:	08 b6       	in	r0, 0x38	; 56
    147e:	06 fe       	sbrs	r0, 6
    1480:	fd cf       	rjmp	.-6      	; 0x147c <timer2DelayUs+0x36>
		TIFR |=0x40;
    1482:	88 b7       	in	r24, 0x38	; 56
    1484:	80 64       	ori	r24, 0x40	; 64
    1486:	88 bf       	out	0x38, r24	; 56

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
	volatile uint16_t count =0;
	for (count=0;count<u16_delay_in_us;count++)
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	9a 81       	ldd	r25, Y+2	; 0x02
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	9a 83       	std	Y+2, r25	; 0x02
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	9a 81       	ldd	r25, Y+2	; 0x02
    1496:	a0 e0       	ldi	r26, 0x00	; 0
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	8c 15       	cp	r24, r12
    149c:	9d 05       	cpc	r25, r13
    149e:	ae 05       	cpc	r26, r14
    14a0:	bf 05       	cpc	r27, r15
    14a2:	48 f3       	brcs	.-46     	; 0x1476 <timer2DelayUs+0x30>
		while ((TIFR & 0x40)==0);
		TIFR |=0x40;

	}

}
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	ff 90       	pop	r15
    14ae:	ef 90       	pop	r14
    14b0:	df 90       	pop	r13
    14b2:	cf 90       	pop	r12
    14b4:	08 95       	ret

000014b6 <timer2SwPWM>:
/**
* Description:
* @param dutyCycle
*/
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    14b6:	cf 92       	push	r12
    14b8:	df 92       	push	r13
    14ba:	ef 92       	push	r14
    14bc:	ff 92       	push	r15
    14be:	cf 93       	push	r28
    14c0:	c8 2f       	mov	r28, r24

float dutyReal;
pwm_time_on=MAX_HOLD;
    14c2:	8f ef       	ldi	r24, 0xFF	; 255
    14c4:	80 93 6f 00 	sts	0x006F, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
    14c8:	60 91 6f 00 	lds	r22, 0x006F
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 8d 0b 	call	0x171a	; 0x171a <__floatunsisf>
    14d6:	6b 01       	movw	r12, r22
    14d8:	7c 01       	movw	r14, r24
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{

float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
    14da:	6c 2f       	mov	r22, r28
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 8d 0b 	call	0x171a	; 0x171a <__floatunsisf>
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	48 ec       	ldi	r20, 0xC8	; 200
    14ec:	52 e4       	ldi	r21, 0x42	; 66
    14ee:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__divsf3>
    14f2:	9b 01       	movw	r18, r22
    14f4:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
    14f6:	c7 01       	movw	r24, r14
    14f8:	b6 01       	movw	r22, r12
    14fa:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__mulsf3>
    14fe:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__fixunssfsi>
    1502:	60 93 6f 00 	sts	0x006F, r22
switch(pooling_2)
    1506:	80 91 72 00 	lds	r24, 0x0072
    150a:	88 23       	and	r24, r24
    150c:	19 f0       	breq	.+6      	; 0x1514 <timer2SwPWM+0x5e>
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	29 f5       	brne	.+74     	; 0x155c <timer2SwPWM+0xa6>
    1512:	1f c0       	rjmp	.+62     	; 0x1552 <timer2SwPWM+0x9c>
{
	case 0:
	{
		timer2Start();
    1514:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
		timer2Set(pwm_time_on);
    1518:	80 91 6f 00 	lds	r24, 0x006F
    151c:	0e 94 4a 09 	call	0x1294	; 0x1294 <timer2Set>
		//freq 50KHZ is the Max frequency possible
		while ((TIFR&0x04)==0);
    1520:	08 b6       	in	r0, 0x38	; 56
    1522:	02 fe       	sbrs	r0, 2
    1524:	fd cf       	rjmp	.-6      	; 0x1520 <timer2SwPWM+0x6a>
		TIFR |=0x04;
    1526:	88 b7       	in	r24, 0x38	; 56
    1528:	84 60       	ori	r24, 0x04	; 4
    152a:	88 bf       	out	0x38, r24	; 56
		PORTC_DATA |=0xff;
    152c:	85 b3       	in	r24, 0x15	; 21
    152e:	8f ef       	ldi	r24, 0xFF	; 255
    1530:	85 bb       	out	0x15, r24	; 21
		timer2Start();
    1532:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
		timer2Set(MAX_HOLD-pwm_time_on);
    1536:	80 91 6f 00 	lds	r24, 0x006F
    153a:	80 95       	com	r24
    153c:	0e 94 4a 09 	call	0x1294	; 0x1294 <timer2Set>
		//freq
		while ((TIFR & 0x04)==0);
    1540:	08 b6       	in	r0, 0x38	; 56
    1542:	02 fe       	sbrs	r0, 2
    1544:	fd cf       	rjmp	.-6      	; 0x1540 <timer2SwPWM+0x8a>
		TIFR |=0x04;
    1546:	88 b7       	in	r24, 0x38	; 56
    1548:	84 60       	ori	r24, 0x04	; 4
    154a:	88 bf       	out	0x38, r24	; 56
		PORTC_DATA &=0x00;
    154c:	85 b3       	in	r24, 0x15	; 21
    154e:	15 ba       	out	0x15, r1	; 21

		break;
    1550:	05 c0       	rjmp	.+10     	; 0x155c <timer2SwPWM+0xa6>
	}
	case 1:
	{
		timer2Start();
    1552:	0e 94 4e 09 	call	0x129c	; 0x129c <timer2Start>
		OCR2=pwm_time_on;
    1556:	80 91 6f 00 	lds	r24, 0x006F
    155a:	83 bd       	out	0x23, r24	; 35
	}

}


}
    155c:	cf 91       	pop	r28
    155e:	ff 90       	pop	r15
    1560:	ef 90       	pop	r14
    1562:	df 90       	pop	r13
    1564:	cf 90       	pop	r12
    1566:	08 95       	ret

00001568 <Timer2_interrupt_COMP_routine>:
void Timer2_interrupt_COMP_routine(void)
{



}
    1568:	08 95       	ret

0000156a <Timer2_interrupt_routine>:
void Timer2_interrupt_routine(void)
{


}
    156a:	08 95       	ret

0000156c <__ucmpdi2>:
    156c:	a0 e1       	ldi	r26, 0x10	; 16
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	ec eb       	ldi	r30, 0xBC	; 188
    1572:	fa e0       	ldi	r31, 0x0A	; 10
    1574:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <__prologue_saves__+0x10>
    1578:	29 87       	std	Y+9, r18	; 0x09
    157a:	3a 87       	std	Y+10, r19	; 0x0a
    157c:	4b 87       	std	Y+11, r20	; 0x0b
    157e:	5c 87       	std	Y+12, r21	; 0x0c
    1580:	6d 87       	std	Y+13, r22	; 0x0d
    1582:	7e 87       	std	Y+14, r23	; 0x0e
    1584:	8f 87       	std	Y+15, r24	; 0x0f
    1586:	98 8b       	std	Y+16, r25	; 0x10
    1588:	a9 82       	std	Y+1, r10	; 0x01
    158a:	ba 82       	std	Y+2, r11	; 0x02
    158c:	cb 82       	std	Y+3, r12	; 0x03
    158e:	dc 82       	std	Y+4, r13	; 0x04
    1590:	ed 82       	std	Y+5, r14	; 0x05
    1592:	fe 82       	std	Y+6, r15	; 0x06
    1594:	0f 83       	std	Y+7, r16	; 0x07
    1596:	18 87       	std	Y+8, r17	; 0x08
    1598:	4d 85       	ldd	r20, Y+13	; 0x0d
    159a:	5e 85       	ldd	r21, Y+14	; 0x0e
    159c:	6f 85       	ldd	r22, Y+15	; 0x0f
    159e:	78 89       	ldd	r23, Y+16	; 0x10
    15a0:	8d 81       	ldd	r24, Y+5	; 0x05
    15a2:	9e 81       	ldd	r25, Y+6	; 0x06
    15a4:	af 81       	ldd	r26, Y+7	; 0x07
    15a6:	b8 85       	ldd	r27, Y+8	; 0x08
    15a8:	48 17       	cp	r20, r24
    15aa:	59 07       	cpc	r21, r25
    15ac:	6a 07       	cpc	r22, r26
    15ae:	7b 07       	cpc	r23, r27
    15b0:	c8 f0       	brcs	.+50     	; 0x15e4 <__ucmpdi2+0x78>
    15b2:	84 17       	cp	r24, r20
    15b4:	95 07       	cpc	r25, r21
    15b6:	a6 07       	cpc	r26, r22
    15b8:	b7 07       	cpc	r27, r23
    15ba:	90 f0       	brcs	.+36     	; 0x15e0 <__ucmpdi2+0x74>
    15bc:	49 85       	ldd	r20, Y+9	; 0x09
    15be:	5a 85       	ldd	r21, Y+10	; 0x0a
    15c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	9a 81       	ldd	r25, Y+2	; 0x02
    15c8:	ab 81       	ldd	r26, Y+3	; 0x03
    15ca:	bc 81       	ldd	r27, Y+4	; 0x04
    15cc:	48 17       	cp	r20, r24
    15ce:	59 07       	cpc	r21, r25
    15d0:	6a 07       	cpc	r22, r26
    15d2:	7b 07       	cpc	r23, r27
    15d4:	38 f0       	brcs	.+14     	; 0x15e4 <__ucmpdi2+0x78>
    15d6:	84 17       	cp	r24, r20
    15d8:	95 07       	cpc	r25, r21
    15da:	a6 07       	cpc	r26, r22
    15dc:	b7 07       	cpc	r27, r23
    15de:	20 f4       	brcc	.+8      	; 0x15e8 <__ucmpdi2+0x7c>
    15e0:	82 e0       	ldi	r24, 0x02	; 2
    15e2:	03 c0       	rjmp	.+6      	; 0x15ea <__ucmpdi2+0x7e>
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	01 c0       	rjmp	.+2      	; 0x15ea <__ucmpdi2+0x7e>
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	60 96       	adiw	r28, 0x10	; 16
    15ec:	ea e0       	ldi	r30, 0x0A	; 10
    15ee:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__epilogue_restores__+0x10>

000015f2 <__divsf3>:
    15f2:	0c d0       	rcall	.+24     	; 0x160c <__divsf3x>
    15f4:	e6 c0       	rjmp	.+460    	; 0x17c2 <__fp_round>
    15f6:	de d0       	rcall	.+444    	; 0x17b4 <__fp_pscB>
    15f8:	40 f0       	brcs	.+16     	; 0x160a <__divsf3+0x18>
    15fa:	d5 d0       	rcall	.+426    	; 0x17a6 <__fp_pscA>
    15fc:	30 f0       	brcs	.+12     	; 0x160a <__divsf3+0x18>
    15fe:	21 f4       	brne	.+8      	; 0x1608 <__divsf3+0x16>
    1600:	5f 3f       	cpi	r21, 0xFF	; 255
    1602:	19 f0       	breq	.+6      	; 0x160a <__divsf3+0x18>
    1604:	c7 c0       	rjmp	.+398    	; 0x1794 <__fp_inf>
    1606:	51 11       	cpse	r21, r1
    1608:	10 c1       	rjmp	.+544    	; 0x182a <__fp_szero>
    160a:	ca c0       	rjmp	.+404    	; 0x17a0 <__fp_nan>

0000160c <__divsf3x>:
    160c:	eb d0       	rcall	.+470    	; 0x17e4 <__fp_split3>
    160e:	98 f3       	brcs	.-26     	; 0x15f6 <__divsf3+0x4>

00001610 <__divsf3_pse>:
    1610:	99 23       	and	r25, r25
    1612:	c9 f3       	breq	.-14     	; 0x1606 <__divsf3+0x14>
    1614:	55 23       	and	r21, r21
    1616:	b1 f3       	breq	.-20     	; 0x1604 <__divsf3+0x12>
    1618:	95 1b       	sub	r25, r21
    161a:	55 0b       	sbc	r21, r21
    161c:	bb 27       	eor	r27, r27
    161e:	aa 27       	eor	r26, r26
    1620:	62 17       	cp	r22, r18
    1622:	73 07       	cpc	r23, r19
    1624:	84 07       	cpc	r24, r20
    1626:	38 f0       	brcs	.+14     	; 0x1636 <__divsf3_pse+0x26>
    1628:	9f 5f       	subi	r25, 0xFF	; 255
    162a:	5f 4f       	sbci	r21, 0xFF	; 255
    162c:	22 0f       	add	r18, r18
    162e:	33 1f       	adc	r19, r19
    1630:	44 1f       	adc	r20, r20
    1632:	aa 1f       	adc	r26, r26
    1634:	a9 f3       	breq	.-22     	; 0x1620 <__divsf3_pse+0x10>
    1636:	33 d0       	rcall	.+102    	; 0x169e <__divsf3_pse+0x8e>
    1638:	0e 2e       	mov	r0, r30
    163a:	3a f0       	brmi	.+14     	; 0x164a <__divsf3_pse+0x3a>
    163c:	e0 e8       	ldi	r30, 0x80	; 128
    163e:	30 d0       	rcall	.+96     	; 0x16a0 <__divsf3_pse+0x90>
    1640:	91 50       	subi	r25, 0x01	; 1
    1642:	50 40       	sbci	r21, 0x00	; 0
    1644:	e6 95       	lsr	r30
    1646:	00 1c       	adc	r0, r0
    1648:	ca f7       	brpl	.-14     	; 0x163c <__divsf3_pse+0x2c>
    164a:	29 d0       	rcall	.+82     	; 0x169e <__divsf3_pse+0x8e>
    164c:	fe 2f       	mov	r31, r30
    164e:	27 d0       	rcall	.+78     	; 0x169e <__divsf3_pse+0x8e>
    1650:	66 0f       	add	r22, r22
    1652:	77 1f       	adc	r23, r23
    1654:	88 1f       	adc	r24, r24
    1656:	bb 1f       	adc	r27, r27
    1658:	26 17       	cp	r18, r22
    165a:	37 07       	cpc	r19, r23
    165c:	48 07       	cpc	r20, r24
    165e:	ab 07       	cpc	r26, r27
    1660:	b0 e8       	ldi	r27, 0x80	; 128
    1662:	09 f0       	breq	.+2      	; 0x1666 <__divsf3_pse+0x56>
    1664:	bb 0b       	sbc	r27, r27
    1666:	80 2d       	mov	r24, r0
    1668:	bf 01       	movw	r22, r30
    166a:	ff 27       	eor	r31, r31
    166c:	93 58       	subi	r25, 0x83	; 131
    166e:	5f 4f       	sbci	r21, 0xFF	; 255
    1670:	2a f0       	brmi	.+10     	; 0x167c <__divsf3_pse+0x6c>
    1672:	9e 3f       	cpi	r25, 0xFE	; 254
    1674:	51 05       	cpc	r21, r1
    1676:	68 f0       	brcs	.+26     	; 0x1692 <__divsf3_pse+0x82>
    1678:	8d c0       	rjmp	.+282    	; 0x1794 <__fp_inf>
    167a:	d7 c0       	rjmp	.+430    	; 0x182a <__fp_szero>
    167c:	5f 3f       	cpi	r21, 0xFF	; 255
    167e:	ec f3       	brlt	.-6      	; 0x167a <__divsf3_pse+0x6a>
    1680:	98 3e       	cpi	r25, 0xE8	; 232
    1682:	dc f3       	brlt	.-10     	; 0x167a <__divsf3_pse+0x6a>
    1684:	86 95       	lsr	r24
    1686:	77 95       	ror	r23
    1688:	67 95       	ror	r22
    168a:	b7 95       	ror	r27
    168c:	f7 95       	ror	r31
    168e:	9f 5f       	subi	r25, 0xFF	; 255
    1690:	c9 f7       	brne	.-14     	; 0x1684 <__divsf3_pse+0x74>
    1692:	88 0f       	add	r24, r24
    1694:	91 1d       	adc	r25, r1
    1696:	96 95       	lsr	r25
    1698:	87 95       	ror	r24
    169a:	97 f9       	bld	r25, 7
    169c:	08 95       	ret
    169e:	e1 e0       	ldi	r30, 0x01	; 1
    16a0:	66 0f       	add	r22, r22
    16a2:	77 1f       	adc	r23, r23
    16a4:	88 1f       	adc	r24, r24
    16a6:	bb 1f       	adc	r27, r27
    16a8:	62 17       	cp	r22, r18
    16aa:	73 07       	cpc	r23, r19
    16ac:	84 07       	cpc	r24, r20
    16ae:	ba 07       	cpc	r27, r26
    16b0:	20 f0       	brcs	.+8      	; 0x16ba <__divsf3_pse+0xaa>
    16b2:	62 1b       	sub	r22, r18
    16b4:	73 0b       	sbc	r23, r19
    16b6:	84 0b       	sbc	r24, r20
    16b8:	ba 0b       	sbc	r27, r26
    16ba:	ee 1f       	adc	r30, r30
    16bc:	88 f7       	brcc	.-30     	; 0x16a0 <__divsf3_pse+0x90>
    16be:	e0 95       	com	r30
    16c0:	08 95       	ret

000016c2 <__fixunssfsi>:
    16c2:	98 d0       	rcall	.+304    	; 0x17f4 <__fp_splitA>
    16c4:	88 f0       	brcs	.+34     	; 0x16e8 <__fixunssfsi+0x26>
    16c6:	9f 57       	subi	r25, 0x7F	; 127
    16c8:	90 f0       	brcs	.+36     	; 0x16ee <__fixunssfsi+0x2c>
    16ca:	b9 2f       	mov	r27, r25
    16cc:	99 27       	eor	r25, r25
    16ce:	b7 51       	subi	r27, 0x17	; 23
    16d0:	a0 f0       	brcs	.+40     	; 0x16fa <__fixunssfsi+0x38>
    16d2:	d1 f0       	breq	.+52     	; 0x1708 <__fixunssfsi+0x46>
    16d4:	66 0f       	add	r22, r22
    16d6:	77 1f       	adc	r23, r23
    16d8:	88 1f       	adc	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	1a f0       	brmi	.+6      	; 0x16e4 <__fixunssfsi+0x22>
    16de:	ba 95       	dec	r27
    16e0:	c9 f7       	brne	.-14     	; 0x16d4 <__fixunssfsi+0x12>
    16e2:	12 c0       	rjmp	.+36     	; 0x1708 <__fixunssfsi+0x46>
    16e4:	b1 30       	cpi	r27, 0x01	; 1
    16e6:	81 f0       	breq	.+32     	; 0x1708 <__fixunssfsi+0x46>
    16e8:	9f d0       	rcall	.+318    	; 0x1828 <__fp_zero>
    16ea:	b1 e0       	ldi	r27, 0x01	; 1
    16ec:	08 95       	ret
    16ee:	9c c0       	rjmp	.+312    	; 0x1828 <__fp_zero>
    16f0:	67 2f       	mov	r22, r23
    16f2:	78 2f       	mov	r23, r24
    16f4:	88 27       	eor	r24, r24
    16f6:	b8 5f       	subi	r27, 0xF8	; 248
    16f8:	39 f0       	breq	.+14     	; 0x1708 <__fixunssfsi+0x46>
    16fa:	b9 3f       	cpi	r27, 0xF9	; 249
    16fc:	cc f3       	brlt	.-14     	; 0x16f0 <__fixunssfsi+0x2e>
    16fe:	86 95       	lsr	r24
    1700:	77 95       	ror	r23
    1702:	67 95       	ror	r22
    1704:	b3 95       	inc	r27
    1706:	d9 f7       	brne	.-10     	; 0x16fe <__fixunssfsi+0x3c>
    1708:	3e f4       	brtc	.+14     	; 0x1718 <__fixunssfsi+0x56>
    170a:	90 95       	com	r25
    170c:	80 95       	com	r24
    170e:	70 95       	com	r23
    1710:	61 95       	neg	r22
    1712:	7f 4f       	sbci	r23, 0xFF	; 255
    1714:	8f 4f       	sbci	r24, 0xFF	; 255
    1716:	9f 4f       	sbci	r25, 0xFF	; 255
    1718:	08 95       	ret

0000171a <__floatunsisf>:
    171a:	e8 94       	clt
    171c:	09 c0       	rjmp	.+18     	; 0x1730 <__floatsisf+0x12>

0000171e <__floatsisf>:
    171e:	97 fb       	bst	r25, 7
    1720:	3e f4       	brtc	.+14     	; 0x1730 <__floatsisf+0x12>
    1722:	90 95       	com	r25
    1724:	80 95       	com	r24
    1726:	70 95       	com	r23
    1728:	61 95       	neg	r22
    172a:	7f 4f       	sbci	r23, 0xFF	; 255
    172c:	8f 4f       	sbci	r24, 0xFF	; 255
    172e:	9f 4f       	sbci	r25, 0xFF	; 255
    1730:	99 23       	and	r25, r25
    1732:	a9 f0       	breq	.+42     	; 0x175e <__floatsisf+0x40>
    1734:	f9 2f       	mov	r31, r25
    1736:	96 e9       	ldi	r25, 0x96	; 150
    1738:	bb 27       	eor	r27, r27
    173a:	93 95       	inc	r25
    173c:	f6 95       	lsr	r31
    173e:	87 95       	ror	r24
    1740:	77 95       	ror	r23
    1742:	67 95       	ror	r22
    1744:	b7 95       	ror	r27
    1746:	f1 11       	cpse	r31, r1
    1748:	f8 cf       	rjmp	.-16     	; 0x173a <__floatsisf+0x1c>
    174a:	fa f4       	brpl	.+62     	; 0x178a <__floatsisf+0x6c>
    174c:	bb 0f       	add	r27, r27
    174e:	11 f4       	brne	.+4      	; 0x1754 <__floatsisf+0x36>
    1750:	60 ff       	sbrs	r22, 0
    1752:	1b c0       	rjmp	.+54     	; 0x178a <__floatsisf+0x6c>
    1754:	6f 5f       	subi	r22, 0xFF	; 255
    1756:	7f 4f       	sbci	r23, 0xFF	; 255
    1758:	8f 4f       	sbci	r24, 0xFF	; 255
    175a:	9f 4f       	sbci	r25, 0xFF	; 255
    175c:	16 c0       	rjmp	.+44     	; 0x178a <__floatsisf+0x6c>
    175e:	88 23       	and	r24, r24
    1760:	11 f0       	breq	.+4      	; 0x1766 <__floatsisf+0x48>
    1762:	96 e9       	ldi	r25, 0x96	; 150
    1764:	11 c0       	rjmp	.+34     	; 0x1788 <__floatsisf+0x6a>
    1766:	77 23       	and	r23, r23
    1768:	21 f0       	breq	.+8      	; 0x1772 <__floatsisf+0x54>
    176a:	9e e8       	ldi	r25, 0x8E	; 142
    176c:	87 2f       	mov	r24, r23
    176e:	76 2f       	mov	r23, r22
    1770:	05 c0       	rjmp	.+10     	; 0x177c <__floatsisf+0x5e>
    1772:	66 23       	and	r22, r22
    1774:	71 f0       	breq	.+28     	; 0x1792 <__floatsisf+0x74>
    1776:	96 e8       	ldi	r25, 0x86	; 134
    1778:	86 2f       	mov	r24, r22
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	60 e0       	ldi	r22, 0x00	; 0
    177e:	2a f0       	brmi	.+10     	; 0x178a <__floatsisf+0x6c>
    1780:	9a 95       	dec	r25
    1782:	66 0f       	add	r22, r22
    1784:	77 1f       	adc	r23, r23
    1786:	88 1f       	adc	r24, r24
    1788:	da f7       	brpl	.-10     	; 0x1780 <__floatsisf+0x62>
    178a:	88 0f       	add	r24, r24
    178c:	96 95       	lsr	r25
    178e:	87 95       	ror	r24
    1790:	97 f9       	bld	r25, 7
    1792:	08 95       	ret

00001794 <__fp_inf>:
    1794:	97 f9       	bld	r25, 7
    1796:	9f 67       	ori	r25, 0x7F	; 127
    1798:	80 e8       	ldi	r24, 0x80	; 128
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	08 95       	ret

000017a0 <__fp_nan>:
    17a0:	9f ef       	ldi	r25, 0xFF	; 255
    17a2:	80 ec       	ldi	r24, 0xC0	; 192
    17a4:	08 95       	ret

000017a6 <__fp_pscA>:
    17a6:	00 24       	eor	r0, r0
    17a8:	0a 94       	dec	r0
    17aa:	16 16       	cp	r1, r22
    17ac:	17 06       	cpc	r1, r23
    17ae:	18 06       	cpc	r1, r24
    17b0:	09 06       	cpc	r0, r25
    17b2:	08 95       	ret

000017b4 <__fp_pscB>:
    17b4:	00 24       	eor	r0, r0
    17b6:	0a 94       	dec	r0
    17b8:	12 16       	cp	r1, r18
    17ba:	13 06       	cpc	r1, r19
    17bc:	14 06       	cpc	r1, r20
    17be:	05 06       	cpc	r0, r21
    17c0:	08 95       	ret

000017c2 <__fp_round>:
    17c2:	09 2e       	mov	r0, r25
    17c4:	03 94       	inc	r0
    17c6:	00 0c       	add	r0, r0
    17c8:	11 f4       	brne	.+4      	; 0x17ce <__fp_round+0xc>
    17ca:	88 23       	and	r24, r24
    17cc:	52 f0       	brmi	.+20     	; 0x17e2 <__fp_round+0x20>
    17ce:	bb 0f       	add	r27, r27
    17d0:	40 f4       	brcc	.+16     	; 0x17e2 <__fp_round+0x20>
    17d2:	bf 2b       	or	r27, r31
    17d4:	11 f4       	brne	.+4      	; 0x17da <__fp_round+0x18>
    17d6:	60 ff       	sbrs	r22, 0
    17d8:	04 c0       	rjmp	.+8      	; 0x17e2 <__fp_round+0x20>
    17da:	6f 5f       	subi	r22, 0xFF	; 255
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	8f 4f       	sbci	r24, 0xFF	; 255
    17e0:	9f 4f       	sbci	r25, 0xFF	; 255
    17e2:	08 95       	ret

000017e4 <__fp_split3>:
    17e4:	57 fd       	sbrc	r21, 7
    17e6:	90 58       	subi	r25, 0x80	; 128
    17e8:	44 0f       	add	r20, r20
    17ea:	55 1f       	adc	r21, r21
    17ec:	59 f0       	breq	.+22     	; 0x1804 <__fp_splitA+0x10>
    17ee:	5f 3f       	cpi	r21, 0xFF	; 255
    17f0:	71 f0       	breq	.+28     	; 0x180e <__fp_splitA+0x1a>
    17f2:	47 95       	ror	r20

000017f4 <__fp_splitA>:
    17f4:	88 0f       	add	r24, r24
    17f6:	97 fb       	bst	r25, 7
    17f8:	99 1f       	adc	r25, r25
    17fa:	61 f0       	breq	.+24     	; 0x1814 <__fp_splitA+0x20>
    17fc:	9f 3f       	cpi	r25, 0xFF	; 255
    17fe:	79 f0       	breq	.+30     	; 0x181e <__fp_splitA+0x2a>
    1800:	87 95       	ror	r24
    1802:	08 95       	ret
    1804:	12 16       	cp	r1, r18
    1806:	13 06       	cpc	r1, r19
    1808:	14 06       	cpc	r1, r20
    180a:	55 1f       	adc	r21, r21
    180c:	f2 cf       	rjmp	.-28     	; 0x17f2 <__fp_split3+0xe>
    180e:	46 95       	lsr	r20
    1810:	f1 df       	rcall	.-30     	; 0x17f4 <__fp_splitA>
    1812:	08 c0       	rjmp	.+16     	; 0x1824 <__fp_splitA+0x30>
    1814:	16 16       	cp	r1, r22
    1816:	17 06       	cpc	r1, r23
    1818:	18 06       	cpc	r1, r24
    181a:	99 1f       	adc	r25, r25
    181c:	f1 cf       	rjmp	.-30     	; 0x1800 <__fp_splitA+0xc>
    181e:	86 95       	lsr	r24
    1820:	71 05       	cpc	r23, r1
    1822:	61 05       	cpc	r22, r1
    1824:	08 94       	sec
    1826:	08 95       	ret

00001828 <__fp_zero>:
    1828:	e8 94       	clt

0000182a <__fp_szero>:
    182a:	bb 27       	eor	r27, r27
    182c:	66 27       	eor	r22, r22
    182e:	77 27       	eor	r23, r23
    1830:	cb 01       	movw	r24, r22
    1832:	97 f9       	bld	r25, 7
    1834:	08 95       	ret

00001836 <__mulsf3>:
    1836:	0b d0       	rcall	.+22     	; 0x184e <__mulsf3x>
    1838:	c4 cf       	rjmp	.-120    	; 0x17c2 <__fp_round>
    183a:	b5 df       	rcall	.-150    	; 0x17a6 <__fp_pscA>
    183c:	28 f0       	brcs	.+10     	; 0x1848 <__mulsf3+0x12>
    183e:	ba df       	rcall	.-140    	; 0x17b4 <__fp_pscB>
    1840:	18 f0       	brcs	.+6      	; 0x1848 <__mulsf3+0x12>
    1842:	95 23       	and	r25, r21
    1844:	09 f0       	breq	.+2      	; 0x1848 <__mulsf3+0x12>
    1846:	a6 cf       	rjmp	.-180    	; 0x1794 <__fp_inf>
    1848:	ab cf       	rjmp	.-170    	; 0x17a0 <__fp_nan>
    184a:	11 24       	eor	r1, r1
    184c:	ee cf       	rjmp	.-36     	; 0x182a <__fp_szero>

0000184e <__mulsf3x>:
    184e:	ca df       	rcall	.-108    	; 0x17e4 <__fp_split3>
    1850:	a0 f3       	brcs	.-24     	; 0x183a <__mulsf3+0x4>

00001852 <__mulsf3_pse>:
    1852:	95 9f       	mul	r25, r21
    1854:	d1 f3       	breq	.-12     	; 0x184a <__mulsf3+0x14>
    1856:	95 0f       	add	r25, r21
    1858:	50 e0       	ldi	r21, 0x00	; 0
    185a:	55 1f       	adc	r21, r21
    185c:	62 9f       	mul	r22, r18
    185e:	f0 01       	movw	r30, r0
    1860:	72 9f       	mul	r23, r18
    1862:	bb 27       	eor	r27, r27
    1864:	f0 0d       	add	r31, r0
    1866:	b1 1d       	adc	r27, r1
    1868:	63 9f       	mul	r22, r19
    186a:	aa 27       	eor	r26, r26
    186c:	f0 0d       	add	r31, r0
    186e:	b1 1d       	adc	r27, r1
    1870:	aa 1f       	adc	r26, r26
    1872:	64 9f       	mul	r22, r20
    1874:	66 27       	eor	r22, r22
    1876:	b0 0d       	add	r27, r0
    1878:	a1 1d       	adc	r26, r1
    187a:	66 1f       	adc	r22, r22
    187c:	82 9f       	mul	r24, r18
    187e:	22 27       	eor	r18, r18
    1880:	b0 0d       	add	r27, r0
    1882:	a1 1d       	adc	r26, r1
    1884:	62 1f       	adc	r22, r18
    1886:	73 9f       	mul	r23, r19
    1888:	b0 0d       	add	r27, r0
    188a:	a1 1d       	adc	r26, r1
    188c:	62 1f       	adc	r22, r18
    188e:	83 9f       	mul	r24, r19
    1890:	a0 0d       	add	r26, r0
    1892:	61 1d       	adc	r22, r1
    1894:	22 1f       	adc	r18, r18
    1896:	74 9f       	mul	r23, r20
    1898:	33 27       	eor	r19, r19
    189a:	a0 0d       	add	r26, r0
    189c:	61 1d       	adc	r22, r1
    189e:	23 1f       	adc	r18, r19
    18a0:	84 9f       	mul	r24, r20
    18a2:	60 0d       	add	r22, r0
    18a4:	21 1d       	adc	r18, r1
    18a6:	82 2f       	mov	r24, r18
    18a8:	76 2f       	mov	r23, r22
    18aa:	6a 2f       	mov	r22, r26
    18ac:	11 24       	eor	r1, r1
    18ae:	9f 57       	subi	r25, 0x7F	; 127
    18b0:	50 40       	sbci	r21, 0x00	; 0
    18b2:	8a f0       	brmi	.+34     	; 0x18d6 <__mulsf3_pse+0x84>
    18b4:	e1 f0       	breq	.+56     	; 0x18ee <__mulsf3_pse+0x9c>
    18b6:	88 23       	and	r24, r24
    18b8:	4a f0       	brmi	.+18     	; 0x18cc <__mulsf3_pse+0x7a>
    18ba:	ee 0f       	add	r30, r30
    18bc:	ff 1f       	adc	r31, r31
    18be:	bb 1f       	adc	r27, r27
    18c0:	66 1f       	adc	r22, r22
    18c2:	77 1f       	adc	r23, r23
    18c4:	88 1f       	adc	r24, r24
    18c6:	91 50       	subi	r25, 0x01	; 1
    18c8:	50 40       	sbci	r21, 0x00	; 0
    18ca:	a9 f7       	brne	.-22     	; 0x18b6 <__mulsf3_pse+0x64>
    18cc:	9e 3f       	cpi	r25, 0xFE	; 254
    18ce:	51 05       	cpc	r21, r1
    18d0:	70 f0       	brcs	.+28     	; 0x18ee <__mulsf3_pse+0x9c>
    18d2:	60 cf       	rjmp	.-320    	; 0x1794 <__fp_inf>
    18d4:	aa cf       	rjmp	.-172    	; 0x182a <__fp_szero>
    18d6:	5f 3f       	cpi	r21, 0xFF	; 255
    18d8:	ec f3       	brlt	.-6      	; 0x18d4 <__mulsf3_pse+0x82>
    18da:	98 3e       	cpi	r25, 0xE8	; 232
    18dc:	dc f3       	brlt	.-10     	; 0x18d4 <__mulsf3_pse+0x82>
    18de:	86 95       	lsr	r24
    18e0:	77 95       	ror	r23
    18e2:	67 95       	ror	r22
    18e4:	b7 95       	ror	r27
    18e6:	f7 95       	ror	r31
    18e8:	e7 95       	ror	r30
    18ea:	9f 5f       	subi	r25, 0xFF	; 255
    18ec:	c1 f7       	brne	.-16     	; 0x18de <__mulsf3_pse+0x8c>
    18ee:	fe 2b       	or	r31, r30
    18f0:	88 0f       	add	r24, r24
    18f2:	91 1d       	adc	r25, r1
    18f4:	96 95       	lsr	r25
    18f6:	87 95       	ror	r24
    18f8:	97 f9       	bld	r25, 7
    18fa:	08 95       	ret

000018fc <__divmodhi4>:
    18fc:	97 fb       	bst	r25, 7
    18fe:	09 2e       	mov	r0, r25
    1900:	07 26       	eor	r0, r23
    1902:	0a d0       	rcall	.+20     	; 0x1918 <__divmodhi4_neg1>
    1904:	77 fd       	sbrc	r23, 7
    1906:	04 d0       	rcall	.+8      	; 0x1910 <__divmodhi4_neg2>
    1908:	0c d0       	rcall	.+24     	; 0x1922 <__udivmodhi4>
    190a:	06 d0       	rcall	.+12     	; 0x1918 <__divmodhi4_neg1>
    190c:	00 20       	and	r0, r0
    190e:	1a f4       	brpl	.+6      	; 0x1916 <__divmodhi4_exit>

00001910 <__divmodhi4_neg2>:
    1910:	70 95       	com	r23
    1912:	61 95       	neg	r22
    1914:	7f 4f       	sbci	r23, 0xFF	; 255

00001916 <__divmodhi4_exit>:
    1916:	08 95       	ret

00001918 <__divmodhi4_neg1>:
    1918:	f6 f7       	brtc	.-4      	; 0x1916 <__divmodhi4_exit>
    191a:	90 95       	com	r25
    191c:	81 95       	neg	r24
    191e:	9f 4f       	sbci	r25, 0xFF	; 255
    1920:	08 95       	ret

00001922 <__udivmodhi4>:
    1922:	aa 1b       	sub	r26, r26
    1924:	bb 1b       	sub	r27, r27
    1926:	51 e1       	ldi	r21, 0x11	; 17
    1928:	07 c0       	rjmp	.+14     	; 0x1938 <__udivmodhi4_ep>

0000192a <__udivmodhi4_loop>:
    192a:	aa 1f       	adc	r26, r26
    192c:	bb 1f       	adc	r27, r27
    192e:	a6 17       	cp	r26, r22
    1930:	b7 07       	cpc	r27, r23
    1932:	10 f0       	brcs	.+4      	; 0x1938 <__udivmodhi4_ep>
    1934:	a6 1b       	sub	r26, r22
    1936:	b7 0b       	sbc	r27, r23

00001938 <__udivmodhi4_ep>:
    1938:	88 1f       	adc	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	5a 95       	dec	r21
    193e:	a9 f7       	brne	.-22     	; 0x192a <__udivmodhi4_loop>
    1940:	80 95       	com	r24
    1942:	90 95       	com	r25
    1944:	bc 01       	movw	r22, r24
    1946:	cd 01       	movw	r24, r26
    1948:	08 95       	ret

0000194a <__prologue_saves__>:
    194a:	2f 92       	push	r2
    194c:	3f 92       	push	r3
    194e:	4f 92       	push	r4
    1950:	5f 92       	push	r5
    1952:	6f 92       	push	r6
    1954:	7f 92       	push	r7
    1956:	8f 92       	push	r8
    1958:	9f 92       	push	r9
    195a:	af 92       	push	r10
    195c:	bf 92       	push	r11
    195e:	cf 92       	push	r12
    1960:	df 92       	push	r13
    1962:	ef 92       	push	r14
    1964:	ff 92       	push	r15
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	ca 1b       	sub	r28, r26
    1974:	db 0b       	sbc	r29, r27
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	09 94       	ijmp

00001982 <__epilogue_restores__>:
    1982:	2a 88       	ldd	r2, Y+18	; 0x12
    1984:	39 88       	ldd	r3, Y+17	; 0x11
    1986:	48 88       	ldd	r4, Y+16	; 0x10
    1988:	5f 84       	ldd	r5, Y+15	; 0x0f
    198a:	6e 84       	ldd	r6, Y+14	; 0x0e
    198c:	7d 84       	ldd	r7, Y+13	; 0x0d
    198e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1990:	9b 84       	ldd	r9, Y+11	; 0x0b
    1992:	aa 84       	ldd	r10, Y+10	; 0x0a
    1994:	b9 84       	ldd	r11, Y+9	; 0x09
    1996:	c8 84       	ldd	r12, Y+8	; 0x08
    1998:	df 80       	ldd	r13, Y+7	; 0x07
    199a:	ee 80       	ldd	r14, Y+6	; 0x06
    199c:	fd 80       	ldd	r15, Y+5	; 0x05
    199e:	0c 81       	ldd	r16, Y+4	; 0x04
    19a0:	1b 81       	ldd	r17, Y+3	; 0x03
    19a2:	aa 81       	ldd	r26, Y+2	; 0x02
    19a4:	b9 81       	ldd	r27, Y+1	; 0x01
    19a6:	ce 0f       	add	r28, r30
    19a8:	d1 1d       	adc	r29, r1
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	ed 01       	movw	r28, r26
    19b6:	08 95       	ret

000019b8 <_exit>:
    19b8:	f8 94       	cli

000019ba <__stop_program>:
    19ba:	ff cf       	rjmp	.-2      	; 0x19ba <__stop_program>
