
softwareICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000011c6  0000125a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  00800068  00800068  00001262  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00001264  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00002e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000033b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001868  00000000  00000000  00003518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ef  00000000  00000000  00004d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075f  00000000  00000000  0000546f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000afc  00000000  00000000  00005bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b4f  00000000  00000000  000066cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001941  00000000  00000000  0000721b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__vector_1>
       8:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_2>
       c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_3>
      10:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_4>
      14:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_5>
      18:	0c 94 1c 02 	jmp	0x438	; 0x438 <__vector_6>
      1c:	0c 94 43 02 	jmp	0x486	; 0x486 <__vector_7>
      20:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__vector_8>
      24:	0c 94 91 02 	jmp	0x522	; 0x522 <__vector_9>
      28:	0c 94 b8 02 	jmp	0x570	; 0x570 <__vector_10>
      2c:	0c 94 df 02 	jmp	0x5be	; 0x5be <__vector_11>
      30:	0c 94 06 03 	jmp	0x60c	; 0x60c <__vector_12>
      34:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__vector_13>
      38:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__vector_14>
      3c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__vector_15>
      40:	0c 94 a2 03 	jmp	0x744	; 0x744 <__vector_16>
      44:	0c 94 c9 03 	jmp	0x792	; 0x792 <__vector_17>
      48:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__vector_18>
      4c:	0c 94 17 04 	jmp	0x82e	; 0x82e <__vector_19>
      50:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 90 05 	call	0xb20	; 0xb20 <main>
      8a:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <gpioPortDirection>:
 * @param value: set the port value and takes the following values
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */

switch (u8_port)	
      92:	81 30       	cpi	r24, 0x01	; 1
      94:	49 f0       	breq	.+18     	; 0xa8 <gpioPortDirection+0x16>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	28 f0       	brcs	.+10     	; 0xa4 <gpioPortDirection+0x12>
      9a:	82 30       	cpi	r24, 0x02	; 2
      9c:	39 f0       	breq	.+14     	; 0xac <gpioPortDirection+0x1a>
      9e:	83 30       	cpi	r24, 0x03	; 3
      a0:	41 f4       	brne	.+16     	; 0xb2 <gpioPortDirection+0x20>
      a2:	06 c0       	rjmp	.+12     	; 0xb0 <gpioPortDirection+0x1e>
{	case GPIOA:
	PORTA_DIR = u8_direction;
      a4:	6a bb       	out	0x1a, r22	; 26
	break;
      a6:	08 95       	ret
	case GPIOB:
	PORTB_DIR = u8_direction;
      a8:	67 bb       	out	0x17, r22	; 23
	break;
      aa:	08 95       	ret
	case GPIOC:
	PORTC_DIR = u8_direction;
      ac:	64 bb       	out	0x14, r22	; 20
	break;
      ae:	08 95       	ret
	case GPIOD:
	PORTD_DIR = u8_direction;
      b0:	61 bb       	out	0x11, r22	; 17
      b2:	08 95       	ret

000000b4 <gpioPortWrite>:
}

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	
switch (u8_port)	
      b4:	81 30       	cpi	r24, 0x01	; 1
      b6:	49 f0       	breq	.+18     	; 0xca <gpioPortWrite+0x16>
      b8:	81 30       	cpi	r24, 0x01	; 1
      ba:	28 f0       	brcs	.+10     	; 0xc6 <gpioPortWrite+0x12>
      bc:	82 30       	cpi	r24, 0x02	; 2
      be:	39 f0       	breq	.+14     	; 0xce <gpioPortWrite+0x1a>
      c0:	83 30       	cpi	r24, 0x03	; 3
      c2:	41 f4       	brne	.+16     	; 0xd4 <gpioPortWrite+0x20>
      c4:	06 c0       	rjmp	.+12     	; 0xd2 <gpioPortWrite+0x1e>
{	case GPIOA:
	PORTA_DATA = u8_value;
      c6:	6b bb       	out	0x1b, r22	; 27
	break;
      c8:	08 95       	ret
	case GPIOB:
	PORTB_DATA = u8_value;
      ca:	68 bb       	out	0x18, r22	; 24
	break;
      cc:	08 95       	ret
	case GPIOC:
	PORTC_DATA = u8_value;
      ce:	65 bb       	out	0x15, r22	; 21
	break;
      d0:	08 95       	ret
	case GPIOD:
	PORTD_DATA = u8_value;
      d2:	62 bb       	out	0x12, r22	; 18
      d4:	08 95       	ret

000000d6 <gpioPortToggle>:
	
}
void gpioPortToggle(uint8_t u8_port)
{
	
switch (u8_port)	
      d6:	81 30       	cpi	r24, 0x01	; 1
      d8:	59 f0       	breq	.+22     	; 0xf0 <gpioPortToggle+0x1a>
      da:	81 30       	cpi	r24, 0x01	; 1
      dc:	28 f0       	brcs	.+10     	; 0xe8 <gpioPortToggle+0x12>
      de:	82 30       	cpi	r24, 0x02	; 2
      e0:	59 f0       	breq	.+22     	; 0xf8 <gpioPortToggle+0x22>
      e2:	83 30       	cpi	r24, 0x03	; 3
      e4:	81 f4       	brne	.+32     	; 0x106 <gpioPortToggle+0x30>
      e6:	0c c0       	rjmp	.+24     	; 0x100 <gpioPortToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^= HIGH;
      e8:	8b b3       	in	r24, 0x1b	; 27
      ea:	80 95       	com	r24
      ec:	8b bb       	out	0x1b, r24	; 27
	break;
      ee:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^= HIGH;
      f0:	88 b3       	in	r24, 0x18	; 24
      f2:	80 95       	com	r24
      f4:	88 bb       	out	0x18, r24	; 24
	break;
      f6:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^= HIGH;
      f8:	85 b3       	in	r24, 0x15	; 21
      fa:	80 95       	com	r24
      fc:	85 bb       	out	0x15, r24	; 21
	break;
      fe:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^= HIGH;
     100:	82 b3       	in	r24, 0x12	; 18
     102:	80 95       	com	r24
     104:	82 bb       	out	0x12, r24	; 18
     106:	08 95       	ret

00000108 <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
	
switch (u8_port)	
     108:	81 30       	cpi	r24, 0x01	; 1
     10a:	49 f0       	breq	.+18     	; 0x11e <gpioPortRead+0x16>
     10c:	81 30       	cpi	r24, 0x01	; 1
     10e:	28 f0       	brcs	.+10     	; 0x11a <gpioPortRead+0x12>
     110:	82 30       	cpi	r24, 0x02	; 2
     112:	39 f0       	breq	.+14     	; 0x122 <gpioPortRead+0x1a>
     114:	83 30       	cpi	r24, 0x03	; 3
     116:	49 f4       	brne	.+18     	; 0x12a <gpioPortRead+0x22>
     118:	06 c0       	rjmp	.+12     	; 0x126 <gpioPortRead+0x1e>
{	case GPIOA:
	U8_ret_Port_data=PORTA_DATA & HIGH;
     11a:	8b b3       	in	r24, 0x1b	; 27
	break;
     11c:	08 95       	ret
	case GPIOB:
	U8_ret_Port_data=PORTB_DATA & HIGH;
     11e:	88 b3       	in	r24, 0x18	; 24
	break;
     120:	08 95       	ret
	case GPIOC:
	U8_ret_Port_data=PORTC_DATA & HIGH;
     122:	85 b3       	in	r24, 0x15	; 21
	break;
     124:	08 95       	ret
	case GPIOD:
	U8_ret_Port_data=PORTD_DATA & HIGH;
     126:	82 b3       	in	r24, 0x12	; 18
	break;
     128:	08 95       	ret
	
}

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
     12a:	80 e0       	ldi	r24, 0x00	; 0
	break;
	
}

return 	U8_ret_Port_data;
}
     12c:	08 95       	ret

0000012e <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
switch(u8_direction){
     12e:	44 23       	and	r20, r20
     130:	19 f0       	breq	.+6      	; 0x138 <gpioPinDirection+0xa>
     132:	4f 3f       	cpi	r20, 0xFF	; 255
     134:	d1 f5       	brne	.+116    	; 0x1aa <gpioPinDirection+0x7c>
     136:	21 c0       	rjmp	.+66     	; 0x17a <gpioPinDirection+0x4c>
case INPUT:
{
switch (u8_port)	
     138:	81 30       	cpi	r24, 0x01	; 1
     13a:	69 f0       	breq	.+26     	; 0x156 <gpioPinDirection+0x28>
     13c:	81 30       	cpi	r24, 0x01	; 1
     13e:	28 f0       	brcs	.+10     	; 0x14a <gpioPinDirection+0x1c>
     140:	82 30       	cpi	r24, 0x02	; 2
     142:	79 f0       	breq	.+30     	; 0x162 <gpioPinDirection+0x34>
     144:	83 30       	cpi	r24, 0x03	; 3
     146:	c9 f4       	brne	.+50     	; 0x17a <gpioPinDirection+0x4c>
     148:	12 c0       	rjmp	.+36     	; 0x16e <gpioPinDirection+0x40>
{	case GPIOA:
	PORTA_DIR &=(~u8_pins);   // 0b01111111
     14a:	8a b3       	in	r24, 0x1a	; 26
     14c:	96 2f       	mov	r25, r22
     14e:	90 95       	com	r25
     150:	89 23       	and	r24, r25
     152:	8a bb       	out	0x1a, r24	; 26
     154:	1b c0       	rjmp	.+54     	; 0x18c <gpioPinDirection+0x5e>
	break;
	case GPIOB:
	PORTB_DIR &=(~u8_pins);
     156:	87 b3       	in	r24, 0x17	; 23
     158:	96 2f       	mov	r25, r22
     15a:	90 95       	com	r25
     15c:	89 23       	and	r24, r25
     15e:	87 bb       	out	0x17, r24	; 23
     160:	19 c0       	rjmp	.+50     	; 0x194 <gpioPinDirection+0x66>
	break;
	case GPIOC:
	PORTC_DIR &=(~u8_pins);
     162:	84 b3       	in	r24, 0x14	; 20
     164:	96 2f       	mov	r25, r22
     166:	90 95       	com	r25
     168:	89 23       	and	r24, r25
     16a:	84 bb       	out	0x14, r24	; 20
     16c:	17 c0       	rjmp	.+46     	; 0x19c <gpioPinDirection+0x6e>
	break;
	case GPIOD:
	PORTD_DIR &=(~u8_pins);
     16e:	81 b3       	in	r24, 0x11	; 17
     170:	96 2f       	mov	r25, r22
     172:	90 95       	com	r25
     174:	89 23       	and	r24, r25
     176:	81 bb       	out	0x11, r24	; 17
     178:	15 c0       	rjmp	.+42     	; 0x1a4 <gpioPinDirection+0x76>
	break;
	
}
}
case OUTPUT:{
switch (u8_port)	
     17a:	81 30       	cpi	r24, 0x01	; 1
     17c:	59 f0       	breq	.+22     	; 0x194 <gpioPinDirection+0x66>
     17e:	81 30       	cpi	r24, 0x01	; 1
     180:	28 f0       	brcs	.+10     	; 0x18c <gpioPinDirection+0x5e>
     182:	82 30       	cpi	r24, 0x02	; 2
     184:	59 f0       	breq	.+22     	; 0x19c <gpioPinDirection+0x6e>
     186:	83 30       	cpi	r24, 0x03	; 3
     188:	81 f4       	brne	.+32     	; 0x1aa <gpioPinDirection+0x7c>
     18a:	0c c0       	rjmp	.+24     	; 0x1a4 <gpioPinDirection+0x76>
{	case GPIOA:
	PORTA_DIR |=(u8_pins);
     18c:	8a b3       	in	r24, 0x1a	; 26
     18e:	68 2b       	or	r22, r24
     190:	6a bb       	out	0x1a, r22	; 26
	break;
     192:	08 95       	ret
	case GPIOB:
	PORTB_DIR |=(u8_pins);
     194:	87 b3       	in	r24, 0x17	; 23
     196:	68 2b       	or	r22, r24
     198:	67 bb       	out	0x17, r22	; 23
	break;
     19a:	08 95       	ret
	case GPIOC:
	PORTC_DIR |=(u8_pins);
     19c:	84 b3       	in	r24, 0x14	; 20
     19e:	68 2b       	or	r22, r24
     1a0:	64 bb       	out	0x14, r22	; 20
	break;
     1a2:	08 95       	ret
	case GPIOD:
	PORTD_DIR |=(u8_pins);
     1a4:	81 b3       	in	r24, 0x11	; 17
     1a6:	68 2b       	or	r22, r24
     1a8:	61 bb       	out	0x11, r22	; 17
     1aa:	08 95       	ret

000001ac <gpioPinWrite>:
	
	
}

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{switch(u8_value){
     1ac:	44 23       	and	r20, r20
     1ae:	19 f0       	breq	.+6      	; 0x1b6 <gpioPinWrite+0xa>
     1b0:	4f 3f       	cpi	r20, 0xFF	; 255
     1b2:	b1 f5       	brne	.+108    	; 0x220 <gpioPinWrite+0x74>
     1b4:	1d c0       	rjmp	.+58     	; 0x1f0 <gpioPinWrite+0x44>
case LOW:
{
switch (u8_port)	
     1b6:	81 30       	cpi	r24, 0x01	; 1
     1b8:	61 f0       	breq	.+24     	; 0x1d2 <gpioPinWrite+0x26>
     1ba:	81 30       	cpi	r24, 0x01	; 1
     1bc:	28 f0       	brcs	.+10     	; 0x1c8 <gpioPinWrite+0x1c>
     1be:	82 30       	cpi	r24, 0x02	; 2
     1c0:	69 f0       	breq	.+26     	; 0x1dc <gpioPinWrite+0x30>
     1c2:	83 30       	cpi	r24, 0x03	; 3
     1c4:	69 f5       	brne	.+90     	; 0x220 <gpioPinWrite+0x74>
     1c6:	0f c0       	rjmp	.+30     	; 0x1e6 <gpioPinWrite+0x3a>
{	case GPIOA:
	PORTA_DATA &= ~(u8_pins);   // 0b01111111
     1c8:	8b b3       	in	r24, 0x1b	; 27
     1ca:	60 95       	com	r22
     1cc:	68 23       	and	r22, r24
     1ce:	6b bb       	out	0x1b, r22	; 27
	break;
     1d0:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(u8_pins);
     1d2:	88 b3       	in	r24, 0x18	; 24
     1d4:	60 95       	com	r22
     1d6:	68 23       	and	r22, r24
     1d8:	68 bb       	out	0x18, r22	; 24
	break;
     1da:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(u8_pins);
     1dc:	85 b3       	in	r24, 0x15	; 21
     1de:	60 95       	com	r22
     1e0:	68 23       	and	r22, r24
     1e2:	65 bb       	out	0x15, r22	; 21
	break;
     1e4:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(u8_pins);
     1e6:	82 b3       	in	r24, 0x12	; 18
     1e8:	60 95       	com	r22
     1ea:	68 23       	and	r22, r24
     1ec:	62 bb       	out	0x12, r22	; 18
	break;
     1ee:	08 95       	ret
	
}
break;
}
case HIGH:{
switch (u8_port)	
     1f0:	81 30       	cpi	r24, 0x01	; 1
     1f2:	59 f0       	breq	.+22     	; 0x20a <gpioPinWrite+0x5e>
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	28 f0       	brcs	.+10     	; 0x202 <gpioPinWrite+0x56>
     1f8:	82 30       	cpi	r24, 0x02	; 2
     1fa:	59 f0       	breq	.+22     	; 0x212 <gpioPinWrite+0x66>
     1fc:	83 30       	cpi	r24, 0x03	; 3
     1fe:	81 f4       	brne	.+32     	; 0x220 <gpioPinWrite+0x74>
     200:	0c c0       	rjmp	.+24     	; 0x21a <gpioPinWrite+0x6e>
{	case GPIOA:
	PORTA_DATA |=(u8_pins);
     202:	8b b3       	in	r24, 0x1b	; 27
     204:	68 2b       	or	r22, r24
     206:	6b bb       	out	0x1b, r22	; 27
	break;
     208:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(u8_pins);
     20a:	88 b3       	in	r24, 0x18	; 24
     20c:	68 2b       	or	r22, r24
     20e:	68 bb       	out	0x18, r22	; 24
	break;
     210:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(u8_pins);
     212:	85 b3       	in	r24, 0x15	; 21
     214:	68 2b       	or	r22, r24
     216:	65 bb       	out	0x15, r22	; 21
	break;
     218:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(u8_pins);
     21a:	82 b3       	in	r24, 0x12	; 18
     21c:	68 2b       	or	r22, r24
     21e:	62 bb       	out	0x12, r22	; 18
     220:	08 95       	ret

00000222 <gpioPinToggle>:
}

}
void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
switch (u8_port)	
     222:	81 30       	cpi	r24, 0x01	; 1
     224:	59 f0       	breq	.+22     	; 0x23c <gpioPinToggle+0x1a>
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	28 f0       	brcs	.+10     	; 0x234 <gpioPinToggle+0x12>
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	59 f0       	breq	.+22     	; 0x244 <gpioPinToggle+0x22>
     22e:	83 30       	cpi	r24, 0x03	; 3
     230:	81 f4       	brne	.+32     	; 0x252 <gpioPinToggle+0x30>
     232:	0c c0       	rjmp	.+24     	; 0x24c <gpioPinToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^=(u8_pins);
     234:	8b b3       	in	r24, 0x1b	; 27
     236:	68 27       	eor	r22, r24
     238:	6b bb       	out	0x1b, r22	; 27
	break;
     23a:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^=(u8_pins);
     23c:	88 b3       	in	r24, 0x18	; 24
     23e:	68 27       	eor	r22, r24
     240:	68 bb       	out	0x18, r22	; 24
	break;
     242:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^=(u8_pins);
     244:	85 b3       	in	r24, 0x15	; 21
     246:	68 27       	eor	r22, r24
     248:	65 bb       	out	0x15, r22	; 21
	break;
     24a:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^=(u8_pins);
     24c:	82 b3       	in	r24, 0x12	; 18
     24e:	68 27       	eor	r22, r24
     250:	62 bb       	out	0x12, r22	; 18
     252:	08 95       	ret

00000254 <gpioPinRead>:
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
switch (u8_port)	
     254:	81 30       	cpi	r24, 0x01	; 1
     256:	51 f0       	breq	.+20     	; 0x26c <gpioPinRead+0x18>
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	28 f0       	brcs	.+10     	; 0x266 <gpioPinRead+0x12>
     25c:	82 30       	cpi	r24, 0x02	; 2
     25e:	49 f0       	breq	.+18     	; 0x272 <gpioPinRead+0x1e>
     260:	83 30       	cpi	r24, 0x03	; 3
     262:	69 f4       	brne	.+26     	; 0x27e <gpioPinRead+0x2a>
     264:	09 c0       	rjmp	.+18     	; 0x278 <gpioPinRead+0x24>
{	case GPIOA:
	U8_ret_BIT_data=(PORTA_PIN & u8_pin);
     266:	89 b3       	in	r24, 0x19	; 25
     268:	68 23       	and	r22, r24
	break;
     26a:	0a c0       	rjmp	.+20     	; 0x280 <gpioPinRead+0x2c>
	case GPIOB:
	U8_ret_BIT_data=(PORTB_PIN & u8_pin);
     26c:	86 b3       	in	r24, 0x16	; 22
     26e:	68 23       	and	r22, r24
	break;
     270:	07 c0       	rjmp	.+14     	; 0x280 <gpioPinRead+0x2c>
	case GPIOC:
	U8_ret_BIT_data=(PORTC_PIN & u8_pin);
     272:	83 b3       	in	r24, 0x13	; 19
     274:	68 23       	and	r22, r24
	break;
     276:	04 c0       	rjmp	.+8      	; 0x280 <gpioPinRead+0x2c>
	case GPIOD:
	U8_ret_BIT_data=(PORTD_PIN & u8_pin);
     278:	80 b3       	in	r24, 0x10	; 16
     27a:	68 23       	and	r22, r24
	break;
     27c:	01 c0       	rjmp	.+2      	; 0x280 <gpioPinRead+0x2c>
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
     27e:	60 e0       	ldi	r22, 0x00	; 0
}
	
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	66 23       	and	r22, r22
     284:	09 f4       	brne	.+2      	; 0x288 <gpioPinRead+0x34>
     286:	80 e0       	ldi	r24, 0x00	; 0
if(U8_ret_BIT_data > 0)
{
	U8_ret_BIT_data = 1;
}
return U8_ret_BIT_data;
     288:	08 95       	ret

0000028a <G_interrupt_Enable>:
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
//	sei();
 SREG |=(0x80);
     28a:	8f b7       	in	r24, 0x3f	; 63
     28c:	80 68       	ori	r24, 0x80	; 128
     28e:	8f bf       	out	0x3f, r24	; 63
}
     290:	08 95       	ret

00000292 <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
gpioPinDirection(GPIOB,BIT2,LOW);
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	64 e0       	ldi	r22, 0x04	; 4
     296:	40 e0       	ldi	r20, 0x00	; 0
     298:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
SET_BIT(GICR,INT2);
     29c:	8b b7       	in	r24, 0x3b	; 59
     29e:	80 62       	ori	r24, 0x20	; 32
     2a0:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);
     2a2:	84 b7       	in	r24, 0x34	; 52
     2a4:	80 64       	ori	r24, 0x40	; 64
     2a6:	84 bf       	out	0x34, r24	; 52
}
     2a8:	08 95       	ret

000002aa <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     2aa:	8f b7       	in	r24, 0x3f	; 63
     2ac:	8f 77       	andi	r24, 0x7F	; 127
     2ae:	8f bf       	out	0x3f, r24	; 63
}
     2b0:	08 95       	ret

000002b2 <__vector_1>:
void __vector_1(void) __attribute__((signal,__INTR_ATTRS));
void __vector_1(void)
{
     2b2:	1f 92       	push	r1
     2b4:	0f 92       	push	r0
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	0f 92       	push	r0
     2ba:	11 24       	eor	r1, r1
     2bc:	2f 93       	push	r18
     2be:	3f 93       	push	r19
     2c0:	4f 93       	push	r20
     2c2:	5f 93       	push	r21
     2c4:	6f 93       	push	r22
     2c6:	7f 93       	push	r23
     2c8:	8f 93       	push	r24
     2ca:	9f 93       	push	r25
     2cc:	af 93       	push	r26
     2ce:	bf 93       	push	r27
     2d0:	ef 93       	push	r30
     2d2:	ff 93       	push	r31
  INT0_external_interrupt();
     2d4:	e0 91 82 00 	lds	r30, 0x0082
     2d8:	f0 91 83 00 	lds	r31, 0x0083
     2dc:	09 95       	icall
}
     2de:	ff 91       	pop	r31
     2e0:	ef 91       	pop	r30
     2e2:	bf 91       	pop	r27
     2e4:	af 91       	pop	r26
     2e6:	9f 91       	pop	r25
     2e8:	8f 91       	pop	r24
     2ea:	7f 91       	pop	r23
     2ec:	6f 91       	pop	r22
     2ee:	5f 91       	pop	r21
     2f0:	4f 91       	pop	r20
     2f2:	3f 91       	pop	r19
     2f4:	2f 91       	pop	r18
     2f6:	0f 90       	pop	r0
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	0f 90       	pop	r0
     2fc:	1f 90       	pop	r1
     2fe:	18 95       	reti

00000300 <__vector_2>:


void __vector_2(void) __attribute__((signal,__INTR_ATTRS));
void __vector_2(void)
{
     300:	1f 92       	push	r1
     302:	0f 92       	push	r0
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	0f 92       	push	r0
     308:	11 24       	eor	r1, r1
     30a:	2f 93       	push	r18
     30c:	3f 93       	push	r19
     30e:	4f 93       	push	r20
     310:	5f 93       	push	r21
     312:	6f 93       	push	r22
     314:	7f 93       	push	r23
     316:	8f 93       	push	r24
     318:	9f 93       	push	r25
     31a:	af 93       	push	r26
     31c:	bf 93       	push	r27
     31e:	ef 93       	push	r30
     320:	ff 93       	push	r31
  INT1_external_interrupt();
     322:	e0 91 88 00 	lds	r30, 0x0088
     326:	f0 91 89 00 	lds	r31, 0x0089
     32a:	09 95       	icall
}
     32c:	ff 91       	pop	r31
     32e:	ef 91       	pop	r30
     330:	bf 91       	pop	r27
     332:	af 91       	pop	r26
     334:	9f 91       	pop	r25
     336:	8f 91       	pop	r24
     338:	7f 91       	pop	r23
     33a:	6f 91       	pop	r22
     33c:	5f 91       	pop	r21
     33e:	4f 91       	pop	r20
     340:	3f 91       	pop	r19
     342:	2f 91       	pop	r18
     344:	0f 90       	pop	r0
     346:	0f be       	out	0x3f, r0	; 63
     348:	0f 90       	pop	r0
     34a:	1f 90       	pop	r1
     34c:	18 95       	reti

0000034e <__vector_3>:


void __vector_3(void) __attribute__((signal,__INTR_ATTRS));
void __vector_3(void)
{
     34e:	1f 92       	push	r1
     350:	0f 92       	push	r0
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	0f 92       	push	r0
     356:	11 24       	eor	r1, r1
     358:	2f 93       	push	r18
     35a:	3f 93       	push	r19
     35c:	4f 93       	push	r20
     35e:	5f 93       	push	r21
     360:	6f 93       	push	r22
     362:	7f 93       	push	r23
     364:	8f 93       	push	r24
     366:	9f 93       	push	r25
     368:	af 93       	push	r26
     36a:	bf 93       	push	r27
     36c:	ef 93       	push	r30
     36e:	ff 93       	push	r31
  INT2_external_interrupt();
     370:	e0 91 64 00 	lds	r30, 0x0064
     374:	f0 91 65 00 	lds	r31, 0x0065
     378:	09 95       	icall
}
     37a:	ff 91       	pop	r31
     37c:	ef 91       	pop	r30
     37e:	bf 91       	pop	r27
     380:	af 91       	pop	r26
     382:	9f 91       	pop	r25
     384:	8f 91       	pop	r24
     386:	7f 91       	pop	r23
     388:	6f 91       	pop	r22
     38a:	5f 91       	pop	r21
     38c:	4f 91       	pop	r20
     38e:	3f 91       	pop	r19
     390:	2f 91       	pop	r18
     392:	0f 90       	pop	r0
     394:	0f be       	out	0x3f, r0	; 63
     396:	0f 90       	pop	r0
     398:	1f 90       	pop	r1
     39a:	18 95       	reti

0000039c <__vector_4>:


void __vector_4(void) __attribute__((signal,__INTR_ATTRS));
void __vector_4(void)
{
     39c:	1f 92       	push	r1
     39e:	0f 92       	push	r0
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	0f 92       	push	r0
     3a4:	11 24       	eor	r1, r1
     3a6:	2f 93       	push	r18
     3a8:	3f 93       	push	r19
     3aa:	4f 93       	push	r20
     3ac:	5f 93       	push	r21
     3ae:	6f 93       	push	r22
     3b0:	7f 93       	push	r23
     3b2:	8f 93       	push	r24
     3b4:	9f 93       	push	r25
     3b6:	af 93       	push	r26
     3b8:	bf 93       	push	r27
     3ba:	ef 93       	push	r30
     3bc:	ff 93       	push	r31
TIMER2COMP();
     3be:	e0 91 8e 00 	lds	r30, 0x008E
     3c2:	f0 91 8f 00 	lds	r31, 0x008F
     3c6:	09 95       	icall
}
     3c8:	ff 91       	pop	r31
     3ca:	ef 91       	pop	r30
     3cc:	bf 91       	pop	r27
     3ce:	af 91       	pop	r26
     3d0:	9f 91       	pop	r25
     3d2:	8f 91       	pop	r24
     3d4:	7f 91       	pop	r23
     3d6:	6f 91       	pop	r22
     3d8:	5f 91       	pop	r21
     3da:	4f 91       	pop	r20
     3dc:	3f 91       	pop	r19
     3de:	2f 91       	pop	r18
     3e0:	0f 90       	pop	r0
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	0f 90       	pop	r0
     3e6:	1f 90       	pop	r1
     3e8:	18 95       	reti

000003ea <__vector_5>:


void __vector_5(void) __attribute__((signal,__INTR_ATTRS));
void __vector_5(void)
{
     3ea:	1f 92       	push	r1
     3ec:	0f 92       	push	r0
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	0f 92       	push	r0
     3f2:	11 24       	eor	r1, r1
     3f4:	2f 93       	push	r18
     3f6:	3f 93       	push	r19
     3f8:	4f 93       	push	r20
     3fa:	5f 93       	push	r21
     3fc:	6f 93       	push	r22
     3fe:	7f 93       	push	r23
     400:	8f 93       	push	r24
     402:	9f 93       	push	r25
     404:	af 93       	push	r26
     406:	bf 93       	push	r27
     408:	ef 93       	push	r30
     40a:	ff 93       	push	r31
  TIMER2OVF();
     40c:	e0 91 72 00 	lds	r30, 0x0072
     410:	f0 91 73 00 	lds	r31, 0x0073
     414:	09 95       	icall
}
     416:	ff 91       	pop	r31
     418:	ef 91       	pop	r30
     41a:	bf 91       	pop	r27
     41c:	af 91       	pop	r26
     41e:	9f 91       	pop	r25
     420:	8f 91       	pop	r24
     422:	7f 91       	pop	r23
     424:	6f 91       	pop	r22
     426:	5f 91       	pop	r21
     428:	4f 91       	pop	r20
     42a:	3f 91       	pop	r19
     42c:	2f 91       	pop	r18
     42e:	0f 90       	pop	r0
     430:	0f be       	out	0x3f, r0	; 63
     432:	0f 90       	pop	r0
     434:	1f 90       	pop	r1
     436:	18 95       	reti

00000438 <__vector_6>:

void __vector_6(void) __attribute__((signal,__INTR_ATTRS));
void __vector_6(void)
{
     438:	1f 92       	push	r1
     43a:	0f 92       	push	r0
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	0f 92       	push	r0
     440:	11 24       	eor	r1, r1
     442:	2f 93       	push	r18
     444:	3f 93       	push	r19
     446:	4f 93       	push	r20
     448:	5f 93       	push	r21
     44a:	6f 93       	push	r22
     44c:	7f 93       	push	r23
     44e:	8f 93       	push	r24
     450:	9f 93       	push	r25
     452:	af 93       	push	r26
     454:	bf 93       	push	r27
     456:	ef 93       	push	r30
     458:	ff 93       	push	r31
  TIMER1CAPT();
     45a:	e0 91 8a 00 	lds	r30, 0x008A
     45e:	f0 91 8b 00 	lds	r31, 0x008B
     462:	09 95       	icall
}
     464:	ff 91       	pop	r31
     466:	ef 91       	pop	r30
     468:	bf 91       	pop	r27
     46a:	af 91       	pop	r26
     46c:	9f 91       	pop	r25
     46e:	8f 91       	pop	r24
     470:	7f 91       	pop	r23
     472:	6f 91       	pop	r22
     474:	5f 91       	pop	r21
     476:	4f 91       	pop	r20
     478:	3f 91       	pop	r19
     47a:	2f 91       	pop	r18
     47c:	0f 90       	pop	r0
     47e:	0f be       	out	0x3f, r0	; 63
     480:	0f 90       	pop	r0
     482:	1f 90       	pop	r1
     484:	18 95       	reti

00000486 <__vector_7>:

void __vector_7(void) __attribute__((signal,__INTR_ATTRS));
void __vector_7(void)
{
     486:	1f 92       	push	r1
     488:	0f 92       	push	r0
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	0f 92       	push	r0
     48e:	11 24       	eor	r1, r1
     490:	2f 93       	push	r18
     492:	3f 93       	push	r19
     494:	4f 93       	push	r20
     496:	5f 93       	push	r21
     498:	6f 93       	push	r22
     49a:	7f 93       	push	r23
     49c:	8f 93       	push	r24
     49e:	9f 93       	push	r25
     4a0:	af 93       	push	r26
     4a2:	bf 93       	push	r27
     4a4:	ef 93       	push	r30
     4a6:	ff 93       	push	r31
TIMER1COMPA();
     4a8:	e0 91 78 00 	lds	r30, 0x0078
     4ac:	f0 91 79 00 	lds	r31, 0x0079
     4b0:	09 95       	icall
}
     4b2:	ff 91       	pop	r31
     4b4:	ef 91       	pop	r30
     4b6:	bf 91       	pop	r27
     4b8:	af 91       	pop	r26
     4ba:	9f 91       	pop	r25
     4bc:	8f 91       	pop	r24
     4be:	7f 91       	pop	r23
     4c0:	6f 91       	pop	r22
     4c2:	5f 91       	pop	r21
     4c4:	4f 91       	pop	r20
     4c6:	3f 91       	pop	r19
     4c8:	2f 91       	pop	r18
     4ca:	0f 90       	pop	r0
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	0f 90       	pop	r0
     4d0:	1f 90       	pop	r1
     4d2:	18 95       	reti

000004d4 <__vector_8>:

void __vector_8(void) __attribute__((signal,__INTR_ATTRS));
void __vector_8(void)
{
     4d4:	1f 92       	push	r1
     4d6:	0f 92       	push	r0
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	0f 92       	push	r0
     4dc:	11 24       	eor	r1, r1
     4de:	2f 93       	push	r18
     4e0:	3f 93       	push	r19
     4e2:	4f 93       	push	r20
     4e4:	5f 93       	push	r21
     4e6:	6f 93       	push	r22
     4e8:	7f 93       	push	r23
     4ea:	8f 93       	push	r24
     4ec:	9f 93       	push	r25
     4ee:	af 93       	push	r26
     4f0:	bf 93       	push	r27
     4f2:	ef 93       	push	r30
     4f4:	ff 93       	push	r31
  TIMER1COMPB();
     4f6:	e0 91 76 00 	lds	r30, 0x0076
     4fa:	f0 91 77 00 	lds	r31, 0x0077
     4fe:	09 95       	icall
}
     500:	ff 91       	pop	r31
     502:	ef 91       	pop	r30
     504:	bf 91       	pop	r27
     506:	af 91       	pop	r26
     508:	9f 91       	pop	r25
     50a:	8f 91       	pop	r24
     50c:	7f 91       	pop	r23
     50e:	6f 91       	pop	r22
     510:	5f 91       	pop	r21
     512:	4f 91       	pop	r20
     514:	3f 91       	pop	r19
     516:	2f 91       	pop	r18
     518:	0f 90       	pop	r0
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	0f 90       	pop	r0
     51e:	1f 90       	pop	r1
     520:	18 95       	reti

00000522 <__vector_9>:

void __vector_9(void) __attribute__((signal,__INTR_ATTRS));
void __vector_9(void)
{
     522:	1f 92       	push	r1
     524:	0f 92       	push	r0
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	0f 92       	push	r0
     52a:	11 24       	eor	r1, r1
     52c:	2f 93       	push	r18
     52e:	3f 93       	push	r19
     530:	4f 93       	push	r20
     532:	5f 93       	push	r21
     534:	6f 93       	push	r22
     536:	7f 93       	push	r23
     538:	8f 93       	push	r24
     53a:	9f 93       	push	r25
     53c:	af 93       	push	r26
     53e:	bf 93       	push	r27
     540:	ef 93       	push	r30
     542:	ff 93       	push	r31
  TIMER1OVF();
     544:	e0 91 8c 00 	lds	r30, 0x008C
     548:	f0 91 8d 00 	lds	r31, 0x008D
     54c:	09 95       	icall
}
     54e:	ff 91       	pop	r31
     550:	ef 91       	pop	r30
     552:	bf 91       	pop	r27
     554:	af 91       	pop	r26
     556:	9f 91       	pop	r25
     558:	8f 91       	pop	r24
     55a:	7f 91       	pop	r23
     55c:	6f 91       	pop	r22
     55e:	5f 91       	pop	r21
     560:	4f 91       	pop	r20
     562:	3f 91       	pop	r19
     564:	2f 91       	pop	r18
     566:	0f 90       	pop	r0
     568:	0f be       	out	0x3f, r0	; 63
     56a:	0f 90       	pop	r0
     56c:	1f 90       	pop	r1
     56e:	18 95       	reti

00000570 <__vector_10>:

void __vector_10(void) __attribute__((signal,__INTR_ATTRS));
void __vector_10(void)
{
     570:	1f 92       	push	r1
     572:	0f 92       	push	r0
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	0f 92       	push	r0
     578:	11 24       	eor	r1, r1
     57a:	2f 93       	push	r18
     57c:	3f 93       	push	r19
     57e:	4f 93       	push	r20
     580:	5f 93       	push	r21
     582:	6f 93       	push	r22
     584:	7f 93       	push	r23
     586:	8f 93       	push	r24
     588:	9f 93       	push	r25
     58a:	af 93       	push	r26
     58c:	bf 93       	push	r27
     58e:	ef 93       	push	r30
     590:	ff 93       	push	r31

  TIMER0COMP();
     592:	e0 91 62 00 	lds	r30, 0x0062
     596:	f0 91 63 00 	lds	r31, 0x0063
     59a:	09 95       	icall
}
     59c:	ff 91       	pop	r31
     59e:	ef 91       	pop	r30
     5a0:	bf 91       	pop	r27
     5a2:	af 91       	pop	r26
     5a4:	9f 91       	pop	r25
     5a6:	8f 91       	pop	r24
     5a8:	7f 91       	pop	r23
     5aa:	6f 91       	pop	r22
     5ac:	5f 91       	pop	r21
     5ae:	4f 91       	pop	r20
     5b0:	3f 91       	pop	r19
     5b2:	2f 91       	pop	r18
     5b4:	0f 90       	pop	r0
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	0f 90       	pop	r0
     5ba:	1f 90       	pop	r1
     5bc:	18 95       	reti

000005be <__vector_11>:

void __vector_11(void) __attribute__((signal,__INTR_ATTRS));
void __vector_11(void)
{
     5be:	1f 92       	push	r1
     5c0:	0f 92       	push	r0
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	0f 92       	push	r0
     5c6:	11 24       	eor	r1, r1
     5c8:	2f 93       	push	r18
     5ca:	3f 93       	push	r19
     5cc:	4f 93       	push	r20
     5ce:	5f 93       	push	r21
     5d0:	6f 93       	push	r22
     5d2:	7f 93       	push	r23
     5d4:	8f 93       	push	r24
     5d6:	9f 93       	push	r25
     5d8:	af 93       	push	r26
     5da:	bf 93       	push	r27
     5dc:	ef 93       	push	r30
     5de:	ff 93       	push	r31

  TIMER0OVF_INT();
     5e0:	e0 91 60 00 	lds	r30, 0x0060
     5e4:	f0 91 61 00 	lds	r31, 0x0061
     5e8:	09 95       	icall
}
     5ea:	ff 91       	pop	r31
     5ec:	ef 91       	pop	r30
     5ee:	bf 91       	pop	r27
     5f0:	af 91       	pop	r26
     5f2:	9f 91       	pop	r25
     5f4:	8f 91       	pop	r24
     5f6:	7f 91       	pop	r23
     5f8:	6f 91       	pop	r22
     5fa:	5f 91       	pop	r21
     5fc:	4f 91       	pop	r20
     5fe:	3f 91       	pop	r19
     600:	2f 91       	pop	r18
     602:	0f 90       	pop	r0
     604:	0f be       	out	0x3f, r0	; 63
     606:	0f 90       	pop	r0
     608:	1f 90       	pop	r1
     60a:	18 95       	reti

0000060c <__vector_12>:

void __vector_12(void) __attribute__((signal,__INTR_ATTRS));
void __vector_12(void)
{
     60c:	1f 92       	push	r1
     60e:	0f 92       	push	r0
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	0f 92       	push	r0
     614:	11 24       	eor	r1, r1
     616:	2f 93       	push	r18
     618:	3f 93       	push	r19
     61a:	4f 93       	push	r20
     61c:	5f 93       	push	r21
     61e:	6f 93       	push	r22
     620:	7f 93       	push	r23
     622:	8f 93       	push	r24
     624:	9f 93       	push	r25
     626:	af 93       	push	r26
     628:	bf 93       	push	r27
     62a:	ef 93       	push	r30
     62c:	ff 93       	push	r31
  SPI_STC();
     62e:	e0 91 7a 00 	lds	r30, 0x007A
     632:	f0 91 7b 00 	lds	r31, 0x007B
     636:	09 95       	icall
}
     638:	ff 91       	pop	r31
     63a:	ef 91       	pop	r30
     63c:	bf 91       	pop	r27
     63e:	af 91       	pop	r26
     640:	9f 91       	pop	r25
     642:	8f 91       	pop	r24
     644:	7f 91       	pop	r23
     646:	6f 91       	pop	r22
     648:	5f 91       	pop	r21
     64a:	4f 91       	pop	r20
     64c:	3f 91       	pop	r19
     64e:	2f 91       	pop	r18
     650:	0f 90       	pop	r0
     652:	0f be       	out	0x3f, r0	; 63
     654:	0f 90       	pop	r0
     656:	1f 90       	pop	r1
     658:	18 95       	reti

0000065a <__vector_13>:

void __vector_13(void) __attribute__((signal,__INTR_ATTRS));
void __vector_13(void)
{
     65a:	1f 92       	push	r1
     65c:	0f 92       	push	r0
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	0f 92       	push	r0
     662:	11 24       	eor	r1, r1
     664:	2f 93       	push	r18
     666:	3f 93       	push	r19
     668:	4f 93       	push	r20
     66a:	5f 93       	push	r21
     66c:	6f 93       	push	r22
     66e:	7f 93       	push	r23
     670:	8f 93       	push	r24
     672:	9f 93       	push	r25
     674:	af 93       	push	r26
     676:	bf 93       	push	r27
     678:	ef 93       	push	r30
     67a:	ff 93       	push	r31
  USART_RXC();
     67c:	e0 91 70 00 	lds	r30, 0x0070
     680:	f0 91 71 00 	lds	r31, 0x0071
     684:	09 95       	icall
}
     686:	ff 91       	pop	r31
     688:	ef 91       	pop	r30
     68a:	bf 91       	pop	r27
     68c:	af 91       	pop	r26
     68e:	9f 91       	pop	r25
     690:	8f 91       	pop	r24
     692:	7f 91       	pop	r23
     694:	6f 91       	pop	r22
     696:	5f 91       	pop	r21
     698:	4f 91       	pop	r20
     69a:	3f 91       	pop	r19
     69c:	2f 91       	pop	r18
     69e:	0f 90       	pop	r0
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	0f 90       	pop	r0
     6a4:	1f 90       	pop	r1
     6a6:	18 95       	reti

000006a8 <__vector_14>:

void __vector_14(void) __attribute__((signal,__INTR_ATTRS));
void __vector_14(void)
{
     6a8:	1f 92       	push	r1
     6aa:	0f 92       	push	r0
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	0f 92       	push	r0
     6b0:	11 24       	eor	r1, r1
     6b2:	2f 93       	push	r18
     6b4:	3f 93       	push	r19
     6b6:	4f 93       	push	r20
     6b8:	5f 93       	push	r21
     6ba:	6f 93       	push	r22
     6bc:	7f 93       	push	r23
     6be:	8f 93       	push	r24
     6c0:	9f 93       	push	r25
     6c2:	af 93       	push	r26
     6c4:	bf 93       	push	r27
     6c6:	ef 93       	push	r30
     6c8:	ff 93       	push	r31
  USART_UDRE();
     6ca:	e0 91 86 00 	lds	r30, 0x0086
     6ce:	f0 91 87 00 	lds	r31, 0x0087
     6d2:	09 95       	icall
}
     6d4:	ff 91       	pop	r31
     6d6:	ef 91       	pop	r30
     6d8:	bf 91       	pop	r27
     6da:	af 91       	pop	r26
     6dc:	9f 91       	pop	r25
     6de:	8f 91       	pop	r24
     6e0:	7f 91       	pop	r23
     6e2:	6f 91       	pop	r22
     6e4:	5f 91       	pop	r21
     6e6:	4f 91       	pop	r20
     6e8:	3f 91       	pop	r19
     6ea:	2f 91       	pop	r18
     6ec:	0f 90       	pop	r0
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	0f 90       	pop	r0
     6f2:	1f 90       	pop	r1
     6f4:	18 95       	reti

000006f6 <__vector_15>:

void __vector_15(void) __attribute__((signal,__INTR_ATTRS));
void __vector_15(void)
{
     6f6:	1f 92       	push	r1
     6f8:	0f 92       	push	r0
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	0f 92       	push	r0
     6fe:	11 24       	eor	r1, r1
     700:	2f 93       	push	r18
     702:	3f 93       	push	r19
     704:	4f 93       	push	r20
     706:	5f 93       	push	r21
     708:	6f 93       	push	r22
     70a:	7f 93       	push	r23
     70c:	8f 93       	push	r24
     70e:	9f 93       	push	r25
     710:	af 93       	push	r26
     712:	bf 93       	push	r27
     714:	ef 93       	push	r30
     716:	ff 93       	push	r31
  USART_TXC();
     718:	e0 91 84 00 	lds	r30, 0x0084
     71c:	f0 91 85 00 	lds	r31, 0x0085
     720:	09 95       	icall
}
     722:	ff 91       	pop	r31
     724:	ef 91       	pop	r30
     726:	bf 91       	pop	r27
     728:	af 91       	pop	r26
     72a:	9f 91       	pop	r25
     72c:	8f 91       	pop	r24
     72e:	7f 91       	pop	r23
     730:	6f 91       	pop	r22
     732:	5f 91       	pop	r21
     734:	4f 91       	pop	r20
     736:	3f 91       	pop	r19
     738:	2f 91       	pop	r18
     73a:	0f 90       	pop	r0
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	0f 90       	pop	r0
     740:	1f 90       	pop	r1
     742:	18 95       	reti

00000744 <__vector_16>:

void __vector_16(void) __attribute__((signal,__INTR_ATTRS));
void __vector_16(void)
{
     744:	1f 92       	push	r1
     746:	0f 92       	push	r0
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	0f 92       	push	r0
     74c:	11 24       	eor	r1, r1
     74e:	2f 93       	push	r18
     750:	3f 93       	push	r19
     752:	4f 93       	push	r20
     754:	5f 93       	push	r21
     756:	6f 93       	push	r22
     758:	7f 93       	push	r23
     75a:	8f 93       	push	r24
     75c:	9f 93       	push	r25
     75e:	af 93       	push	r26
     760:	bf 93       	push	r27
     762:	ef 93       	push	r30
     764:	ff 93       	push	r31
  ADC_INT();
     766:	e0 91 7e 00 	lds	r30, 0x007E
     76a:	f0 91 7f 00 	lds	r31, 0x007F
     76e:	09 95       	icall
}
     770:	ff 91       	pop	r31
     772:	ef 91       	pop	r30
     774:	bf 91       	pop	r27
     776:	af 91       	pop	r26
     778:	9f 91       	pop	r25
     77a:	8f 91       	pop	r24
     77c:	7f 91       	pop	r23
     77e:	6f 91       	pop	r22
     780:	5f 91       	pop	r21
     782:	4f 91       	pop	r20
     784:	3f 91       	pop	r19
     786:	2f 91       	pop	r18
     788:	0f 90       	pop	r0
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	0f 90       	pop	r0
     78e:	1f 90       	pop	r1
     790:	18 95       	reti

00000792 <__vector_17>:

void __vector_17(void) __attribute__((signal,__INTR_ATTRS));
void __vector_17(void)
{
     792:	1f 92       	push	r1
     794:	0f 92       	push	r0
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	0f 92       	push	r0
     79a:	11 24       	eor	r1, r1
     79c:	2f 93       	push	r18
     79e:	3f 93       	push	r19
     7a0:	4f 93       	push	r20
     7a2:	5f 93       	push	r21
     7a4:	6f 93       	push	r22
     7a6:	7f 93       	push	r23
     7a8:	8f 93       	push	r24
     7aa:	9f 93       	push	r25
     7ac:	af 93       	push	r26
     7ae:	bf 93       	push	r27
     7b0:	ef 93       	push	r30
     7b2:	ff 93       	push	r31
  EE_RDY();
     7b4:	e0 91 80 00 	lds	r30, 0x0080
     7b8:	f0 91 81 00 	lds	r31, 0x0081
     7bc:	09 95       	icall
}
     7be:	ff 91       	pop	r31
     7c0:	ef 91       	pop	r30
     7c2:	bf 91       	pop	r27
     7c4:	af 91       	pop	r26
     7c6:	9f 91       	pop	r25
     7c8:	8f 91       	pop	r24
     7ca:	7f 91       	pop	r23
     7cc:	6f 91       	pop	r22
     7ce:	5f 91       	pop	r21
     7d0:	4f 91       	pop	r20
     7d2:	3f 91       	pop	r19
     7d4:	2f 91       	pop	r18
     7d6:	0f 90       	pop	r0
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	0f 90       	pop	r0
     7dc:	1f 90       	pop	r1
     7de:	18 95       	reti

000007e0 <__vector_18>:

void __vector_18(void) __attribute__((signal,__INTR_ATTRS));
void __vector_18(void)
{
     7e0:	1f 92       	push	r1
     7e2:	0f 92       	push	r0
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	0f 92       	push	r0
     7e8:	11 24       	eor	r1, r1
     7ea:	2f 93       	push	r18
     7ec:	3f 93       	push	r19
     7ee:	4f 93       	push	r20
     7f0:	5f 93       	push	r21
     7f2:	6f 93       	push	r22
     7f4:	7f 93       	push	r23
     7f6:	8f 93       	push	r24
     7f8:	9f 93       	push	r25
     7fa:	af 93       	push	r26
     7fc:	bf 93       	push	r27
     7fe:	ef 93       	push	r30
     800:	ff 93       	push	r31
  ANA_COMP();
     802:	e0 91 7c 00 	lds	r30, 0x007C
     806:	f0 91 7d 00 	lds	r31, 0x007D
     80a:	09 95       	icall
}
     80c:	ff 91       	pop	r31
     80e:	ef 91       	pop	r30
     810:	bf 91       	pop	r27
     812:	af 91       	pop	r26
     814:	9f 91       	pop	r25
     816:	8f 91       	pop	r24
     818:	7f 91       	pop	r23
     81a:	6f 91       	pop	r22
     81c:	5f 91       	pop	r21
     81e:	4f 91       	pop	r20
     820:	3f 91       	pop	r19
     822:	2f 91       	pop	r18
     824:	0f 90       	pop	r0
     826:	0f be       	out	0x3f, r0	; 63
     828:	0f 90       	pop	r0
     82a:	1f 90       	pop	r1
     82c:	18 95       	reti

0000082e <__vector_19>:

void __vector_19(void) __attribute__((signal,__INTR_ATTRS));
void __vector_19(void)
{
     82e:	1f 92       	push	r1
     830:	0f 92       	push	r0
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	0f 92       	push	r0
     836:	11 24       	eor	r1, r1
     838:	2f 93       	push	r18
     83a:	3f 93       	push	r19
     83c:	4f 93       	push	r20
     83e:	5f 93       	push	r21
     840:	6f 93       	push	r22
     842:	7f 93       	push	r23
     844:	8f 93       	push	r24
     846:	9f 93       	push	r25
     848:	af 93       	push	r26
     84a:	bf 93       	push	r27
     84c:	ef 93       	push	r30
     84e:	ff 93       	push	r31
  TWI_I2C();
     850:	e0 91 6e 00 	lds	r30, 0x006E
     854:	f0 91 6f 00 	lds	r31, 0x006F
     858:	09 95       	icall
}
     85a:	ff 91       	pop	r31
     85c:	ef 91       	pop	r30
     85e:	bf 91       	pop	r27
     860:	af 91       	pop	r26
     862:	9f 91       	pop	r25
     864:	8f 91       	pop	r24
     866:	7f 91       	pop	r23
     868:	6f 91       	pop	r22
     86a:	5f 91       	pop	r21
     86c:	4f 91       	pop	r20
     86e:	3f 91       	pop	r19
     870:	2f 91       	pop	r18
     872:	0f 90       	pop	r0
     874:	0f be       	out	0x3f, r0	; 63
     876:	0f 90       	pop	r0
     878:	1f 90       	pop	r1
     87a:	18 95       	reti

0000087c <__vector_20>:

void __vector_20(void) __attribute__((signal,__INTR_ATTRS));
void __vector_20(void)
{
     87c:	1f 92       	push	r1
     87e:	0f 92       	push	r0
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	0f 92       	push	r0
     884:	11 24       	eor	r1, r1
     886:	2f 93       	push	r18
     888:	3f 93       	push	r19
     88a:	4f 93       	push	r20
     88c:	5f 93       	push	r21
     88e:	6f 93       	push	r22
     890:	7f 93       	push	r23
     892:	8f 93       	push	r24
     894:	9f 93       	push	r25
     896:	af 93       	push	r26
     898:	bf 93       	push	r27
     89a:	ef 93       	push	r30
     89c:	ff 93       	push	r31
  SPM_RDY();
     89e:	e0 91 74 00 	lds	r30, 0x0074
     8a2:	f0 91 75 00 	lds	r31, 0x0075
     8a6:	09 95       	icall
}
     8a8:	ff 91       	pop	r31
     8aa:	ef 91       	pop	r30
     8ac:	bf 91       	pop	r27
     8ae:	af 91       	pop	r26
     8b0:	9f 91       	pop	r25
     8b2:	8f 91       	pop	r24
     8b4:	7f 91       	pop	r23
     8b6:	6f 91       	pop	r22
     8b8:	5f 91       	pop	r21
     8ba:	4f 91       	pop	r20
     8bc:	3f 91       	pop	r19
     8be:	2f 91       	pop	r18
     8c0:	0f 90       	pop	r0
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	0f 90       	pop	r0
     8c6:	1f 90       	pop	r1
     8c8:	18 95       	reti

000008ca <Led_Init>:
	LED_3

*/
void Led_Init(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     8ca:	81 30       	cpi	r24, 0x01	; 1
     8cc:	69 f0       	breq	.+26     	; 0x8e8 <Led_Init+0x1e>
     8ce:	81 30       	cpi	r24, 0x01	; 1
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <Led_Init+0x12>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	79 f0       	breq	.+30     	; 0x8f4 <Led_Init+0x2a>
     8d6:	83 30       	cpi	r24, 0x03	; 3
     8d8:	c1 f4       	brne	.+48     	; 0x90a <Led_Init+0x40>
     8da:	12 c0       	rjmp	.+36     	; 0x900 <Led_Init+0x36>
{
case LED_0:
gpioPinDirection(LED_0_GPIO,LED_0_BIT,HIGH);
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	60 e1       	ldi	r22, 0x10	; 16
     8e0:	4f ef       	ldi	r20, 0xFF	; 255
     8e2:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
break;
     8e6:	08 95       	ret

case LED_1:
gpioPinDirection(LED_1_GPIO,LED_1_BIT,HIGH);
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	60 e2       	ldi	r22, 0x20	; 32
     8ec:	4f ef       	ldi	r20, 0xFF	; 255
     8ee:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
break;
     8f2:	08 95       	ret

case LED_2:
gpioPinDirection(LED_2_GPIO,LED_2_BIT,HIGH);
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	60 e4       	ldi	r22, 0x40	; 64
     8f8:	4f ef       	ldi	r20, 0xFF	; 255
     8fa:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
break;
     8fe:	08 95       	ret

case LED_3:
gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	60 e8       	ldi	r22, 0x80	; 128
     904:	4f ef       	ldi	r20, 0xFF	; 255
     906:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
     90a:	08 95       	ret

0000090c <Led_On>:
}


void Led_On(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     90c:	81 30       	cpi	r24, 0x01	; 1
     90e:	69 f0       	breq	.+26     	; 0x92a <Led_On+0x1e>
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	28 f0       	brcs	.+10     	; 0x91e <Led_On+0x12>
     914:	82 30       	cpi	r24, 0x02	; 2
     916:	79 f0       	breq	.+30     	; 0x936 <Led_On+0x2a>
     918:	83 30       	cpi	r24, 0x03	; 3
     91a:	c1 f4       	brne	.+48     	; 0x94c <Led_On+0x40>
     91c:	12 c0       	rjmp	.+36     	; 0x942 <Led_On+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,HIGH);
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	60 e1       	ldi	r22, 0x10	; 16
     922:	4f ef       	ldi	r20, 0xFF	; 255
     924:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
     928:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,HIGH);
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	60 e2       	ldi	r22, 0x20	; 32
     92e:	4f ef       	ldi	r20, 0xFF	; 255
     930:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
     934:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,HIGH);
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	60 e4       	ldi	r22, 0x40	; 64
     93a:	4f ef       	ldi	r20, 0xFF	; 255
     93c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
     940:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,HIGH);
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	60 e8       	ldi	r22, 0x80	; 128
     946:	4f ef       	ldi	r20, 0xFF	; 255
     948:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
     94c:	08 95       	ret

0000094e <Led_Off>:
}

void Led_Off(En_LedNumber_t en_led_id)
{

switch(en_led_id)
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	69 f0       	breq	.+26     	; 0x96c <Led_Off+0x1e>
     952:	81 30       	cpi	r24, 0x01	; 1
     954:	28 f0       	brcs	.+10     	; 0x960 <Led_Off+0x12>
     956:	82 30       	cpi	r24, 0x02	; 2
     958:	79 f0       	breq	.+30     	; 0x978 <Led_Off+0x2a>
     95a:	83 30       	cpi	r24, 0x03	; 3
     95c:	c1 f4       	brne	.+48     	; 0x98e <Led_Off+0x40>
     95e:	12 c0       	rjmp	.+36     	; 0x984 <Led_Off+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,LOW);
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	60 e1       	ldi	r22, 0x10	; 16
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
     96a:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,LOW);
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	60 e2       	ldi	r22, 0x20	; 32
     970:	40 e0       	ldi	r20, 0x00	; 0
     972:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
     976:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,LOW);
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	60 e4       	ldi	r22, 0x40	; 64
     97c:	40 e0       	ldi	r20, 0x00	; 0
     97e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
break;
     982:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,LOW);
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	60 e8       	ldi	r22, 0x80	; 128
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <gpioPinWrite>
     98e:	08 95       	ret

00000990 <Led_Toggle>:


}
void Led_Toggle(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     990:	81 30       	cpi	r24, 0x01	; 1
     992:	61 f0       	breq	.+24     	; 0x9ac <Led_Toggle+0x1c>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	28 f0       	brcs	.+10     	; 0x9a2 <Led_Toggle+0x12>
     998:	82 30       	cpi	r24, 0x02	; 2
     99a:	69 f0       	breq	.+26     	; 0x9b6 <Led_Toggle+0x26>
     99c:	83 30       	cpi	r24, 0x03	; 3
     99e:	a1 f4       	brne	.+40     	; 0x9c8 <Led_Toggle+0x38>
     9a0:	0f c0       	rjmp	.+30     	; 0x9c0 <Led_Toggle+0x30>
{
case LED_0:
gpioPinToggle(LED_0_GPIO,LED_0_BIT);
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	60 e1       	ldi	r22, 0x10	; 16
     9a6:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
break;
     9aa:	08 95       	ret

case LED_1:
gpioPinToggle(LED_1_GPIO,LED_1_BIT);
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	60 e2       	ldi	r22, 0x20	; 32
     9b0:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
break;
     9b4:	08 95       	ret

case LED_2:
gpioPinToggle(LED_2_GPIO,LED_2_BIT);
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	60 e4       	ldi	r22, 0x40	; 64
     9ba:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
break;
     9be:	08 95       	ret

case LED_3:
gpioPinToggle(LED_3_GPIO,LED_3_BIT);
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	60 e8       	ldi	r22, 0x80	; 128
     9c4:	0e 94 11 01 	call	0x222	; 0x222 <gpioPinToggle>
     9c8:	08 95       	ret

000009ca <pushButtonInit>:
*/
extern uint8_t volatile status_Flag;
void pushButtonInit(En_buttonId_t en_butotn_id)
{

switch(en_butotn_id)
     9ca:	81 30       	cpi	r24, 0x01	; 1
     9cc:	69 f0       	breq	.+26     	; 0x9e8 <pushButtonInit+0x1e>
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	28 f0       	brcs	.+10     	; 0x9dc <pushButtonInit+0x12>
     9d2:	82 30       	cpi	r24, 0x02	; 2
     9d4:	79 f0       	breq	.+30     	; 0x9f4 <pushButtonInit+0x2a>
     9d6:	83 30       	cpi	r24, 0x03	; 3
     9d8:	c1 f4       	brne	.+48     	; 0xa0a <pushButtonInit+0x40>
     9da:	12 c0       	rjmp	.+36     	; 0xa00 <pushButtonInit+0x36>
{
case BTN_0:
{
gpioPinDirection(BTN_0_GPIO,BTN_0_BIT,LOW);
     9dc:	82 e0       	ldi	r24, 0x02	; 2
     9de:	60 e1       	ldi	r22, 0x10	; 16
     9e0:	40 e0       	ldi	r20, 0x00	; 0
     9e2:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>

break;
     9e6:	08 95       	ret
}
case BTN_1:
{
gpioPinDirection(BTN_1_GPIO,BTN_1_BIT,LOW);
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	64 e0       	ldi	r22, 0x04	; 4
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>

break;
     9f2:	08 95       	ret
}
case BTN_2:
{
gpioPinDirection(BTN_2_GPIO,BTN_2_BIT,LOW);
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	64 e0       	ldi	r22, 0x04	; 4
     9f8:	40 e0       	ldi	r20, 0x00	; 0
     9fa:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>

break;
     9fe:	08 95       	ret
}
case BTN_3:
{
gpioPinDirection(BTN_3_GPIO,BTN_3_BIT,LOW);
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	68 e0       	ldi	r22, 0x08	; 8
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	0e 94 97 00 	call	0x12e	; 0x12e <gpioPinDirection>
     a0a:	08 95       	ret

00000a0c <pushButtonGetStatus>:
}

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{

switch(en_butotn_id)
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	e9 f0       	breq	.+58     	; 0xa4a <pushButtonGetStatus+0x3e>
     a10:	81 30       	cpi	r24, 0x01	; 1
     a12:	30 f0       	brcs	.+12     	; 0xa20 <pushButtonGetStatus+0x14>
     a14:	82 30       	cpi	r24, 0x02	; 2
     a16:	61 f1       	breq	.+88     	; 0xa70 <pushButtonGetStatus+0x64>
     a18:	83 30       	cpi	r24, 0x03	; 3
     a1a:	09 f0       	breq	.+2      	; 0xa1e <pushButtonGetStatus+0x12>
     a1c:	4f c0       	rjmp	.+158    	; 0xabc <pushButtonGetStatus+0xb0>
     a1e:	3b c0       	rjmp	.+118    	; 0xa96 <pushButtonGetStatus+0x8a>
{
case BTN_0:
{
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	60 e1       	ldi	r22, 0x10	; 16
     a24:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
     a28:	81 30       	cpi	r24, 0x01	; 1
     a2a:	09 f0       	breq	.+2      	; 0xa2e <pushButtonGetStatus+0x22>
     a2c:	48 c0       	rjmp	.+144    	; 0xabe <pushButtonGetStatus+0xb2>
{ timer0DelayMs(50);
     a2e:	82 e3       	ldi	r24, 0x32	; 50
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 43 06 	call	0xc86	; 0xc86 <timer0DelayMs>
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
     a36:	82 e0       	ldi	r24, 0x02	; 2
     a38:	60 e1       	ldi	r22, 0x10	; 16
     a3a:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
	return Pressed;
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	81 30       	cpi	r24, 0x01	; 1
     a42:	09 f4       	brne	.+2      	; 0xa46 <pushButtonGetStatus+0x3a>
     a44:	43 c0       	rjmp	.+134    	; 0xacc <pushButtonGetStatus+0xc0>
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	41 c0       	rjmp	.+130    	; 0xacc <pushButtonGetStatus+0xc0>
}else{return Released;}
break;
}
case BTN_1:
{
if(gpioPinRead(BTN_1_GPIO,BTN_1_BIT) == Pressed)
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	64 e0       	ldi	r22, 0x04	; 4
     a4e:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
     a52:	81 30       	cpi	r24, 0x01	; 1
     a54:	b1 f5       	brne	.+108    	; 0xac2 <pushButtonGetStatus+0xb6>
{
timer0DelayMs(50);
     a56:	82 e3       	ldi	r24, 0x32	; 50
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 43 06 	call	0xc86	; 0xc86 <timer0DelayMs>
if(gpioPinRead(BTN_1_GPIO,BTN_1_BIT) == Pressed)
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	64 e0       	ldi	r22, 0x04	; 4
     a62:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
case BTN_0:
{
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
{ timer0DelayMs(50);
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
	return Pressed;
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	81 30       	cpi	r24, 0x01	; 1
     a6a:	81 f1       	breq	.+96     	; 0xacc <pushButtonGetStatus+0xc0>
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	2e c0       	rjmp	.+92     	; 0xacc <pushButtonGetStatus+0xc0>
}else{return Released;}
break;
}
case BTN_2:
{
if(gpioPinRead(BTN_2_GPIO,BTN_2_BIT) == Pressed)
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	64 e0       	ldi	r22, 0x04	; 4
     a74:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
     a78:	81 30       	cpi	r24, 0x01	; 1
     a7a:	29 f5       	brne	.+74     	; 0xac6 <pushButtonGetStatus+0xba>
{
	timer0DelayMs(50);
     a7c:	82 e3       	ldi	r24, 0x32	; 50
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 43 06 	call	0xc86	; 0xc86 <timer0DelayMs>
	if(gpioPinRead(BTN_2_GPIO,BTN_2_BIT) == Pressed)
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	64 e0       	ldi	r22, 0x04	; 4
     a88:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
case BTN_0:
{
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
{ timer0DelayMs(50);
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
	return Pressed;
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	81 30       	cpi	r24, 0x01	; 1
     a90:	e9 f0       	breq	.+58     	; 0xacc <pushButtonGetStatus+0xc0>
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	1b c0       	rjmp	.+54     	; 0xacc <pushButtonGetStatus+0xc0>
}else{return Released;}
break;
}
case BTN_3:
{
if(gpioPinRead(BTN_3_GPIO,BTN_3_BIT) == Pressed)
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	68 e0       	ldi	r22, 0x08	; 8
     a9a:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
     a9e:	81 30       	cpi	r24, 0x01	; 1
     aa0:	a1 f4       	brne	.+40     	; 0xaca <pushButtonGetStatus+0xbe>
{
	timer0DelayMs(50);
     aa2:	82 e3       	ldi	r24, 0x32	; 50
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	0e 94 43 06 	call	0xc86	; 0xc86 <timer0DelayMs>
	if(gpioPinRead(BTN_3_GPIO,BTN_3_BIT) == Pressed)
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	68 e0       	ldi	r22, 0x08	; 8
     aae:	0e 94 2a 01 	call	0x254	; 0x254 <gpioPinRead>
case BTN_0:
{
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
{ timer0DelayMs(50);
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
	return Pressed;
     ab2:	91 e0       	ldi	r25, 0x01	; 1
     ab4:	81 30       	cpi	r24, 0x01	; 1
     ab6:	51 f0       	breq	.+20     	; 0xacc <pushButtonGetStatus+0xc0>
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	08 c0       	rjmp	.+16     	; 0xacc <pushButtonGetStatus+0xc0>
     abc:	08 95       	ret
	else {return Released;}
}else{return Released;}
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	05 c0       	rjmp	.+10     	; 0xacc <pushButtonGetStatus+0xc0>
{
timer0DelayMs(50);
if(gpioPinRead(BTN_1_GPIO,BTN_1_BIT) == Pressed)
return Pressed;
	else {return Released;}
}else{return Released;}
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	03 c0       	rjmp	.+6      	; 0xacc <pushButtonGetStatus+0xc0>
{
	timer0DelayMs(50);
	if(gpioPinRead(BTN_2_GPIO,BTN_2_BIT) == Pressed)
	return Pressed;
else {return Released;}
}else{return Released;}
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	01 c0       	rjmp	.+2      	; 0xacc <pushButtonGetStatus+0xc0>
{
	timer0DelayMs(50);
	if(gpioPinRead(BTN_3_GPIO,BTN_3_BIT) == Pressed)
	return Pressed;
else {return Released;}
}else{return Released;}
     aca:	90 e0       	ldi	r25, 0x00	; 0
break;
}

}
}
     acc:	89 2f       	mov	r24, r25
     ace:	08 95       	ret

00000ad0 <check_button>:

void check_button(void)
{//	Led_Toggle(LED_0);
	MCUCSR ^= (1<<6);
     ad0:	94 b7       	in	r25, 0x34	; 52
     ad2:	80 e4       	ldi	r24, 0x40	; 64
     ad4:	89 27       	eor	r24, r25
     ad6:	84 bf       	out	0x34, r24	; 52
	if(((MCUCSR>>6)&1))
     ad8:	84 b7       	in	r24, 0x34	; 52
     ada:	82 95       	swap	r24
     adc:	86 95       	lsr	r24
     ade:	86 95       	lsr	r24
     ae0:	83 70       	andi	r24, 0x03	; 3
     ae2:	80 ff       	sbrs	r24, 0
     ae4:	03 c0       	rjmp	.+6      	; 0xaec <check_button+0x1c>
	{
		timer0Start();
     ae6:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <timer0Start>
     aea:	08 95       	ret
	}
	else
	{
		timer0Stop();
     aec:	0e 94 ed 05 	call	0xbda	; 0xbda <timer0Stop>
     af0:	08 95       	ret

00000af2 <softwareDelayMs>:
 *
 * Created: 17/01/2020 03:54:09 م
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
     af2:	ab 01       	movw	r20, r22
     af4:	bc 01       	movw	r22, r24
uint32_t Local_Nope_counter=0;
while (u32_delay_in_ms > 0)
     af6:	41 15       	cp	r20, r1
     af8:	51 05       	cpc	r21, r1
     afa:	61 05       	cpc	r22, r1
     afc:	71 05       	cpc	r23, r1
     afe:	61 f4       	brne	.+24     	; 0xb18 <softwareDelayMs+0x26>
     b00:	08 95       	ret
     b02:	01 96       	adiw	r24, 0x01	; 1
{
	for(Local_Nope_counter = 0 ;Local_Nope_counter<1000;Local_Nope_counter++);
     b04:	e3 e0       	ldi	r30, 0x03	; 3
     b06:	88 3e       	cpi	r24, 0xE8	; 232
     b08:	9e 07       	cpc	r25, r30
     b0a:	d9 f7       	brne	.-10     	; 0xb02 <softwareDelayMs+0x10>

u32_delay_in_ms--;	
     b0c:	41 50       	subi	r20, 0x01	; 1
     b0e:	50 40       	sbci	r21, 0x00	; 0
     b10:	60 40       	sbci	r22, 0x00	; 0
     b12:	70 40       	sbci	r23, 0x00	; 0
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
uint32_t Local_Nope_counter=0;
while (u32_delay_in_ms > 0)
     b14:	19 f4       	brne	.+6      	; 0xb1c <softwareDelayMs+0x2a>
     b16:	08 95       	ret
 *
 * Created: 17/01/2020 03:54:09 م
 *  Author: mo
 */ 
#include "softwareDelay.h"
void softwareDelayMs(uint32_t u32_delay_in_ms){
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	c9 01       	movw	r24, r18
     b1e:	f1 cf       	rjmp	.-30     	; 0xb02 <softwareDelayMs+0x10>

00000b20 <main>:
#include "led.h"
#include "ledConfig.h"
#include "util/delay.h"
int main(void)
{volatile uint16_t x,y;
	gpioPortDirection(GPIOB,HIGH);
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	6f ef       	ldi	r22, 0xFF	; 255
     b24:	0e 94 49 00 	call	0x92	; 0x92 <gpioPortDirection>
	gpioPortDirection(GPIOC,HIGH);
     b28:	82 e0       	ldi	r24, 0x02	; 2
     b2a:	6f ef       	ldi	r22, 0xFF	; 255
     b2c:	0e 94 49 00 	call	0x92	; 0x92 <gpioPortDirection>

//	gpioPortWrite(GPIOB,LOW);
	SwICU_Init(SwICU_EdgeRisiging);
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	0e 94 bd 05 	call	0xb7a	; 0xb7a <SwICU_Init>
	 
	while(1)
    {
//timer0MakePulse();
PORTC_DATA |=0xff;
     b36:	1f ef       	ldi	r17, 0xFF	; 255
_delay_ms(1);
PORTC_DATA &=0x00;
//_delay_ms(1);
SwICU_Start();
SwICU_Read(&u8_ovf_counter);
     b38:	c8 e6       	ldi	r28, 0x68	; 104
     b3a:	d0 e0       	ldi	r29, 0x00	; 0
	SwICU_Init(SwICU_EdgeRisiging);
	 
	while(1)
    {
//timer0MakePulse();
PORTC_DATA |=0xff;
     b3c:	85 b3       	in	r24, 0x15	; 21
     b3e:	15 bb       	out	0x15, r17	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b40:	8f e9       	ldi	r24, 0x9F	; 159
     b42:	9f e0       	ldi	r25, 0x0F	; 15
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	f1 f7       	brne	.-4      	; 0xb44 <main+0x24>
     b48:	00 c0       	rjmp	.+0      	; 0xb4a <main+0x2a>
     b4a:	00 00       	nop
_delay_ms(1);
PORTC_DATA &=0x00;
     b4c:	85 b3       	in	r24, 0x15	; 21
     b4e:	15 ba       	out	0x15, r1	; 21
//_delay_ms(1);
SwICU_Start();
     b50:	0e 94 dd 05 	call	0xbba	; 0xbba <SwICU_Start>
SwICU_Read(&u8_ovf_counter);
     b54:	ce 01       	movw	r24, r28
     b56:	0e 94 d2 05 	call	0xba4	; 0xba4 <SwICU_Read>
SwICU_Stop();
     b5a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <SwICU_Stop>
     b5e:	ee cf       	rjmp	.-36     	; 0xb3c <main+0x1c>

00000b60 <SwICU_SetCfgEdge>:
SwICU_SetCfgEdge(SwICU_EdgeRisiging);
}

void SwICU_SetCfgEdge(EN_SwICU_Edge_t a_en_inputCaptureEdgeedge)
{
	switch (a_en_inputCaptureEdgeedge) {
     b60:	88 23       	and	r24, r24
     b62:	19 f0       	breq	.+6      	; 0xb6a <SwICU_SetCfgEdge+0xa>
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	41 f4       	brne	.+16     	; 0xb78 <SwICU_SetCfgEdge+0x18>
     b68:	04 c0       	rjmp	.+8      	; 0xb72 <SwICU_SetCfgEdge+0x12>
		case SwICU_EdgeFalling :
	{
		CLEAR_BIT(MCUCSR,6);
     b6a:	84 b7       	in	r24, 0x34	; 52
     b6c:	8f 7b       	andi	r24, 0xBF	; 191
     b6e:	84 bf       	out	0x34, r24	; 52
		break;
     b70:	08 95       	ret
	}
	case SwICU_EdgeRisiging:
	{
	SET_BIT(MCUCSR,6);
     b72:	84 b7       	in	r24, 0x34	; 52
     b74:	80 64       	ori	r24, 0x40	; 64
     b76:	84 bf       	out	0x34, r24	; 52
     b78:	08 95       	ret

00000b7a <SwICU_Init>:
#include "SwICU.h"
#include "Interrupts.h"
#include "timers.h"
#include "registers.h"
void SwICU_Init(EN_SwICU_Edge_t a_en_inputCaptureEdge)
{
     b7a:	ef 92       	push	r14
     b7c:	0f 93       	push	r16
/*Make External interrup work first via Any logical change*/
timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_NO,0,0,T0_INTERRUPT_NORMAL);
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	41 e0       	ldi	r20, 0x01	; 1
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	00 e0       	ldi	r16, 0x00	; 0
     b88:	ee 24       	eor	r14, r14
     b8a:	e3 94       	inc	r14
     b8c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <timer0Init>
G_interrupt_Enable();
     b90:	0e 94 45 01 	call	0x28a	; 0x28a <G_interrupt_Enable>
EX_interrupt_enable2();
     b94:	0e 94 49 01 	call	0x292	; 0x292 <EX_interrupt_enable2>
/*change the interrupt activation status*/
SwICU_SetCfgEdge(SwICU_EdgeRisiging);
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	0e 94 b0 05 	call	0xb60	; 0xb60 <SwICU_SetCfgEdge>
}
     b9e:	0f 91       	pop	r16
     ba0:	ef 90       	pop	r14
     ba2:	08 95       	ret

00000ba4 <SwICU_Read>:
	}

}
void SwICU_Read(volatile uint8_t * a_pu8_capt)
{
	PORTB_DATA =(((* a_pu8_capt)/4)<<4);
     ba4:	fc 01       	movw	r30, r24
     ba6:	80 81       	ld	r24, Z
     ba8:	86 95       	lsr	r24
     baa:	86 95       	lsr	r24
     bac:	82 95       	swap	r24
     bae:	80 7f       	andi	r24, 0xF0	; 240
     bb0:	88 bb       	out	0x18, r24	; 24
}
     bb2:	08 95       	ret

00000bb4 <SwICU_Stop>:

void SwICU_Stop(void)
{
timer0Stop();
     bb4:	0e 94 ed 05 	call	0xbda	; 0xbda <timer0Stop>
}
     bb8:	08 95       	ret

00000bba <SwICU_Start>:

void SwICU_Start(void)
{

timer0Start();
     bba:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <timer0Start>

}
     bbe:	08 95       	ret

00000bc0 <timer0Set>:
}

}
void timer0Set(uint8_t u8_value)
{
TCNT0 =	u8_value;
     bc0:	82 bf       	out	0x32, r24	; 50
}
     bc2:	08 95       	ret

00000bc4 <timer0Read>:

uint8_t timer0Read(void)
{
	 return TCNT0;
     bc4:	82 b7       	in	r24, 0x32	; 50
}
     bc6:	08 95       	ret

00000bc8 <timer0Start>:
Depending on prescaler	x     X    X

*/
void timer0Start(void)
{
	 TCCR0 &= (0xF8);
     bc8:	83 b7       	in	r24, 0x33	; 51
     bca:	88 7f       	andi	r24, 0xF8	; 248
     bcc:	83 bf       	out	0x33, r24	; 51
	 TCCR0 |= Prescaler_Value;
     bce:	93 b7       	in	r25, 0x33	; 51
     bd0:	80 91 6d 00 	lds	r24, 0x006D
     bd4:	89 2b       	or	r24, r25
     bd6:	83 bf       	out	0x33, r24	; 51
}
     bd8:	08 95       	ret

00000bda <timer0Stop>:
						      0     0    0
*/
void timer0Stop(void)
 {

TCCR0 &= (0xF8);
     bda:	83 b7       	in	r24, 0x33	; 51
     bdc:	88 7f       	andi	r24, 0xF8	; 248
     bde:	83 bf       	out	0x33, r24	; 51

 }
     be0:	08 95       	ret

00000be2 <timer0Init>:
uint8_t pooling=0;
uint8_t Prescaler_Value2=0;
volatile uint8_t pwm_time_on=0,flag=0;
volatile uint8_t u8_ovf_counter=0;
void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal,uint8_t u8_initialValue, uint8_t u8_outputCompare,En_timer0Interrupt_t en_interruptMask)
{
     be2:	ef 92       	push	r14
     be4:	0f 93       	push	r16
if(en_prescal == T0_NO_CLOCK)
     be6:	44 23       	and	r20, r20
     be8:	19 f4       	brne	.+6      	; 0xbf0 <timer0Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer0Stop();
     bea:	0e 94 ed 05 	call	0xbda	; 0xbda <timer0Stop>
     bee:	48 c0       	rjmp	.+144    	; 0xc80 <timer0Init+0x9e>
}
else
{
TCCR0 |= en_mode|en_prescal;
     bf0:	93 b7       	in	r25, 0x33	; 51
     bf2:	89 2b       	or	r24, r25
     bf4:	84 2b       	or	r24, r20
     bf6:	83 bf       	out	0x33, r24	; 51
Prescaler_Value=en_prescal;
     bf8:	40 93 6d 00 	sts	0x006D, r20
TCNT0 = u8_initialValue;
     bfc:	22 bf       	out	0x32, r18	; 50
switch(en_OC0){
     bfe:	60 31       	cpi	r22, 0x10	; 16
     c00:	71 f0       	breq	.+28     	; 0xc1e <timer0Init+0x3c>
     c02:	61 31       	cpi	r22, 0x11	; 17
     c04:	18 f4       	brcc	.+6      	; 0xc0c <timer0Init+0x2a>
     c06:	66 23       	and	r22, r22
     c08:	31 f0       	breq	.+12     	; 0xc16 <timer0Init+0x34>
     c0a:	14 c0       	rjmp	.+40     	; 0xc34 <timer0Init+0x52>
     c0c:	60 32       	cpi	r22, 0x20	; 32
     c0e:	59 f0       	breq	.+22     	; 0xc26 <timer0Init+0x44>
     c10:	60 33       	cpi	r22, 0x30	; 48
     c12:	81 f4       	brne	.+32     	; 0xc34 <timer0Init+0x52>
     c14:	0c c0       	rjmp	.+24     	; 0xc2e <timer0Init+0x4c>
	case  T0_OC0_DIS:
	{
	TCCR0 &= 0xCF;
     c16:	83 b7       	in	r24, 0x33	; 51
     c18:	8f 7c       	andi	r24, 0xCF	; 207
     c1a:	83 bf       	out	0x33, r24	; 51
		break;
     c1c:	0b c0       	rjmp	.+22     	; 0xc34 <timer0Init+0x52>
	}
	case T0_OC0_TOGGLE:
	{
		TCCR0|=T0_OC0_TOGGLE;
     c1e:	83 b7       	in	r24, 0x33	; 51
     c20:	80 61       	ori	r24, 0x10	; 16
     c22:	83 bf       	out	0x33, r24	; 51
		break;
     c24:	07 c0       	rjmp	.+14     	; 0xc34 <timer0Init+0x52>
	}
	case  T0_OC0_CLEAR:
	{
	TCCR0 |= T0_OC0_CLEAR;
     c26:	83 b7       	in	r24, 0x33	; 51
     c28:	80 62       	ori	r24, 0x20	; 32
     c2a:	83 bf       	out	0x33, r24	; 51

		break;
     c2c:	03 c0       	rjmp	.+6      	; 0xc34 <timer0Init+0x52>
	}
	case T0_OC0_SET:
	{
		TCCR0 |=T0_OC0_SET;
     c2e:	83 b7       	in	r24, 0x33	; 51
     c30:	80 63       	ori	r24, 0x30	; 48
     c32:	83 bf       	out	0x33, r24	; 51
		break;
	}

}
OCR0  =u8_outputCompare;
     c34:	0c bf       	out	0x3c, r16	; 60
switch(en_interruptMask){
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	e8 16       	cp	r14, r24
     c3a:	69 f0       	breq	.+26     	; 0xc56 <timer0Init+0x74>
     c3c:	e8 16       	cp	r14, r24
     c3e:	20 f0       	brcs	.+8      	; 0xc48 <timer0Init+0x66>
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	e8 16       	cp	r14, r24
     c44:	e9 f4       	brne	.+58     	; 0xc80 <timer0Init+0x9e>
     c46:	10 c0       	rjmp	.+32     	; 0xc68 <timer0Init+0x86>
case  T0_POLLING:{
pooling=0;
     c48:	10 92 6c 00 	sts	0x006C, r1
G_interrupt_Disable();
     c4c:	0e 94 55 01 	call	0x2aa	; 0x2aa <G_interrupt_Disable>
TIMSK &= T0_POLLING;
     c50:	89 b7       	in	r24, 0x39	; 57
     c52:	19 be       	out	0x39, r1	; 57
break;
     c54:	15 c0       	rjmp	.+42     	; 0xc80 <timer0Init+0x9e>
}
case T0_INTERRUPT_NORMAL :
{pooling=1;
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	80 93 6c 00 	sts	0x006C, r24
G_interrupt_Enable();
     c5c:	0e 94 45 01 	call	0x28a	; 0x28a <G_interrupt_Enable>
TIMSK |= T0_INTERRUPT_NORMAL;
     c60:	89 b7       	in	r24, 0x39	; 57
     c62:	81 60       	ori	r24, 0x01	; 1
     c64:	89 bf       	out	0x39, r24	; 57
break;
     c66:	0c c0       	rjmp	.+24     	; 0xc80 <timer0Init+0x9e>
}
case T0_INTERRUPT_CMP:
{pooling=1;
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	80 93 6c 00 	sts	0x006C, r24
//G_interrupt_Enable();
SET_BIT(SREG,7);
     c6e:	8f b7       	in	r24, 0x3f	; 63
     c70:	80 68       	ori	r24, 0x80	; 128
     c72:	8f bf       	out	0x3f, r24	; 63
TIMSK |= T0_INTERRUPT_NORMAL;
     c74:	89 b7       	in	r24, 0x39	; 57
     c76:	81 60       	ori	r24, 0x01	; 1
     c78:	89 bf       	out	0x39, r24	; 57
TIMSK |=T0_INTERRUPT_CMP;
     c7a:	89 b7       	in	r24, 0x39	; 57
     c7c:	82 60       	ori	r24, 0x02	; 2
     c7e:	89 bf       	out	0x39, r24	; 57
}
}

}

}
     c80:	0f 91       	pop	r16
     c82:	ef 90       	pop	r14
     c84:	08 95       	ret

00000c86 <timer0DelayMs>:
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     c86:	ac 01       	movw	r20, r24
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	41 15       	cp	r20, r1
     c8e:	51 05       	cpc	r21, r1
     c90:	61 05       	cpc	r22, r1
     c92:	71 05       	cpc	r23, r1
     c94:	89 f0       	breq	.+34     	; 0xcb8 <timer0DelayMs+0x32>
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	dc 01       	movw	r26, r24
{
	while ((TIFR&0x01)==0);
     c9c:	08 b6       	in	r0, 0x38	; 56
     c9e:	00 fe       	sbrs	r0, 0
     ca0:	fd cf       	rjmp	.-6      	; 0xc9c <timer0DelayMs+0x16>
	TIFR |=0x01;
     ca2:	28 b7       	in	r18, 0x38	; 56
     ca4:	21 60       	ori	r18, 0x01	; 1
     ca6:	28 bf       	out	0x38, r18	; 56
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     ca8:	01 96       	adiw	r24, 0x01	; 1
     caa:	a1 1d       	adc	r26, r1
     cac:	b1 1d       	adc	r27, r1
     cae:	84 17       	cp	r24, r20
     cb0:	95 07       	cpc	r25, r21
     cb2:	a6 07       	cpc	r26, r22
     cb4:	b7 07       	cpc	r27, r23
     cb6:	90 f3       	brcs	.-28     	; 0xc9c <timer0DelayMs+0x16>
     cb8:	08 95       	ret

00000cba <timer0DelayUs>:
 at pooling _no prescaling
 240at TCNT0

 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
	u8_ovf_counter=0;
     cbe:	10 92 68 00 	sts	0x0068, r1
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	a1 05       	cpc	r26, r1
     cc6:	b1 05       	cpc	r27, r1
     cc8:	31 f0       	breq	.+12     	; 0xcd6 <timer0DelayUs+0x1c>
	{
	timer0Set(240);
     cca:	80 ef       	ldi	r24, 0xF0	; 240
     ccc:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <timer0Set>
	while(timer0Read()<=255);
     cd0:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <timer0Read>
     cd4:	fd cf       	rjmp	.-6      	; 0xcd0 <timer0DelayUs+0x16>
	//while(u32_ovf_counter <= (8*u32_delay_in_us/1000));
	}
	TIFR |=(1<<TOV0);/*Clear the flag*/
     cd6:	88 b7       	in	r24, 0x38	; 56
     cd8:	81 60       	ori	r24, 0x01	; 1
     cda:	88 bf       	out	0x38, r24	; 56
}/*1*/
     cdc:	08 95       	ret

00000cde <timer0SwPWM>:
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
     cde:	cf 92       	push	r12
     ce0:	df 92       	push	r13
     ce2:	ef 92       	push	r14
     ce4:	ff 92       	push	r15
     ce6:	cf 93       	push	r28
     ce8:	c8 2f       	mov	r28, r24
float dutyReal;
pwm_time_on=MAX_HOLD;
     cea:	8f ef       	ldi	r24, 0xFF	; 255
     cec:	80 93 6a 00 	sts	0x006A, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
     cf0:	60 91 6a 00 	lds	r22, 0x006A
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__floatunsisf>
     cfe:	6b 01       	movw	r12, r22
     d00:	7c 01       	movw	r14, r24
}/*1*/
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
     d02:	6c 2f       	mov	r22, r28
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__floatunsisf>
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	48 ec       	ldi	r20, 0xC8	; 200
     d14:	52 e4       	ldi	r21, 0x42	; 66
     d16:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__divsf3>
     d1a:	9b 01       	movw	r18, r22
     d1c:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
     d1e:	c7 01       	movw	r24, r14
     d20:	b6 01       	movw	r22, r12
     d22:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__mulsf3>
     d26:	0e 94 c4 07 	call	0xf88	; 0xf88 <__fixunssfsi>
     d2a:	60 93 6a 00 	sts	0x006A, r22
switch(pooling)
     d2e:	80 91 6c 00 	lds	r24, 0x006C
     d32:	88 23       	and	r24, r24
     d34:	19 f0       	breq	.+6      	; 0xd3c <timer0SwPWM+0x5e>
     d36:	81 30       	cpi	r24, 0x01	; 1
     d38:	29 f5       	brne	.+74     	; 0xd84 <timer0SwPWM+0xa6>
     d3a:	1f c0       	rjmp	.+62     	; 0xd7a <timer0SwPWM+0x9c>
{
	case 0:
	{
	timer0Start();
     d3c:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <timer0Start>
	timer0Set(pwm_time_on);
     d40:	80 91 6a 00 	lds	r24, 0x006A
     d44:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <timer0Set>
	//freq 50KHZ is the Max frequency possible
	while ((TIFR&0x01)==0);
     d48:	08 b6       	in	r0, 0x38	; 56
     d4a:	00 fe       	sbrs	r0, 0
     d4c:	fd cf       	rjmp	.-6      	; 0xd48 <timer0SwPWM+0x6a>
	TIFR |=0x01;
     d4e:	88 b7       	in	r24, 0x38	; 56
     d50:	81 60       	ori	r24, 0x01	; 1
     d52:	88 bf       	out	0x38, r24	; 56
	PORTC_DATA |=0xff;
     d54:	85 b3       	in	r24, 0x15	; 21
     d56:	8f ef       	ldi	r24, 0xFF	; 255
     d58:	85 bb       	out	0x15, r24	; 21
	timer0Start();
     d5a:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <timer0Start>
	timer0Set(MAX_HOLD-pwm_time_on);
     d5e:	80 91 6a 00 	lds	r24, 0x006A
     d62:	80 95       	com	r24
     d64:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <timer0Set>
	//freq
	while ((TIFR & 0x01)==0);
     d68:	08 b6       	in	r0, 0x38	; 56
     d6a:	00 fe       	sbrs	r0, 0
     d6c:	fd cf       	rjmp	.-6      	; 0xd68 <timer0SwPWM+0x8a>
	TIFR |=0x01;
     d6e:	88 b7       	in	r24, 0x38	; 56
     d70:	81 60       	ori	r24, 0x01	; 1
     d72:	88 bf       	out	0x38, r24	; 56
	PORTC_DATA &=0x00;
     d74:	85 b3       	in	r24, 0x15	; 21
     d76:	15 ba       	out	0x15, r1	; 21

break;
     d78:	05 c0       	rjmp	.+10     	; 0xd84 <timer0SwPWM+0xa6>
}
case 1:
{
timer0Start();
     d7a:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <timer0Start>
OCR0=pwm_time_on;
     d7e:	80 91 6a 00 	lds	r24, 0x006A
     d82:	8c bf       	out	0x3c, r24	; 60
break;
}

}

}
     d84:	cf 91       	pop	r28
     d86:	ff 90       	pop	r15
     d88:	ef 90       	pop	r14
     d8a:	df 90       	pop	r13
     d8c:	cf 90       	pop	r12
     d8e:	08 95       	ret

00000d90 <timer0MakePulse>:

void timer0MakePulse(void)
{
     d90:	ef 92       	push	r14
     d92:	0f 93       	push	r16
timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_NO,0,0,T0_POLLING);
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	41 e0       	ldi	r20, 0x01	; 1
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	00 e0       	ldi	r16, 0x00	; 0
     d9e:	ee 24       	eor	r14, r14
     da0:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <timer0Init>
TIFR |=0x01;
}
timer0Stop();
PORTD_DATA^=0xff;
*/
timer0SwPWM(80,0);//triger
     da4:	80 e5       	ldi	r24, 0x50	; 80
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	0e 94 6f 06 	call	0xcde	; 0xcde <timer0SwPWM>
timer0Init(T0_NORMAL_MODE,T0_OC0_DIS,T0_PRESCALER_NO,0,0,T0_INTERRUPT_NORMAL);
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	41 e0       	ldi	r20, 0x01	; 1
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	ee 24       	eor	r14, r14
     db6:	e3 94       	inc	r14
     db8:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <timer0Init>

}
     dbc:	0f 91       	pop	r16
     dbe:	ef 90       	pop	r14
     dc0:	08 95       	ret

00000dc2 <Timer_interrupt_routine>:
void Timer_interrupt_routine(void)
{/*
	Led_Toggle(LED_3);
	timer0Stop();
*/
u8_ovf_counter +=1;
     dc2:	80 91 68 00 	lds	r24, 0x0068
     dc6:	8f 5f       	subi	r24, 0xFF	; 255
     dc8:	80 93 68 00 	sts	0x0068, r24
//timer0Read();
//flag =1;
}
     dcc:	08 95       	ret

00000dce <Timer_interrupt_COMP_routine>:

void Timer_interrupt_COMP_routine(void)
{
	PORTD_DATA ^=0xff;
     dce:	82 b3       	in	r24, 0x12	; 18
     dd0:	80 95       	com	r24
     dd2:	82 bb       	out	0x12, r24	; 18

}
     dd4:	08 95       	ret

00000dd6 <timer1Set>:


 */
void timer1Set(uint16_t u16_value)
{
TCNT1=u16_value;
     dd6:	9d bd       	out	0x2d, r25	; 45
     dd8:	8c bd       	out	0x2c, r24	; 44
}
     dda:	08 95       	ret

00000ddc <timer1Read>:
 * Description:
 * @return
 */
uint16_t timer1Read(void)
{
return TCNT1;
     ddc:	8c b5       	in	r24, 0x2c	; 44
     dde:	9d b5       	in	r25, 0x2d	; 45
}
     de0:	08 95       	ret

00000de2 <timer1Start>:
void timer1Start(void)
{



}
     de2:	08 95       	ret

00000de4 <timer1Stop>:
void timer1Stop(void)
{



}
     de4:	08 95       	ret

00000de6 <timer1DelayMs>:
 */
void timer1DelayMs(uint16_t u16_delay_in_ms)
{


}
     de6:	08 95       	ret

00000de8 <timer1DelayUs>:
 */
void timer1DelayUs(uint32_t u32_delay_in_us)
{


}
     de8:	08 95       	ret

00000dea <timer1SwPWM>:
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{


}
     dea:	08 95       	ret

00000dec <timer2Set>:
* Description:
* @param value
*/
void timer2Set(uint8_t u8_a_value)
{
TCNT2=u8_a_value;
     dec:	84 bd       	out	0x24, r24	; 36
}
     dee:	08 95       	ret

00000df0 <timer2Read>:
/**
* Description:
* @return
*/
uint8_t timer2Read(void){
return TCNT2;
     df0:	84 b5       	in	r24, 0x24	; 36
}
     df2:	08 95       	ret

00000df4 <timer2Start>:
/**
* Description:
*/
void timer2Start(void)
{
TCCR2 &= 0xf8;
     df4:	85 b5       	in	r24, 0x25	; 37
     df6:	88 7f       	andi	r24, 0xF8	; 248
     df8:	85 bd       	out	0x25, r24	; 37
TCCR2 |= Prescaler_Value2;
     dfa:	95 b5       	in	r25, 0x25	; 37
     dfc:	80 91 6b 00 	lds	r24, 0x006B
     e00:	89 2b       	or	r24, r25
     e02:	85 bd       	out	0x25, r24	; 37
}
     e04:	08 95       	ret

00000e06 <timer2Stop>:
/**
* Description:
*/
void timer2Stop(void)
{
TCCR2 &= 0xf8;
     e06:	85 b5       	in	r24, 0x25	; 37
     e08:	88 7f       	andi	r24, 0xF8	; 248
     e0a:	85 bd       	out	0x25, r24	; 37

}
     e0c:	08 95       	ret

00000e0e <timer2Init>:


}

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC,En_timer2perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
     e0e:	cf 92       	push	r12
     e10:	0f 93       	push	r16
if(en_prescal == T0_NO_CLOCK)
     e12:	44 23       	and	r20, r20
     e14:	19 f4       	brne	.+6      	; 0xe1c <timer2Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer2Stop();
     e16:	0e 94 03 07 	call	0xe06	; 0xe06 <timer2Stop>
     e1a:	3e c0       	rjmp	.+124    	; 0xe98 <timer2Init+0x8a>
}
else
{
TCCR2 |= en_mode|en_prescal ;
     e1c:	95 b5       	in	r25, 0x25	; 37
     e1e:	89 2b       	or	r24, r25
     e20:	84 2b       	or	r24, r20
     e22:	85 bd       	out	0x25, r24	; 37
Prescaler_Value2=en_prescal;
     e24:	40 93 6b 00 	sts	0x006B, r20
TCNT2 = u8_initialValue;
     e28:	24 bd       	out	0x24, r18	; 36
switch(en_OC){
     e2a:	60 31       	cpi	r22, 0x10	; 16
     e2c:	71 f0       	breq	.+28     	; 0xe4a <timer2Init+0x3c>
     e2e:	61 31       	cpi	r22, 0x11	; 17
     e30:	18 f4       	brcc	.+6      	; 0xe38 <timer2Init+0x2a>
     e32:	66 23       	and	r22, r22
     e34:	31 f0       	breq	.+12     	; 0xe42 <timer2Init+0x34>
     e36:	14 c0       	rjmp	.+40     	; 0xe60 <timer2Init+0x52>
     e38:	60 32       	cpi	r22, 0x20	; 32
     e3a:	59 f0       	breq	.+22     	; 0xe52 <timer2Init+0x44>
     e3c:	60 33       	cpi	r22, 0x30	; 48
     e3e:	81 f4       	brne	.+32     	; 0xe60 <timer2Init+0x52>
     e40:	0c c0       	rjmp	.+24     	; 0xe5a <timer2Init+0x4c>
	case  T2_OC2_DIS:
	{
	TCCR2 &= 0xCF;
     e42:	85 b5       	in	r24, 0x25	; 37
     e44:	8f 7c       	andi	r24, 0xCF	; 207
     e46:	85 bd       	out	0x25, r24	; 37
		break;
     e48:	0b c0       	rjmp	.+22     	; 0xe60 <timer2Init+0x52>
	}
	case T2_OC2_TOGGLE:
	{
		TCCR2 |=T2_OC2_TOGGLE;
     e4a:	85 b5       	in	r24, 0x25	; 37
     e4c:	80 61       	ori	r24, 0x10	; 16
     e4e:	85 bd       	out	0x25, r24	; 37
		break;
     e50:	07 c0       	rjmp	.+14     	; 0xe60 <timer2Init+0x52>
	}
	case  T2_OC2_CLEAR:
	{
	TCCR2 |= T2_OC2_CLEAR;
     e52:	85 b5       	in	r24, 0x25	; 37
     e54:	80 62       	ori	r24, 0x20	; 32
     e56:	85 bd       	out	0x25, r24	; 37

		break;
     e58:	03 c0       	rjmp	.+6      	; 0xe60 <timer2Init+0x52>
	}
	case T2_OC2_SET:
	{
		TCCR2 |=T2_OC2_SET;
     e5a:	85 b5       	in	r24, 0x25	; 37
     e5c:	80 63       	ori	r24, 0x30	; 48
     e5e:	85 bd       	out	0x25, r24	; 37
		break;
	}

}
OCR2  =u8_outputCompare;
     e60:	03 bd       	out	0x23, r16	; 35
switch(en_interruptMask){
     e62:	80 e4       	ldi	r24, 0x40	; 64
     e64:	c8 16       	cp	r12, r24
     e66:	51 f0       	breq	.+20     	; 0xe7c <timer2Init+0x6e>
     e68:	80 e8       	ldi	r24, 0x80	; 128
     e6a:	c8 16       	cp	r12, r24
     e6c:	69 f0       	breq	.+26     	; 0xe88 <timer2Init+0x7a>
     e6e:	cc 20       	and	r12, r12
     e70:	99 f4       	brne	.+38     	; 0xe98 <timer2Init+0x8a>
case  T2_POLLING:
G_interrupt_Disable();
     e72:	0e 94 55 01 	call	0x2aa	; 0x2aa <G_interrupt_Disable>
TIMSK &= T2_POLLING;
     e76:	89 b7       	in	r24, 0x39	; 57
     e78:	19 be       	out	0x39, r1	; 57
break;
     e7a:	0e c0       	rjmp	.+28     	; 0xe98 <timer2Init+0x8a>
case T2_INTERRUPT_NORMAL :
{
G_interrupt_Enable();
     e7c:	0e 94 45 01 	call	0x28a	; 0x28a <G_interrupt_Enable>
TIMSK |= T2_INTERRUPT_NORMAL;
     e80:	89 b7       	in	r24, 0x39	; 57
     e82:	80 64       	ori	r24, 0x40	; 64
     e84:	89 bf       	out	0x39, r24	; 57
break;
     e86:	08 c0       	rjmp	.+16     	; 0xe98 <timer2Init+0x8a>
}
case T2_INTERRUPT_CMP:
{
G_interrupt_Enable();
     e88:	0e 94 45 01 	call	0x28a	; 0x28a <G_interrupt_Enable>
//SET_BIT(SREG,7);
TIMSK |=T2_INTERRUPT_NORMAL;
     e8c:	89 b7       	in	r24, 0x39	; 57
     e8e:	80 64       	ori	r24, 0x40	; 64
     e90:	89 bf       	out	0x39, r24	; 57
TIMSK |=T2_INTERRUPT_CMP;
     e92:	89 b7       	in	r24, 0x39	; 57
     e94:	80 68       	ori	r24, 0x80	; 128
     e96:	89 bf       	out	0x39, r24	; 57

}



}
     e98:	0f 91       	pop	r16
     e9a:	cf 90       	pop	r12
     e9c:	08 95       	ret

00000e9e <timer2DelayMs>:
* Description:
* @param delay
*/
void timer2DelayMs(uint16_t u16_delay_in_ms)
{
while(u16_delay_in_ms > 0)
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	41 f0       	breq	.+16     	; 0xeb2 <timer2DelayMs+0x14>
{
while ((TIFR & 0x40)==0);
     ea2:	08 b6       	in	r0, 0x38	; 56
     ea4:	06 fe       	sbrs	r0, 6
     ea6:	fd cf       	rjmp	.-6      	; 0xea2 <timer2DelayMs+0x4>
TIFR |=0x40;
     ea8:	28 b7       	in	r18, 0x38	; 56
     eaa:	20 64       	ori	r18, 0x40	; 64
     eac:	28 bf       	out	0x38, r18	; 56
u16_delay_in_ms--;
     eae:	01 97       	sbiw	r24, 0x01	; 1
* Description:
* @param delay
*/
void timer2DelayMs(uint16_t u16_delay_in_ms)
{
while(u16_delay_in_ms > 0)
     eb0:	c1 f7       	brne	.-16     	; 0xea2 <timer2DelayMs+0x4>
     eb2:	08 95       	ret

00000eb4 <timer2DelayUs>:
*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{


}
     eb4:	08 95       	ret

00000eb6 <timer2SwPWM>:
*/
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{


}
     eb6:	08 95       	ret

00000eb8 <__divsf3>:
     eb8:	0c d0       	rcall	.+24     	; 0xed2 <__divsf3x>
     eba:	e6 c0       	rjmp	.+460    	; 0x1088 <__fp_round>
     ebc:	de d0       	rcall	.+444    	; 0x107a <__fp_pscB>
     ebe:	40 f0       	brcs	.+16     	; 0xed0 <__divsf3+0x18>
     ec0:	d5 d0       	rcall	.+426    	; 0x106c <__fp_pscA>
     ec2:	30 f0       	brcs	.+12     	; 0xed0 <__divsf3+0x18>
     ec4:	21 f4       	brne	.+8      	; 0xece <__divsf3+0x16>
     ec6:	5f 3f       	cpi	r21, 0xFF	; 255
     ec8:	19 f0       	breq	.+6      	; 0xed0 <__divsf3+0x18>
     eca:	c7 c0       	rjmp	.+398    	; 0x105a <__fp_inf>
     ecc:	51 11       	cpse	r21, r1
     ece:	10 c1       	rjmp	.+544    	; 0x10f0 <__fp_szero>
     ed0:	ca c0       	rjmp	.+404    	; 0x1066 <__fp_nan>

00000ed2 <__divsf3x>:
     ed2:	eb d0       	rcall	.+470    	; 0x10aa <__fp_split3>
     ed4:	98 f3       	brcs	.-26     	; 0xebc <__divsf3+0x4>

00000ed6 <__divsf3_pse>:
     ed6:	99 23       	and	r25, r25
     ed8:	c9 f3       	breq	.-14     	; 0xecc <__divsf3+0x14>
     eda:	55 23       	and	r21, r21
     edc:	b1 f3       	breq	.-20     	; 0xeca <__divsf3+0x12>
     ede:	95 1b       	sub	r25, r21
     ee0:	55 0b       	sbc	r21, r21
     ee2:	bb 27       	eor	r27, r27
     ee4:	aa 27       	eor	r26, r26
     ee6:	62 17       	cp	r22, r18
     ee8:	73 07       	cpc	r23, r19
     eea:	84 07       	cpc	r24, r20
     eec:	38 f0       	brcs	.+14     	; 0xefc <__divsf3_pse+0x26>
     eee:	9f 5f       	subi	r25, 0xFF	; 255
     ef0:	5f 4f       	sbci	r21, 0xFF	; 255
     ef2:	22 0f       	add	r18, r18
     ef4:	33 1f       	adc	r19, r19
     ef6:	44 1f       	adc	r20, r20
     ef8:	aa 1f       	adc	r26, r26
     efa:	a9 f3       	breq	.-22     	; 0xee6 <__divsf3_pse+0x10>
     efc:	33 d0       	rcall	.+102    	; 0xf64 <__divsf3_pse+0x8e>
     efe:	0e 2e       	mov	r0, r30
     f00:	3a f0       	brmi	.+14     	; 0xf10 <__divsf3_pse+0x3a>
     f02:	e0 e8       	ldi	r30, 0x80	; 128
     f04:	30 d0       	rcall	.+96     	; 0xf66 <__divsf3_pse+0x90>
     f06:	91 50       	subi	r25, 0x01	; 1
     f08:	50 40       	sbci	r21, 0x00	; 0
     f0a:	e6 95       	lsr	r30
     f0c:	00 1c       	adc	r0, r0
     f0e:	ca f7       	brpl	.-14     	; 0xf02 <__divsf3_pse+0x2c>
     f10:	29 d0       	rcall	.+82     	; 0xf64 <__divsf3_pse+0x8e>
     f12:	fe 2f       	mov	r31, r30
     f14:	27 d0       	rcall	.+78     	; 0xf64 <__divsf3_pse+0x8e>
     f16:	66 0f       	add	r22, r22
     f18:	77 1f       	adc	r23, r23
     f1a:	88 1f       	adc	r24, r24
     f1c:	bb 1f       	adc	r27, r27
     f1e:	26 17       	cp	r18, r22
     f20:	37 07       	cpc	r19, r23
     f22:	48 07       	cpc	r20, r24
     f24:	ab 07       	cpc	r26, r27
     f26:	b0 e8       	ldi	r27, 0x80	; 128
     f28:	09 f0       	breq	.+2      	; 0xf2c <__divsf3_pse+0x56>
     f2a:	bb 0b       	sbc	r27, r27
     f2c:	80 2d       	mov	r24, r0
     f2e:	bf 01       	movw	r22, r30
     f30:	ff 27       	eor	r31, r31
     f32:	93 58       	subi	r25, 0x83	; 131
     f34:	5f 4f       	sbci	r21, 0xFF	; 255
     f36:	2a f0       	brmi	.+10     	; 0xf42 <__divsf3_pse+0x6c>
     f38:	9e 3f       	cpi	r25, 0xFE	; 254
     f3a:	51 05       	cpc	r21, r1
     f3c:	68 f0       	brcs	.+26     	; 0xf58 <__divsf3_pse+0x82>
     f3e:	8d c0       	rjmp	.+282    	; 0x105a <__fp_inf>
     f40:	d7 c0       	rjmp	.+430    	; 0x10f0 <__fp_szero>
     f42:	5f 3f       	cpi	r21, 0xFF	; 255
     f44:	ec f3       	brlt	.-6      	; 0xf40 <__divsf3_pse+0x6a>
     f46:	98 3e       	cpi	r25, 0xE8	; 232
     f48:	dc f3       	brlt	.-10     	; 0xf40 <__divsf3_pse+0x6a>
     f4a:	86 95       	lsr	r24
     f4c:	77 95       	ror	r23
     f4e:	67 95       	ror	r22
     f50:	b7 95       	ror	r27
     f52:	f7 95       	ror	r31
     f54:	9f 5f       	subi	r25, 0xFF	; 255
     f56:	c9 f7       	brne	.-14     	; 0xf4a <__divsf3_pse+0x74>
     f58:	88 0f       	add	r24, r24
     f5a:	91 1d       	adc	r25, r1
     f5c:	96 95       	lsr	r25
     f5e:	87 95       	ror	r24
     f60:	97 f9       	bld	r25, 7
     f62:	08 95       	ret
     f64:	e1 e0       	ldi	r30, 0x01	; 1
     f66:	66 0f       	add	r22, r22
     f68:	77 1f       	adc	r23, r23
     f6a:	88 1f       	adc	r24, r24
     f6c:	bb 1f       	adc	r27, r27
     f6e:	62 17       	cp	r22, r18
     f70:	73 07       	cpc	r23, r19
     f72:	84 07       	cpc	r24, r20
     f74:	ba 07       	cpc	r27, r26
     f76:	20 f0       	brcs	.+8      	; 0xf80 <__divsf3_pse+0xaa>
     f78:	62 1b       	sub	r22, r18
     f7a:	73 0b       	sbc	r23, r19
     f7c:	84 0b       	sbc	r24, r20
     f7e:	ba 0b       	sbc	r27, r26
     f80:	ee 1f       	adc	r30, r30
     f82:	88 f7       	brcc	.-30     	; 0xf66 <__divsf3_pse+0x90>
     f84:	e0 95       	com	r30
     f86:	08 95       	ret

00000f88 <__fixunssfsi>:
     f88:	98 d0       	rcall	.+304    	; 0x10ba <__fp_splitA>
     f8a:	88 f0       	brcs	.+34     	; 0xfae <__fixunssfsi+0x26>
     f8c:	9f 57       	subi	r25, 0x7F	; 127
     f8e:	90 f0       	brcs	.+36     	; 0xfb4 <__fixunssfsi+0x2c>
     f90:	b9 2f       	mov	r27, r25
     f92:	99 27       	eor	r25, r25
     f94:	b7 51       	subi	r27, 0x17	; 23
     f96:	a0 f0       	brcs	.+40     	; 0xfc0 <__fixunssfsi+0x38>
     f98:	d1 f0       	breq	.+52     	; 0xfce <__fixunssfsi+0x46>
     f9a:	66 0f       	add	r22, r22
     f9c:	77 1f       	adc	r23, r23
     f9e:	88 1f       	adc	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	1a f0       	brmi	.+6      	; 0xfaa <__fixunssfsi+0x22>
     fa4:	ba 95       	dec	r27
     fa6:	c9 f7       	brne	.-14     	; 0xf9a <__fixunssfsi+0x12>
     fa8:	12 c0       	rjmp	.+36     	; 0xfce <__fixunssfsi+0x46>
     faa:	b1 30       	cpi	r27, 0x01	; 1
     fac:	81 f0       	breq	.+32     	; 0xfce <__fixunssfsi+0x46>
     fae:	9f d0       	rcall	.+318    	; 0x10ee <__fp_zero>
     fb0:	b1 e0       	ldi	r27, 0x01	; 1
     fb2:	08 95       	ret
     fb4:	9c c0       	rjmp	.+312    	; 0x10ee <__fp_zero>
     fb6:	67 2f       	mov	r22, r23
     fb8:	78 2f       	mov	r23, r24
     fba:	88 27       	eor	r24, r24
     fbc:	b8 5f       	subi	r27, 0xF8	; 248
     fbe:	39 f0       	breq	.+14     	; 0xfce <__fixunssfsi+0x46>
     fc0:	b9 3f       	cpi	r27, 0xF9	; 249
     fc2:	cc f3       	brlt	.-14     	; 0xfb6 <__fixunssfsi+0x2e>
     fc4:	86 95       	lsr	r24
     fc6:	77 95       	ror	r23
     fc8:	67 95       	ror	r22
     fca:	b3 95       	inc	r27
     fcc:	d9 f7       	brne	.-10     	; 0xfc4 <__fixunssfsi+0x3c>
     fce:	3e f4       	brtc	.+14     	; 0xfde <__fixunssfsi+0x56>
     fd0:	90 95       	com	r25
     fd2:	80 95       	com	r24
     fd4:	70 95       	com	r23
     fd6:	61 95       	neg	r22
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255
     fda:	8f 4f       	sbci	r24, 0xFF	; 255
     fdc:	9f 4f       	sbci	r25, 0xFF	; 255
     fde:	08 95       	ret

00000fe0 <__floatunsisf>:
     fe0:	e8 94       	clt
     fe2:	09 c0       	rjmp	.+18     	; 0xff6 <__floatsisf+0x12>

00000fe4 <__floatsisf>:
     fe4:	97 fb       	bst	r25, 7
     fe6:	3e f4       	brtc	.+14     	; 0xff6 <__floatsisf+0x12>
     fe8:	90 95       	com	r25
     fea:	80 95       	com	r24
     fec:	70 95       	com	r23
     fee:	61 95       	neg	r22
     ff0:	7f 4f       	sbci	r23, 0xFF	; 255
     ff2:	8f 4f       	sbci	r24, 0xFF	; 255
     ff4:	9f 4f       	sbci	r25, 0xFF	; 255
     ff6:	99 23       	and	r25, r25
     ff8:	a9 f0       	breq	.+42     	; 0x1024 <__floatsisf+0x40>
     ffa:	f9 2f       	mov	r31, r25
     ffc:	96 e9       	ldi	r25, 0x96	; 150
     ffe:	bb 27       	eor	r27, r27
    1000:	93 95       	inc	r25
    1002:	f6 95       	lsr	r31
    1004:	87 95       	ror	r24
    1006:	77 95       	ror	r23
    1008:	67 95       	ror	r22
    100a:	b7 95       	ror	r27
    100c:	f1 11       	cpse	r31, r1
    100e:	f8 cf       	rjmp	.-16     	; 0x1000 <__floatsisf+0x1c>
    1010:	fa f4       	brpl	.+62     	; 0x1050 <__floatsisf+0x6c>
    1012:	bb 0f       	add	r27, r27
    1014:	11 f4       	brne	.+4      	; 0x101a <__floatsisf+0x36>
    1016:	60 ff       	sbrs	r22, 0
    1018:	1b c0       	rjmp	.+54     	; 0x1050 <__floatsisf+0x6c>
    101a:	6f 5f       	subi	r22, 0xFF	; 255
    101c:	7f 4f       	sbci	r23, 0xFF	; 255
    101e:	8f 4f       	sbci	r24, 0xFF	; 255
    1020:	9f 4f       	sbci	r25, 0xFF	; 255
    1022:	16 c0       	rjmp	.+44     	; 0x1050 <__floatsisf+0x6c>
    1024:	88 23       	and	r24, r24
    1026:	11 f0       	breq	.+4      	; 0x102c <__floatsisf+0x48>
    1028:	96 e9       	ldi	r25, 0x96	; 150
    102a:	11 c0       	rjmp	.+34     	; 0x104e <__floatsisf+0x6a>
    102c:	77 23       	and	r23, r23
    102e:	21 f0       	breq	.+8      	; 0x1038 <__floatsisf+0x54>
    1030:	9e e8       	ldi	r25, 0x8E	; 142
    1032:	87 2f       	mov	r24, r23
    1034:	76 2f       	mov	r23, r22
    1036:	05 c0       	rjmp	.+10     	; 0x1042 <__floatsisf+0x5e>
    1038:	66 23       	and	r22, r22
    103a:	71 f0       	breq	.+28     	; 0x1058 <__floatsisf+0x74>
    103c:	96 e8       	ldi	r25, 0x86	; 134
    103e:	86 2f       	mov	r24, r22
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	2a f0       	brmi	.+10     	; 0x1050 <__floatsisf+0x6c>
    1046:	9a 95       	dec	r25
    1048:	66 0f       	add	r22, r22
    104a:	77 1f       	adc	r23, r23
    104c:	88 1f       	adc	r24, r24
    104e:	da f7       	brpl	.-10     	; 0x1046 <__floatsisf+0x62>
    1050:	88 0f       	add	r24, r24
    1052:	96 95       	lsr	r25
    1054:	87 95       	ror	r24
    1056:	97 f9       	bld	r25, 7
    1058:	08 95       	ret

0000105a <__fp_inf>:
    105a:	97 f9       	bld	r25, 7
    105c:	9f 67       	ori	r25, 0x7F	; 127
    105e:	80 e8       	ldi	r24, 0x80	; 128
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	08 95       	ret

00001066 <__fp_nan>:
    1066:	9f ef       	ldi	r25, 0xFF	; 255
    1068:	80 ec       	ldi	r24, 0xC0	; 192
    106a:	08 95       	ret

0000106c <__fp_pscA>:
    106c:	00 24       	eor	r0, r0
    106e:	0a 94       	dec	r0
    1070:	16 16       	cp	r1, r22
    1072:	17 06       	cpc	r1, r23
    1074:	18 06       	cpc	r1, r24
    1076:	09 06       	cpc	r0, r25
    1078:	08 95       	ret

0000107a <__fp_pscB>:
    107a:	00 24       	eor	r0, r0
    107c:	0a 94       	dec	r0
    107e:	12 16       	cp	r1, r18
    1080:	13 06       	cpc	r1, r19
    1082:	14 06       	cpc	r1, r20
    1084:	05 06       	cpc	r0, r21
    1086:	08 95       	ret

00001088 <__fp_round>:
    1088:	09 2e       	mov	r0, r25
    108a:	03 94       	inc	r0
    108c:	00 0c       	add	r0, r0
    108e:	11 f4       	brne	.+4      	; 0x1094 <__fp_round+0xc>
    1090:	88 23       	and	r24, r24
    1092:	52 f0       	brmi	.+20     	; 0x10a8 <__fp_round+0x20>
    1094:	bb 0f       	add	r27, r27
    1096:	40 f4       	brcc	.+16     	; 0x10a8 <__fp_round+0x20>
    1098:	bf 2b       	or	r27, r31
    109a:	11 f4       	brne	.+4      	; 0x10a0 <__fp_round+0x18>
    109c:	60 ff       	sbrs	r22, 0
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <__fp_round+0x20>
    10a0:	6f 5f       	subi	r22, 0xFF	; 255
    10a2:	7f 4f       	sbci	r23, 0xFF	; 255
    10a4:	8f 4f       	sbci	r24, 0xFF	; 255
    10a6:	9f 4f       	sbci	r25, 0xFF	; 255
    10a8:	08 95       	ret

000010aa <__fp_split3>:
    10aa:	57 fd       	sbrc	r21, 7
    10ac:	90 58       	subi	r25, 0x80	; 128
    10ae:	44 0f       	add	r20, r20
    10b0:	55 1f       	adc	r21, r21
    10b2:	59 f0       	breq	.+22     	; 0x10ca <__fp_splitA+0x10>
    10b4:	5f 3f       	cpi	r21, 0xFF	; 255
    10b6:	71 f0       	breq	.+28     	; 0x10d4 <__fp_splitA+0x1a>
    10b8:	47 95       	ror	r20

000010ba <__fp_splitA>:
    10ba:	88 0f       	add	r24, r24
    10bc:	97 fb       	bst	r25, 7
    10be:	99 1f       	adc	r25, r25
    10c0:	61 f0       	breq	.+24     	; 0x10da <__fp_splitA+0x20>
    10c2:	9f 3f       	cpi	r25, 0xFF	; 255
    10c4:	79 f0       	breq	.+30     	; 0x10e4 <__fp_splitA+0x2a>
    10c6:	87 95       	ror	r24
    10c8:	08 95       	ret
    10ca:	12 16       	cp	r1, r18
    10cc:	13 06       	cpc	r1, r19
    10ce:	14 06       	cpc	r1, r20
    10d0:	55 1f       	adc	r21, r21
    10d2:	f2 cf       	rjmp	.-28     	; 0x10b8 <__fp_split3+0xe>
    10d4:	46 95       	lsr	r20
    10d6:	f1 df       	rcall	.-30     	; 0x10ba <__fp_splitA>
    10d8:	08 c0       	rjmp	.+16     	; 0x10ea <__fp_splitA+0x30>
    10da:	16 16       	cp	r1, r22
    10dc:	17 06       	cpc	r1, r23
    10de:	18 06       	cpc	r1, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	f1 cf       	rjmp	.-30     	; 0x10c6 <__fp_splitA+0xc>
    10e4:	86 95       	lsr	r24
    10e6:	71 05       	cpc	r23, r1
    10e8:	61 05       	cpc	r22, r1
    10ea:	08 94       	sec
    10ec:	08 95       	ret

000010ee <__fp_zero>:
    10ee:	e8 94       	clt

000010f0 <__fp_szero>:
    10f0:	bb 27       	eor	r27, r27
    10f2:	66 27       	eor	r22, r22
    10f4:	77 27       	eor	r23, r23
    10f6:	cb 01       	movw	r24, r22
    10f8:	97 f9       	bld	r25, 7
    10fa:	08 95       	ret

000010fc <__mulsf3>:
    10fc:	0b d0       	rcall	.+22     	; 0x1114 <__mulsf3x>
    10fe:	c4 cf       	rjmp	.-120    	; 0x1088 <__fp_round>
    1100:	b5 df       	rcall	.-150    	; 0x106c <__fp_pscA>
    1102:	28 f0       	brcs	.+10     	; 0x110e <__mulsf3+0x12>
    1104:	ba df       	rcall	.-140    	; 0x107a <__fp_pscB>
    1106:	18 f0       	brcs	.+6      	; 0x110e <__mulsf3+0x12>
    1108:	95 23       	and	r25, r21
    110a:	09 f0       	breq	.+2      	; 0x110e <__mulsf3+0x12>
    110c:	a6 cf       	rjmp	.-180    	; 0x105a <__fp_inf>
    110e:	ab cf       	rjmp	.-170    	; 0x1066 <__fp_nan>
    1110:	11 24       	eor	r1, r1
    1112:	ee cf       	rjmp	.-36     	; 0x10f0 <__fp_szero>

00001114 <__mulsf3x>:
    1114:	ca df       	rcall	.-108    	; 0x10aa <__fp_split3>
    1116:	a0 f3       	brcs	.-24     	; 0x1100 <__mulsf3+0x4>

00001118 <__mulsf3_pse>:
    1118:	95 9f       	mul	r25, r21
    111a:	d1 f3       	breq	.-12     	; 0x1110 <__mulsf3+0x14>
    111c:	95 0f       	add	r25, r21
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	55 1f       	adc	r21, r21
    1122:	62 9f       	mul	r22, r18
    1124:	f0 01       	movw	r30, r0
    1126:	72 9f       	mul	r23, r18
    1128:	bb 27       	eor	r27, r27
    112a:	f0 0d       	add	r31, r0
    112c:	b1 1d       	adc	r27, r1
    112e:	63 9f       	mul	r22, r19
    1130:	aa 27       	eor	r26, r26
    1132:	f0 0d       	add	r31, r0
    1134:	b1 1d       	adc	r27, r1
    1136:	aa 1f       	adc	r26, r26
    1138:	64 9f       	mul	r22, r20
    113a:	66 27       	eor	r22, r22
    113c:	b0 0d       	add	r27, r0
    113e:	a1 1d       	adc	r26, r1
    1140:	66 1f       	adc	r22, r22
    1142:	82 9f       	mul	r24, r18
    1144:	22 27       	eor	r18, r18
    1146:	b0 0d       	add	r27, r0
    1148:	a1 1d       	adc	r26, r1
    114a:	62 1f       	adc	r22, r18
    114c:	73 9f       	mul	r23, r19
    114e:	b0 0d       	add	r27, r0
    1150:	a1 1d       	adc	r26, r1
    1152:	62 1f       	adc	r22, r18
    1154:	83 9f       	mul	r24, r19
    1156:	a0 0d       	add	r26, r0
    1158:	61 1d       	adc	r22, r1
    115a:	22 1f       	adc	r18, r18
    115c:	74 9f       	mul	r23, r20
    115e:	33 27       	eor	r19, r19
    1160:	a0 0d       	add	r26, r0
    1162:	61 1d       	adc	r22, r1
    1164:	23 1f       	adc	r18, r19
    1166:	84 9f       	mul	r24, r20
    1168:	60 0d       	add	r22, r0
    116a:	21 1d       	adc	r18, r1
    116c:	82 2f       	mov	r24, r18
    116e:	76 2f       	mov	r23, r22
    1170:	6a 2f       	mov	r22, r26
    1172:	11 24       	eor	r1, r1
    1174:	9f 57       	subi	r25, 0x7F	; 127
    1176:	50 40       	sbci	r21, 0x00	; 0
    1178:	8a f0       	brmi	.+34     	; 0x119c <__mulsf3_pse+0x84>
    117a:	e1 f0       	breq	.+56     	; 0x11b4 <__mulsf3_pse+0x9c>
    117c:	88 23       	and	r24, r24
    117e:	4a f0       	brmi	.+18     	; 0x1192 <__mulsf3_pse+0x7a>
    1180:	ee 0f       	add	r30, r30
    1182:	ff 1f       	adc	r31, r31
    1184:	bb 1f       	adc	r27, r27
    1186:	66 1f       	adc	r22, r22
    1188:	77 1f       	adc	r23, r23
    118a:	88 1f       	adc	r24, r24
    118c:	91 50       	subi	r25, 0x01	; 1
    118e:	50 40       	sbci	r21, 0x00	; 0
    1190:	a9 f7       	brne	.-22     	; 0x117c <__mulsf3_pse+0x64>
    1192:	9e 3f       	cpi	r25, 0xFE	; 254
    1194:	51 05       	cpc	r21, r1
    1196:	70 f0       	brcs	.+28     	; 0x11b4 <__mulsf3_pse+0x9c>
    1198:	60 cf       	rjmp	.-320    	; 0x105a <__fp_inf>
    119a:	aa cf       	rjmp	.-172    	; 0x10f0 <__fp_szero>
    119c:	5f 3f       	cpi	r21, 0xFF	; 255
    119e:	ec f3       	brlt	.-6      	; 0x119a <__mulsf3_pse+0x82>
    11a0:	98 3e       	cpi	r25, 0xE8	; 232
    11a2:	dc f3       	brlt	.-10     	; 0x119a <__mulsf3_pse+0x82>
    11a4:	86 95       	lsr	r24
    11a6:	77 95       	ror	r23
    11a8:	67 95       	ror	r22
    11aa:	b7 95       	ror	r27
    11ac:	f7 95       	ror	r31
    11ae:	e7 95       	ror	r30
    11b0:	9f 5f       	subi	r25, 0xFF	; 255
    11b2:	c1 f7       	brne	.-16     	; 0x11a4 <__mulsf3_pse+0x8c>
    11b4:	fe 2b       	or	r31, r30
    11b6:	88 0f       	add	r24, r24
    11b8:	91 1d       	adc	r25, r1
    11ba:	96 95       	lsr	r25
    11bc:	87 95       	ror	r24
    11be:	97 f9       	bld	r25, 7
    11c0:	08 95       	ret

000011c2 <_exit>:
    11c2:	f8 94       	cli

000011c4 <__stop_program>:
    11c4:	ff cf       	rjmp	.-2      	; 0x11c4 <__stop_program>
